import { create } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";
import { v4 as uuidv4 } from "uuid";
import { annotation } from "@cornerstonejs/tools";
import { getRenderingEngine } from "@cornerstonejs/core";
import { debugLogger } from "../utils/debug-logger";
import type {
  DicomViewerState,
  ViewportConfig,
  LayoutType,
  SeriesInfo,
  ToolGroupConfig,
  AnnotationData,
  RequiredAnnotationData,
  WindowLevelConfig,
  WindowLevelPreset,
} from "../types";

// Default window level presets
const defaultWindowLevelPresets: WindowLevelPreset[] = [
  { name: "Abdomen", windowCenter: 60, windowWidth: 400 },
  { name: "Bone", windowCenter: 400, windowWidth: 1000 },
  { name: "Brain", windowCenter: 40, windowWidth: 80 },
  { name: "Chest", windowCenter: -600, windowWidth: 1600 },
  { name: "Lung", windowCenter: -600, windowWidth: 1600 },
  { name: "Mediastinum", windowCenter: 50, windowWidth: 350 },
];

export const useDicomStore = create<DicomViewerState>()(
  subscribeWithSelector((set, get) => ({
    // Initial state
    viewports: new Map(),
    activeViewportId: null,
    layoutType: "1x1" as LayoutType,
    viewportConfigs: new Map(), // Î∑∞Ìè¨Ìä∏Î≥Ñ ÏÑ§Ï†ï Ï†ÄÏû•

    loadedSeries: [],
    currentSeries: null,
    currentImageIndex: 0,

    activeTool: null,
    toolGroups: new Map(),

    annotations: [],
    selectedAnnotationUID: null,


    windowLevelPresets: defaultWindowLevelPresets,
    currentWindowLevel: null,

    isLoading: false,
    error: null,
    sidebarOpen: true,

    // Actions
    setActiveViewport: (viewportId: string) => {
      set({ activeViewportId: viewportId });
    },

    setLayout: (layout: LayoutType) => {
      set({ layoutType: layout });
    },

    // Layout functionality completely removed for single viewport stability

    loadSeries: (series: SeriesInfo) => {
      set((state) => {
        const existingIndex = state.loadedSeries.findIndex(
          (s) => s.seriesInstanceUID === series.seriesInstanceUID
        );

        let updatedSeries;
        if (existingIndex >= 0) {
          updatedSeries = [...state.loadedSeries];
          updatedSeries[existingIndex] = series;
        } else {
          updatedSeries = [...state.loadedSeries, series];
        }

        return {
          loadedSeries: updatedSeries,
          currentSeries: series,
          currentImageIndex: 0,
          isLoading: false,
          error: null,
        };
      });
    },

    setActiveTool: (toolName: string) => {
      const currentTool = get().activeTool;
      if (currentTool !== toolName) {
        console.log(`Activating tool: ${toolName}`);
        set({ activeTool: toolName });

        // Tool activation will be handled by DicomRenderer through subscription
        // This ensures proper setToolActive and mouse binding integration
      }
    },

    // Tool state management for DicomRenderer integration
    activateToolInViewport: (toolName: string, toolGroupRef: any) => {
      if (!toolGroupRef?.current) {
        console.warn("No tool group available for tool activation");
        return false;
      }

      try {
        console.log(`üîß ÎèÑÍµ¨ ÌôúÏÑ±Ìôî ÏãúÏûë: ${toolName}`);

        // Define tool categories and their activation logic
        const annotationTools = [
          "Length",
          "Angle",
          "CobbAngle",
          "Bidirectional",
          "RectangleROI",
          "EllipticalROI",
          "CircleROI",
          "PlanarFreehandROI",
          "SplineROI",
          "ArrowAnnotate",
          "Probe",
        ];
        const basicTools = [
          "Pan",
          "Zoom",
          "WindowLevel",
          "StackScroll",
          "Magnify",
        ];

        console.log(`üìã ÎèÑÍµ¨ Ïπ¥ÌÖåÍ≥†Î¶¨ ÌôïÏù∏:`, {
          toolName,
          isAnnotationTool: annotationTools.includes(toolName),
          isBasicTool: basicTools.includes(toolName),
        });

        // Reset all tools to passive first
        const allTools = [...annotationTools, ...basicTools];
        allTools.forEach((tool) => {
          try {
            toolGroupRef.current.setToolPassive(tool);
          } catch (e) {
            console.warn(`Failed to set ${tool} passive:`, e);
          }
        });

        // ÏÑ†ÌÉùÎêú ÎèÑÍµ¨Îßå ÎßàÏö∞Ïä§ ÏôºÏ™Ω Î≤ÑÌäºÏóê ÌôúÏÑ±Ìôî
        if (
          annotationTools.includes(toolName) ||
          basicTools.includes(toolName)
        ) {
          toolGroupRef.current.setToolActive(toolName, {
            bindings: [{ mouseButton: 1 }], // ÎßàÏö∞Ïä§ ÏôºÏ™Ω Î≤ÑÌäº
          });
          console.log(`‚úÖ ÎèÑÍµ¨ ÌôúÏÑ±Ìôî: ${toolName} (ÏôºÏ™Ω Î≤ÑÌäºÏóê Î∞îÏù∏Îî©)`);
        } else {
          console.warn(`Unknown tool: ${toolName}`);
          return false;
        }

        // Update store state to reflect successful activation
        set({ activeTool: toolName });

        // üîç ÏµúÏ¢Ö ÌôïÏù∏: ÎèÑÍµ¨ ÌôúÏÑ±Ìôî ÏÉÅÌÉú Í≤ÄÏ¶ù
        console.log(`üéØ ÎèÑÍµ¨ ÌôúÏÑ±Ìôî ÏôÑÎ£å! ÌòÑÏû¨ ÏÉÅÌÉú:`, {
          selectedTool: toolName,
          mouseButton: 1,
          message: `ÎßàÏö∞Ïä§ ÏôºÏ™Ω Î≤ÑÌäºÏúºÎ°ú ${toolName} ÎèÑÍµ¨Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.`,
        });

        return true;
      } catch (error) {
        console.error(`Failed to activate tool ${toolName}:`, error);
        return false;
      }
    },

    addAnnotation: (newAnnotation: RequiredAnnotationData) => {
      // Ensure annotationUID is always present - fix for TS2345
      const annotationWithUID: AnnotationData = {
        ...newAnnotation,
        annotationUID: newAnnotation.annotationUID || uuidv4(),
      };

      set((state) => ({
        annotations: [...state.annotations, annotationWithUID],
        selectedAnnotationUID: annotationWithUID.annotationUID,
      }));

      console.log(`üìù ÏÉà Ï£ºÏÑù Ï∂îÍ∞Ä: ${annotationWithUID.annotationUID}`);
    },

    updateAnnotation: (
      annotationUID: string,
      updates: Partial<AnnotationData>
    ) => {
      // Ensure annotationUID is string type - fix for TS2345
      if (typeof annotationUID !== "string" || !annotationUID) {
        console.error("Invalid annotationUID provided for update");
        return;
      }

      set((state) => ({
        annotations: state.annotations.map((ann) =>
          ann.annotationUID === annotationUID ? { ...ann, ...updates } : ann
        ),
      }));

      console.log(`Updated annotation: ${annotationUID}`);
    },

    updateAnnotationLabel: (annotationUID: string, newLabel: string) => {
      // Ensure annotationUID is string type and newLabel is provided
      if (typeof annotationUID !== "string" || !annotationUID) {
        console.error("Invalid annotationUID provided for label update");
        return;
      }

      if (typeof newLabel !== "string") {
        console.error("Invalid label provided for annotation update");
        return;
      }

      console.log(`üìù Ï£ºÏÑù ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏: ${annotationUID} -> "${newLabel}"`);

      set((state) => ({
        annotations: state.annotations.map((ann) =>
          ann.annotationUID === annotationUID
            ? {
                ...ann,
                data: {
                  ...ann.data,
                  label: newLabel,
                  text: newLabel,
                },
              }
            : ann
        ),
      }));

      console.log(`‚úÖ Ï£ºÏÑù ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: ${annotationUID}`);
    },

    removeAnnotation: (annotationUID: string) => {
      // Ensure annotationUID is string type - fix for TS2345
      if (typeof annotationUID !== "string" || !annotationUID) {
        console.error("Invalid annotationUID provided for removal");
        return;
      }

      console.log(`üóëÔ∏è Ï£ºÏÑù ÏÇ≠Ï†ú ÏãúÏûë: ${annotationUID}`);

      // üî• CornerstoneÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ (ÌôîÎ©¥ÏóêÏÑú Ï¶âÏãú ÏÇ¨ÎùºÏßê)
      try {
        annotation.state.removeAnnotation(annotationUID);
        console.log(`‚úÖ CornerstoneÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ ÏôÑÎ£å: ${annotationUID}`);

        // Îã®Ïùº Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ®
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        if (renderingEngine) {
          try {
            const viewport = renderingEngine.getViewport("dicom-viewport");
            if (viewport) {
              viewport.render();
              console.log("‚úÖ Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å");
            }
          } catch (e) {
            console.warn("Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:", e);
          }
        }
      } catch (error) {
        console.error("Cornerstone Ï£ºÏÑù Ï†úÍ±∞ Ïã§Ìå®:", error);
      }

      // üî• Zustand Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ (Î™©Î°ùÏóêÏÑú Ï¶âÏãú ÏÇ¨ÎùºÏßê)
      set((state) => ({
        annotations: state.annotations.filter(
          (ann) => ann.annotationUID !== annotationUID
        ),
        selectedAnnotationUID:
          state.selectedAnnotationUID === annotationUID
            ? null
            : state.selectedAnnotationUID,
      }));

      console.log(`‚úÖ Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ ÏôÑÎ£å: ${annotationUID}`);
    },

    setWindowLevel: (config: WindowLevelConfig) => {
      set({ currentWindowLevel: config });
      console.log(
        `Window level set: C${config.windowCenter} W${config.windowWidth}`
      );
    },

    setLoading: (loading: boolean) => {
      set({ isLoading: loading });
    },

    setError: (error: string | null) => {
      set({ error, isLoading: false });
      if (error) {
        console.error("DICOM Viewer Error:", error);
      }
    },

    toggleSidebar: () => {
      set((state) => ({ sidebarOpen: !state.sidebarOpen }));
    },



    // Î™®Îì† Ï£ºÏÑù ÏßÄÏö∞Í∏∞
    clearAllAnnotations: () => {
      set({ annotations: [], selectedAnnotationUID: null });
      console.log("üóëÔ∏è Î™®Îì† Ï£ºÏÑù ÏßÄÏõÄ");
    },

    // Ï£ºÏÑù Ï†ÄÏû• Ìï®Ïàò (Element not enabled Ïò§Î•ò Ìï¥Í≤∞)
    saveAnnotations: () => {
      const { annotations } = get();
      
      if (annotations.length === 0) {
        console.warn("üíæ Ï†ÄÏû•Ìï† Ï£ºÏÑùÏù¥ ÏóÜÏäµÎãàÎã§");
        return;
      }

      try {
        console.log("üîç Ï£ºÏÑù Ï†ÄÏû• ÏãúÏûë - Î∑∞Ìè¨Ìä∏ Î∞è annotation ÏÉÅÌÉú ÌôïÏù∏");
        
        // 1. Î†åÎçîÎßÅ ÏóîÏßÑÍ≥º Î∑∞Ìè¨Ìä∏ ÏÉÅÌÉú ÌôïÏù∏
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        let viewport = null;
        let isElementEnabled = false;
        
        if (renderingEngine) {
          try {
            viewport = renderingEngine.getViewport("dicom-viewport");
            isElementEnabled = viewport && viewport.element && viewport.element.isConnected;
            console.log(`üì± Î∑∞Ìè¨Ìä∏ ÏÉÅÌÉú: ${isElementEnabled ? 'ÌôúÏÑ±ÌôîÎê®' : 'ÎπÑÌôúÏÑ±ÌôîÎê®'}`);
          } catch (error) {
            console.warn("‚ö†Ô∏è Î∑∞Ìè¨Ìä∏ Ï†ëÍ∑º Ïã§Ìå®:", error);
          }
        }

        // 2. ÏïàÏ†ÑÌïú Î∞©Î≤ïÏúºÎ°ú Cornerstone annotations ÏàòÏßë
        let cornerstoneAnnotations = {};
        let fallbackFrameOfReferenceUID = null;
        
        if (isElementEnabled && viewport) {
          try {
            // Î∑∞Ìè¨Ìä∏ÏóêÏÑú ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄÏùò FrameOfReferenceUID Í∞ÄÏ†∏Ïò§Í∏∞
            const currentImage = viewport.getCurrentImageId();
            if (currentImage) {
              // ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄÏóêÏÑú FrameOfReferenceUID Ï∂îÏ∂ú ÏãúÎèÑ
              const imageData = viewport.getImageData();
              fallbackFrameOfReferenceUID = imageData?.metadata?.FrameOfReferenceUID || 
                                            viewport.getFrameOfReferenceUID?.() || 
                                            "default-frame-of-reference";
              console.log(`üÜî Í∏∞Î≥∏ FrameOfReferenceUID: ${fallbackFrameOfReferenceUID}`);
            }
            
            // Í∞úÎ≥Ñ FrameOfReferenceUIDÎ≥ÑÎ°ú Ï£ºÏÑù ÏàòÏßë (ÏïàÏ†ÑÌïú Î∞©Î≤ï)
            const uniqueFrameUIDs = new Set();
            annotations.forEach(ann => {
              if (ann.metadata?.FrameOfReferenceUID) {
                uniqueFrameUIDs.add(ann.metadata.FrameOfReferenceUID);
              } else if (fallbackFrameOfReferenceUID) {
                uniqueFrameUIDs.add(fallbackFrameOfReferenceUID);
              }
            });
            
            // Í∞Å FrameOfReferenceUIDÏóê ÎåÄÌï¥ Ï£ºÏÑù Í∞ÄÏ†∏Ïò§Í∏∞
            uniqueFrameUIDs.forEach(frameUID => {
              try {
                const frameAnnotations = annotation.state.getAnnotations(frameUID);
                if (frameAnnotations && Object.keys(frameAnnotations).length > 0) {
                  cornerstoneAnnotations[frameUID] = frameAnnotations;
                  console.log(`‚úÖ FrameOfReferenceUID ${frameUID}ÏóêÏÑú Ï£ºÏÑù ÏàòÏßë ÏôÑÎ£å`);
                }
              } catch (error) {
                console.warn(`‚ö†Ô∏è FrameOfReferenceUID ${frameUID} Ï£ºÏÑù ÏàòÏßë Ïã§Ìå®:`, error);
              }
            });
            
          } catch (error) {
            console.warn("‚ö†Ô∏è Î∑∞Ìè¨Ìä∏ÏóêÏÑú Ï£ºÏÑù ÏàòÏßë Ïã§Ìå®:", error);
          }
        }

        // 3. Zustand Ïä§ÌÜ†Ïñ¥Ïùò Ï£ºÏÑù Îç∞Ïù¥ÌÑ∞ Î≥¥Í∞ï (FrameOfReferenceUID ÎàÑÎùΩ Ïãú Î≥¥ÏôÑ)
        const enrichedAnnotations = annotations.map(ann => {
          const enrichedAnn = { ...ann };
          
          // FrameOfReferenceUIDÍ∞Ä ÎàÑÎùΩÎêú Í≤ΩÏö∞ Î≥¥ÏôÑ
          if (!enrichedAnn.metadata?.FrameOfReferenceUID && fallbackFrameOfReferenceUID) {
            enrichedAnn.metadata = {
              ...enrichedAnn.metadata,
              FrameOfReferenceUID: fallbackFrameOfReferenceUID
            };
            console.log(`üîß Ï£ºÏÑù ${ann.annotationUID}Ïóê FrameOfReferenceUID Ï∂îÍ∞Ä: ${fallbackFrameOfReferenceUID}`);
          }
          
          return enrichedAnn;
        });

        // 4. ÏµúÏ¢Ö ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
        const exportData = {
          timestamp: new Date().toISOString(),
          annotationCount: enrichedAnnotations.length,
          viewportStatus: {
            isElementEnabled,
            hasRenderingEngine: !!renderingEngine,
            hasViewport: !!viewport,
            fallbackFrameOfReferenceUID
          },
          zustandAnnotations: enrichedAnnotations,
          cornerstoneAnnotations: cornerstoneAnnotations,
          version: "1.1"
        };

        // 5. JSON ÌååÏùºÎ°ú Îã§Ïö¥Î°úÎìú
        const jsonString = JSON.stringify(exportData, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `dicom-annotations-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        console.log(`üíæ Ï£ºÏÑù Ï†ÄÏû• ÏôÑÎ£å: ${enrichedAnnotations.length}Í∞ú Ï£ºÏÑù`);
        console.log(`üìä Cornerstone Ï£ºÏÑù ÌîÑÎ†àÏûÑ: ${Object.keys(cornerstoneAnnotations).length}Í∞ú`);
        
      } catch (error) {
        console.error("‚ùå Ï£ºÏÑù Ï†ÄÏû• Ïã§Ìå®:", error);
        
        // Ïò§Î•ò Î∞úÏÉù ÏãúÏóêÎèÑ ÏµúÏÜåÌïú Zustand Îç∞Ïù¥ÌÑ∞ÎùºÎèÑ Ï†ÄÏû•
        try {
          const fallbackData = {
            timestamp: new Date().toISOString(),
            annotationCount: annotations.length,
            zustandAnnotations: annotations,
            cornerstoneAnnotations: {},
            version: "1.1-fallback",
            error: error.message
          };
          
          const jsonString = JSON.stringify(fallbackData, null, 2);
          const blob = new Blob([jsonString], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          
          const a = document.createElement('a');
          a.href = url;
          a.download = `dicom-annotations-fallback-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          
          console.log("üö® Ïò§Î•ò Î∞úÏÉùÌñàÏßÄÎßå fallback Îç∞Ïù¥ÌÑ∞Î°ú Ï†ÄÏû• ÏôÑÎ£å");
        } catch (fallbackError) {
          console.error("‚ùå Fallback Ï†ÄÏû•ÎèÑ Ïã§Ìå®:", fallbackError);
        }
      }
    },

    // Ï£ºÏÑù Î∂àÎü¨Ïò§Í∏∞ Ìï®Ïàò (Í∞ïÌôîÎêú Ïò§Î•ò Ï≤òÎ¶¨ Î∞è Í≤ÄÏ¶ù)
    loadAnnotations: () => {
      try {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = async (event) => {
          const file = (event.target as HTMLInputElement).files?.[0];
          if (!file) {
            console.log("üìÇ ÌååÏùº ÏÑ†ÌÉùÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§");
            return;
          }

          console.log(`üìÅ ÌååÏùº ÏÑ†ÌÉùÎê®: ${file.name} (${file.size} bytes)`);

          try {
            // 1. ÌååÏùº ÌÅ¨Í∏∞ Î∞è ÌôïÏû•Ïûê Í≤ÄÏ¶ù
            if (file.size === 0) {
              throw new Error("Îπà ÌååÏùºÏûÖÎãàÎã§. Ïú†Ìö®Ìïú JSON ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            }

            if (file.size > 10 * 1024 * 1024) { // 10MB Ï†úÌïú
              throw new Error("ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§. 10MB Ïù¥ÌïòÏùò ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            }

            if (!file.name.toLowerCase().endsWith('.json')) {
              console.warn("‚ö†Ô∏è ÏÑ†ÌÉùÌïú ÌååÏùºÏù¥ JSON ÌòïÏãùÏù¥ ÏïÑÎãê Ïàò ÏûàÏäµÎãàÎã§");
            }

            // 2. ÌååÏùº ÎÇ¥Ïö© ÏùΩÍ∏∞
            console.log("üìñ ÌååÏùº ÎÇ¥Ïö© ÏùΩÎäî Ï§ë...");
            const text = await file.text();
            
            if (!text || text.trim().length === 0) {
              throw new Error("ÌååÏùº ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.");
            }

            // 3. JSON ÌååÏã± with detailed error handling
            let importData;
            try {
              console.log("üîç JSON ÌååÏã± ÏãúÏûë...");
              importData = JSON.parse(text);
            } catch (parseError) {
              console.error("‚ùå JSON ÌååÏã± Ïã§Ìå®:", parseError);
              
              // ÌååÏã± Ïò§Î•ò ÏÉÅÏÑ∏ Î∂ÑÏÑù
              let errorMessage = "JSON ÌååÏùºÏù¥ ÏÜêÏÉÅÎêòÏóàÍ±∞ÎÇò Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ ÌòïÏãùÏûÖÎãàÎã§.\n\n";
              
              if (parseError instanceof SyntaxError) {
                errorMessage += `ÌååÏã± Ïò§Î•ò: ${parseError.message}\n`;
                
                // ÏùºÎ∞òÏ†ÅÏù∏ JSON Ïò§Î•ò ÏºÄÏù¥Ïä§ Î∂ÑÏÑù
                if (parseError.message.includes('Unexpected token')) {
                  errorMessage += "‚Ä¢ ÌååÏùºÏóê Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Î¨∏ÏûêÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.\n";
                } else if (parseError.message.includes('Unexpected end')) {
                  errorMessage += "‚Ä¢ ÌååÏùºÏù¥ ÏôÑÏ†ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÌååÏùº Îã§Ïö¥Î°úÎìúÍ∞Ä Ï§ëÎã®ÎêòÏóàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.\n";
                }
                
                errorMessage += "‚Ä¢ DICOM Î∑∞Ïñ¥ÏóêÏÑú ÎÇ¥Î≥¥ÎÇ∏ Ï†ïÏÉÅÏ†ÅÏù∏ JSON ÌååÏùºÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.\n";
                errorMessage += "‚Ä¢ ÌååÏùºÏùÑ Îã§Ïãú Ï†ÄÏû•ÌïòÍ±∞ÎÇò Îã§Î•∏ ÌååÏùºÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.";
              }
              
              throw new Error(errorMessage);
            }

            console.log("‚úÖ JSON ÌååÏã± ÏôÑÎ£å:", {
              version: importData.version,
              timestamp: importData.timestamp,
              annotationCount: importData.annotationCount
            });

            // 4. ÌååÏùº ÌòïÏãù Î∞è Íµ¨Ï°∞ Í≤ÄÏ¶ù
            const validationErrors = [];
            
            if (!importData || typeof importData !== 'object') {
              validationErrors.push("ÌååÏùº ÎÇ¥Ïö©Ïù¥ Ïú†Ìö®Ìïú Í∞ùÏ≤¥Í∞Ä ÏïÑÎãôÎãàÎã§.");
            }

            if (!importData.zustandAnnotations) {
              validationErrors.push("Ï£ºÏÑù Îç∞Ïù¥ÌÑ∞(zustandAnnotations)Í∞Ä ÏóÜÏäµÎãàÎã§.");
            } else if (!Array.isArray(importData.zustandAnnotations)) {
              validationErrors.push("Ï£ºÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä Î∞∞Ïó¥ ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§.");
            }

            if (!importData.version) {
              console.warn("‚ö†Ô∏è ÌååÏùº Î≤ÑÏ†Ñ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. Ìò∏ÌôòÏÑ± Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.");
            }

            if (validationErrors.length > 0) {
              throw new Error(`ÌååÏùº ÌòïÏãù Í≤ÄÏ¶ù Ïã§Ìå®:\n${validationErrors.join('\n')}\n\nÏù¥ ÌååÏùºÏùÄ DICOM Î∑∞Ïñ¥ÏóêÏÑú ÎÇ¥Î≥¥ÎÇ∏ Ï£ºÏÑù ÌååÏùºÏù¥ ÏïÑÎãôÎãàÎã§.`);
            }

            // 5. Ï£ºÏÑù Îç∞Ïù¥ÌÑ∞ Í∞úÎ≥Ñ Í≤ÄÏ¶ù
            const annotations = importData.zustandAnnotations;
            let validAnnotations = 0;
            let invalidAnnotations = 0;

            annotations.forEach((ann, index) => {
              try {
                if (!ann.annotationUID || !ann.toolName) {
                  console.warn(`‚ö†Ô∏è Ï£ºÏÑù ${index + 1}: ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ (annotationUID ÎòêÎäî toolName)`);
                  invalidAnnotations++;
                } else {
                  validAnnotations++;
                }
              } catch (error) {
                console.warn(`‚ö†Ô∏è Ï£ºÏÑù ${index + 1} Í≤ÄÏ¶ù Ïã§Ìå®:`, error);
                invalidAnnotations++;
              }
            });

            console.log(`üìä Ï£ºÏÑù Í≤ÄÏ¶ù Í≤∞Í≥º: Ïú†Ìö® ${validAnnotations}Í∞ú, Î¨¥Ìö® ${invalidAnnotations}Í∞ú`);

            if (validAnnotations === 0) {
              throw new Error("Î∂àÎü¨Ïò¨ Ïàò ÏûàÎäî Ïú†Ìö®Ìïú Ï£ºÏÑùÏù¥ ÏóÜÏäµÎãàÎã§.");
            }

            // 6. Î†åÎçîÎßÅ ÏóîÏßÑ Î∞è Î∑∞Ìè¨Ìä∏ ÏÉÅÌÉú ÌôïÏù∏
            const renderingEngine = (window as any).cornerstoneRenderingEngine;
            let viewport = null;
            let isViewportReady = false;

            if (renderingEngine) {
              try {
                viewport = renderingEngine.getViewport("dicom-viewport");
                isViewportReady = viewport && viewport.element && viewport.element.isConnected;
                console.log(`üñºÔ∏è Î∑∞Ìè¨Ìä∏ ÏÉÅÌÉú: ${isViewportReady ? 'Ï§ÄÎπÑÎê®' : 'Ï§ÄÎπÑÎêòÏßÄ ÏïäÏùå'}`);
              } catch (error) {
                console.warn("‚ö†Ô∏è Î∑∞Ìè¨Ìä∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:", error);
              }
            }

            if (!isViewportReady) {
              console.warn("‚ö†Ô∏è Î∑∞Ìè¨Ìä∏Í∞Ä Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏùºÎ∂Ä Í∏∞Îä•Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.");
            }

            // 7. Í∏∞Ï°¥ Ï£ºÏÑù Î™®Îëê ÏÇ≠Ï†ú
            console.log("üóëÔ∏è Í∏∞Ï°¥ Ï£ºÏÑù ÏÇ≠Ï†ú Ï§ë...");
            get().clearAllAnnotations();
            
            // 8. Cornerstone Ï£ºÏÑù Î≥µÏõê
            let cornerstoneRestoredCount = 0;
            
            if (importData.cornerstoneAnnotations && isViewportReady) {
              console.log("üîÑ Cornerstone Ï£ºÏÑù Î≥µÏõê ÏãúÏûë...");
              
              try {
                Object.keys(importData.cornerstoneAnnotations).forEach(frameOfReferenceUID => {
                  const frameAnnotations = importData.cornerstoneAnnotations[frameOfReferenceUID];
                  
                  if (frameAnnotations && typeof frameAnnotations === 'object') {
                    Object.keys(frameAnnotations).forEach(toolName => {
                      const toolAnnotations = frameAnnotations[toolName];
                      
                      if (Array.isArray(toolAnnotations)) {
                        toolAnnotations.forEach((ann: any) => {
                          try {
                            if (ann && ann.annotationUID && ann.metadata?.FrameOfReferenceUID) {
                              annotation.state.addAnnotation(ann, ann.metadata.FrameOfReferenceUID);
                              cornerstoneRestoredCount++;
                            }
                          } catch (error) {
                            console.warn(`Ï£ºÏÑù Î≥µÏõê Ïã§Ìå® (${ann?.annotationUID}):`, error);
                          }
                        });
                      }
                    });
                  }
                });
              } catch (error) {
                console.error("‚ùå Cornerstone Ï£ºÏÑù Î≥µÏõê Ï§ë Ïò§Î•ò:", error);
              }
            }

            // 9. Zustand Ïä§ÌÜ†Ïñ¥Ïóê Ï£ºÏÑù Î≥µÏõê
            console.log("üìù Zustand Ïä§ÌÜ†Ïñ¥Ïóê Ï£ºÏÑù Î≥µÏõê Ï§ë...");
            set({ 
              annotations: annotations,
              selectedAnnotationUID: null 
            });

            // 10. Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ®
            if (isViewportReady && viewport) {
              try {
                console.log("üîÑ Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...");
                viewport.render();
                console.log("‚úÖ Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å");
              } catch (e) {
                console.warn("Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:", e);
              }
            }

            // 11. ÏÑ±Í≥µ Î©îÏãúÏßÄ
            const successMessage = [
              `üìÅ Ï£ºÏÑù Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å!`,
              `‚Ä¢ Ï¥ù ${validAnnotations}Í∞ú Ï£ºÏÑù Î≥µÏõê`,
              `‚Ä¢ Cornerstone Ï£ºÏÑù ${cornerstoneRestoredCount}Í∞ú Î≥µÏõê`,
              `‚Ä¢ ÌååÏùº Î≤ÑÏ†Ñ: ${importData.version || 'Unknown'}`,
              `‚Ä¢ ÏõêÎ≥∏ Ï†ÄÏû• ÏãúÍ∞Ñ: ${importData.timestamp || 'Unknown'}`
            ].join('\n');

            console.log(successMessage);

            // ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏÑ±Í≥µ ÏïåÎ¶º (ÏÑ†ÌÉùÏÇ¨Ìï≠)
            if (typeof window !== 'undefined' && window.alert) {
              setTimeout(() => {
                alert(`Ï£ºÏÑù Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å!\n\n${validAnnotations}Í∞úÏùò Ï£ºÏÑùÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥µÏõêÎêòÏóàÏäµÎãàÎã§.`);
              }, 100);
            }

          } catch (error) {
            console.error("‚ùå Ï£ºÏÑù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
            
            // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïò§Î•ò ÏïåÎ¶º
            if (typeof window !== 'undefined' && window.alert) {
              setTimeout(() => {
                alert(`Ï£ºÏÑù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®\n\n${error.message}`);
              }, 100);
            }
          }
        };

        input.click();
      } catch (error) {
        console.error("‚ùå ÌååÏùº ÏÑ†ÌÉù Ïã§Ìå®:", error);
      }
    },
  }))
);

// Selectors for better performance
export const selectActiveViewport = (state: DicomViewerState) =>
  state.activeViewportId;
export const selectCurrentSeries = (state: DicomViewerState) =>
  state.currentSeries;
export const selectAnnotations = (state: DicomViewerState) => state.annotations;
export const selectActiveTool = (state: DicomViewerState) => state.activeTool;
export const selectWindowLevel = (state: DicomViewerState) =>
  state.currentWindowLevel;
export const selectIsLoading = (state: DicomViewerState) => state.isLoading;
export const selectError = (state: DicomViewerState) => state.error;
