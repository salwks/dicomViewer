import { create } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";
import { v4 as uuidv4 } from "uuid";
import { annotation } from "@cornerstonejs/tools";
import { getRenderingEngine } from "@cornerstonejs/core";
import { debugLogger } from "../utils/debug-logger";
import type {
  DicomViewerState,
  ViewportConfig,
  LayoutType,
  SeriesInfo,
  ToolGroupConfig,
  AnnotationData,
  RequiredAnnotationData,
  WindowLevelConfig,
  WindowLevelPreset,
} from "../types";

// Default window level presets
const defaultWindowLevelPresets: WindowLevelPreset[] = [
  { name: "Abdomen", windowCenter: 60, windowWidth: 400 },
  { name: "Bone", windowCenter: 400, windowWidth: 1000 },
  { name: "Brain", windowCenter: 40, windowWidth: 80 },
  { name: "Chest", windowCenter: -600, windowWidth: 1600 },
  { name: "Lung", windowCenter: -600, windowWidth: 1600 },
  { name: "Mediastinum", windowCenter: 50, windowWidth: 350 },
];

export const useDicomStore = create<DicomViewerState>()(
  subscribeWithSelector((set, get) => ({
    // Initial state
    viewports: new Map(),
    activeViewportId: null,
    layoutType: "1x1" as LayoutType,
    viewportConfigs: new Map(), // Î∑∞Ìè¨Ìä∏Î≥Ñ ÏÑ§Ï†ï Ï†ÄÏû•

    loadedSeries: [],
    currentSeries: null,
    currentImageIndex: 0,

    activeTool: null,
    toolGroups: new Map(),

    annotations: [],
    selectedAnnotationUID: null,


    windowLevelPresets: defaultWindowLevelPresets,
    currentWindowLevel: null,

    isLoading: false,
    error: null,
    sidebarOpen: true,

    // Image manipulation state
    currentRotation: 0,
    isFlippedHorizontal: false,
    isFlippedVertical: false,
    currentDicomDataSet: null,
    isLicenseModalOpen: false,

    // Actions
    setActiveViewport: (viewportId: string) => {
      set({ activeViewportId: viewportId });
    },

    setLayout: (layout: LayoutType) => {
      set({ layoutType: layout });
    },

    // Layout functionality completely removed for single viewport stability

    loadSeries: (series: SeriesInfo) => {
      // ‚¨áÔ∏è ÌïµÏã¨ ÏàòÏ†ï: ÏÉàÎ°úÏö¥ ÏãúÎ¶¨Ï¶àÎ•º Î°úÎìúÌïòÍ∏∞ Ï†ÑÏóê, Í¥ÄÎ†® ÏÉÅÌÉúÎ•º Î™®Îëê Íπ®ÎÅóÌïòÍ≤å Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
      console.log("üîÑ ÏÉàÎ°úÏö¥ ÏãúÎ¶¨Ï¶à Î°úÎìú ÏãúÏûë - ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Ï§ë...");
      set({ 
        isLoading: true, 
        error: null, 
        annotations: [], 
        currentSeries: null,
        selectedAnnotationUID: null,
        currentImageIndex: 0,
        // üî• ÏÉà ÌååÏùº Î°úÎìú Ïãú Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò ÏÉÅÌÉúÎèÑ Î¶¨ÏÖã
        currentRotation: 0,
        isFlippedHorizontal: false,
        isFlippedVertical: false,
        currentDicomDataSet: null
      });

      // Í∑∏ Îã§ÏùåÏóê Ïã§Ï†ú Î°úÎî© Î°úÏßÅÏùÑ Ïã§ÌñâÌï©ÎãàÎã§.
      set((state) => {
        const existingIndex = state.loadedSeries.findIndex(
          (s) => s.seriesInstanceUID === series.seriesInstanceUID
        );

        let updatedSeries;
        if (existingIndex >= 0) {
          updatedSeries = [...state.loadedSeries];
          updatedSeries[existingIndex] = series;
          console.log(`üìÅ Í∏∞Ï°¥ ÏãúÎ¶¨Ï¶à ÏóÖÎç∞Ïù¥Ìä∏: ${series.seriesInstanceUID}`);
        } else {
          updatedSeries = [...state.loadedSeries, series];
          console.log(`üìÅ ÏÉàÎ°úÏö¥ ÏãúÎ¶¨Ï¶à Ï∂îÍ∞Ä: ${series.seriesInstanceUID}`);
        }

        console.log("‚úÖ ÏãúÎ¶¨Ï¶à Î°úÎìú ÏôÑÎ£å - Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú");

        return {
          loadedSeries: updatedSeries,
          currentSeries: series,
          currentImageIndex: 0,
          isLoading: false, // ÏûëÏóÖÏù¥ ÎÅùÎÇòÎ©¥ Î°úÎî© ÏÉÅÌÉúÎ•º falseÎ°ú Î≥ÄÍ≤Ω
          error: null,
        };
      });
    },

    setActiveTool: (toolName: string) => {
      const currentTool = get().activeTool;
      if (currentTool !== toolName) {
        console.log(`Activating tool: ${toolName}`);
        set({ activeTool: toolName });

        // Tool activation will be handled by DicomRenderer through subscription
        // This ensures proper setToolActive and mouse binding integration
      }
    },

    // Tool state management for DicomRenderer integration
    activateToolInViewport: (toolName: string, toolGroupRef: any) => {
      if (!toolGroupRef?.current) {
        console.warn("No tool group available for tool activation");
        return false;
      }

      try {
        console.log(`üîß ÎèÑÍµ¨ ÌôúÏÑ±Ìôî ÏãúÏûë: ${toolName}`);

        // Define tool categories and their activation logic
        const annotationTools = [
          "Length",
          "Angle",
          "CobbAngle",
          "Bidirectional",
          "RectangleROI",
          "EllipticalROI",
          "CircleROI",
          "PlanarFreehandROI",
          "SplineROI",
          "ArrowAnnotate",
          "Probe",
        ];
        const basicTools = [
          "Pan",
          "Zoom",
          "WindowLevel",
          "StackScroll",
          "Magnify",
        ];

        console.log(`üìã ÎèÑÍµ¨ Ïπ¥ÌÖåÍ≥†Î¶¨ ÌôïÏù∏:`, {
          toolName,
          isAnnotationTool: annotationTools.includes(toolName),
          isBasicTool: basicTools.includes(toolName),
        });

        // Reset all tools to passive first
        const allTools = [...annotationTools, ...basicTools];
        allTools.forEach((tool) => {
          try {
            toolGroupRef.current.setToolPassive(tool);
          } catch (e) {
            console.warn(`Failed to set ${tool} passive:`, e);
          }
        });

        // ÏÑ†ÌÉùÎêú ÎèÑÍµ¨Îßå ÎßàÏö∞Ïä§ ÏôºÏ™Ω Î≤ÑÌäºÏóê ÌôúÏÑ±Ìôî
        if (
          annotationTools.includes(toolName) ||
          basicTools.includes(toolName)
        ) {
          toolGroupRef.current.setToolActive(toolName, {
            bindings: [{ mouseButton: 1 }], // ÎßàÏö∞Ïä§ ÏôºÏ™Ω Î≤ÑÌäº
          });
          console.log(`‚úÖ ÎèÑÍµ¨ ÌôúÏÑ±Ìôî: ${toolName} (ÏôºÏ™Ω Î≤ÑÌäºÏóê Î∞îÏù∏Îî©)`);
        } else {
          console.warn(`Unknown tool: ${toolName}`);
          return false;
        }

        // Update store state to reflect successful activation
        set({ activeTool: toolName });

        // üîç ÏµúÏ¢Ö ÌôïÏù∏: ÎèÑÍµ¨ ÌôúÏÑ±Ìôî ÏÉÅÌÉú Í≤ÄÏ¶ù
        console.log(`üéØ ÎèÑÍµ¨ ÌôúÏÑ±Ìôî ÏôÑÎ£å! ÌòÑÏû¨ ÏÉÅÌÉú:`, {
          selectedTool: toolName,
          mouseButton: 1,
          message: `ÎßàÏö∞Ïä§ ÏôºÏ™Ω Î≤ÑÌäºÏúºÎ°ú ${toolName} ÎèÑÍµ¨Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.`,
        });

        return true;
      } catch (error) {
        console.error(`Failed to activate tool ${toolName}:`, error);
        return false;
      }
    },

    addAnnotation: (newAnnotation: RequiredAnnotationData) => {
      // Ensure annotationUID is always present - fix for TS2345
      const annotationWithUID: AnnotationData = {
        ...newAnnotation,
        annotationUID: newAnnotation.annotationUID || uuidv4(),
      };

      set((state) => ({
        annotations: [...state.annotations, annotationWithUID],
        selectedAnnotationUID: annotationWithUID.annotationUID,
      }));

      console.log(`üìù ÏÉà Ï£ºÏÑù Ï∂îÍ∞Ä: ${annotationWithUID.annotationUID}`);
    },

    updateAnnotation: (
      annotationUID: string,
      updates: Partial<AnnotationData>
    ) => {
      // Ensure annotationUID is string type - fix for TS2345
      if (typeof annotationUID !== "string" || !annotationUID) {
        console.error("Invalid annotationUID provided for update");
        return;
      }

      set((state) => ({
        annotations: state.annotations.map((ann) =>
          ann.annotationUID === annotationUID ? { ...ann, ...updates } : ann
        ),
      }));

      console.log(`Updated annotation: ${annotationUID}`);
    },

    updateAnnotationLabel: (annotationUID: string, newLabel: string) => {
      // Ensure annotationUID is string type and newLabel is provided
      if (typeof annotationUID !== "string" || !annotationUID) {
        console.error("Invalid annotationUID provided for label update");
        return;
      }

      if (typeof newLabel !== "string") {
        console.error("Invalid label provided for annotation update");
        return;
      }

      console.log(`üìù Ï£ºÏÑù ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏: ${annotationUID} -> "${newLabel}"`);

      set((state) => ({
        annotations: state.annotations.map((ann) =>
          ann.annotationUID === annotationUID
            ? {
                ...ann,
                data: {
                  ...ann.data,
                  label: newLabel,
                  text: newLabel,
                },
              }
            : ann
        ),
      }));

      console.log(`‚úÖ Ï£ºÏÑù ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: ${annotationUID}`);
    },

    removeAnnotation: (annotationUID: string) => {
      // Ensure annotationUID is string type - fix for TS2345
      if (typeof annotationUID !== "string" || !annotationUID) {
        console.error("Invalid annotationUID provided for removal");
        return;
      }

      console.log(`üóëÔ∏è Ï£ºÏÑù ÏÇ≠Ï†ú ÏãúÏûë: ${annotationUID}`);

      // üî• CornerstoneÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ (ÌôîÎ©¥ÏóêÏÑú Ï¶âÏãú ÏÇ¨ÎùºÏßê)
      try {
        annotation.state.removeAnnotation(annotationUID);
        console.log(`‚úÖ CornerstoneÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ ÏôÑÎ£å: ${annotationUID}`);

        // Îã®Ïùº Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ®
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        if (renderingEngine) {
          try {
            const viewport = renderingEngine.getViewport("dicom-viewport");
            if (viewport) {
              viewport.render();
              console.log("‚úÖ Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å");
            }
          } catch (e) {
            console.warn("Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:", e);
          }
        }
      } catch (error) {
        console.error("Cornerstone Ï£ºÏÑù Ï†úÍ±∞ Ïã§Ìå®:", error);
      }

      // üî• Zustand Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ (Î™©Î°ùÏóêÏÑú Ï¶âÏãú ÏÇ¨ÎùºÏßê)
      set((state) => ({
        annotations: state.annotations.filter(
          (ann) => ann.annotationUID !== annotationUID
        ),
        selectedAnnotationUID:
          state.selectedAnnotationUID === annotationUID
            ? null
            : state.selectedAnnotationUID,
      }));

      console.log(`‚úÖ Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞ ÏôÑÎ£å: ${annotationUID}`);
    },

    setWindowLevel: (config: WindowLevelConfig) => {
      set({ currentWindowLevel: config });
      console.log(
        `Window level set: C${config.windowCenter} W${config.windowWidth}`
      );
    },

    setLoading: (loading: boolean) => {
      set({ isLoading: loading });
    },

    setError: (error: string | null) => {
      set({ error, isLoading: false });
      if (error) {
        console.error("DICOM Viewer Error:", error);
      }
    },

    toggleSidebar: () => {
      set((state) => ({ sidebarOpen: !state.sidebarOpen }));
    },



    // Î™®Îì† Ï£ºÏÑù ÏßÄÏö∞Í∏∞ (CornerstoneÏóêÏÑúÎèÑ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†ú)
    clearAllAnnotations: () => {
      const currentAnnotations = get().annotations;
      console.log(`üóëÔ∏è Î™®Îì† Ï£ºÏÑù ÏßÄÏö∞Í∏∞ ÏãúÏûë: ${currentAnnotations.length}Í∞ú`);

      // üî• CornerstoneÏóêÏÑú Î™®Îì† Ï£ºÏÑù Ï†úÍ±∞
      try {
        // Í∞Å Ï£ºÏÑùÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú CornerstoneÏóêÏÑú Ï†úÍ±∞
        currentAnnotations.forEach((annotationData) => {
          try {
            annotation.state.removeAnnotation(annotationData.annotationUID);
            console.log(`‚úÖ CornerstoneÏóêÏÑú Ï£ºÏÑù Ï†úÍ±∞: ${annotationData.annotationUID}`);
          } catch (error) {
            console.error(`‚ùå Ï£ºÏÑù Ï†úÍ±∞ Ïã§Ìå®: ${annotationData.annotationUID}`, error);
          }
        });

        // Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ®
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        if (renderingEngine) {
          try {
            const viewport = renderingEngine.getViewport("dicom-viewport");
            if (viewport) {
              viewport.render();
              console.log("‚úÖ Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å");
            }
          } catch (e) {
            console.warn("Î∑∞Ìè¨Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:", e);
          }
        }
      } catch (error) {
        console.error("Cornerstone Ï£ºÏÑù Ï†úÍ±∞ Ïã§Ìå®:", error);
      }

      // üî• Zustand Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Î™®Îì† Ï£ºÏÑù Ï†úÍ±∞
      set({ annotations: [], selectedAnnotationUID: null });
      console.log("‚úÖ Î™®Îì† Ï£ºÏÑù ÏßÄÏö∞Í∏∞ ÏôÑÎ£å");
    },

    // Ïù¥ÎØ∏ÏßÄ ÌöåÏ†Ñ Í∏∞Îä•
    rotateImage: (direction: 'left' | 'right') => {
      const { currentRotation } = get();
      const rotationChange = direction === 'right' ? 90 : -90;
      const newRotation = (currentRotation + rotationChange) % 360;
      
      set({ currentRotation: newRotation });
      
      try {
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        if (renderingEngine) {
          const viewport = renderingEngine.getViewport("dicom-viewport");
          if (viewport) {
            viewport.setRotation(newRotation);
            renderingEngine.render();
            console.log(`üîÑ Ïù¥ÎØ∏ÏßÄ ÌöåÏ†Ñ: ${direction} (${newRotation}ÎèÑ)`);
          }
        }
      } catch (error) {
        console.error("Ïù¥ÎØ∏ÏßÄ ÌöåÏ†Ñ Ïã§Ìå®:", error);
      }
    },

    // Ïù¥ÎØ∏ÏßÄ Îí§ÏßëÍ∏∞ Í∏∞Îä• (CornerstoneJS 3D Ïò¨Î∞îÎ•∏ API ÏÇ¨Ïö©)
    flipImage: (direction: 'horizontal' | 'vertical') => {
      const state = get();
      const isHorizontal = direction === 'horizontal';
      const newFlipState = {
        isFlippedHorizontal: isHorizontal ? !state.isFlippedHorizontal : state.isFlippedHorizontal,
        isFlippedVertical: !isHorizontal ? !state.isFlippedVertical : state.isFlippedVertical
      };
      
      set(newFlipState);
      
      try {
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        if (renderingEngine) {
          const viewport = renderingEngine.getViewport("dicom-viewport");
          if (viewport) {
            // üî• ÌïµÏã¨ ÏàòÏ†ï: CornerstoneJS 3DÏùò Ïò¨Î∞îÎ•∏ flip API ÏÇ¨Ïö©
            // FlipDirection Í∞ùÏ≤¥Î•º Îß§Í∞úÎ≥ÄÏàòÎ°ú ÏÇ¨Ïö©
            if (isHorizontal) {
              viewport.flip({ flipHorizontal: true });
              console.log("üîÑ ÏàòÌèâ Îí§ÏßëÍ∏∞ Ïã§Ìñâ");
            } else {
              viewport.flip({ flipVertical: true });
              console.log("üîÑ ÏàòÏßÅ Îí§ÏßëÍ∏∞ Ïã§Ìñâ");
            }
            
            // üî• ÌïµÏã¨: Î†åÎçîÎßÅ ÏóîÏßÑÏóêÏÑú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï¶âÏãú Î∞òÏòÅ
            renderingEngine.render();
            
            console.log(`‚úÖ Ïù¥ÎØ∏ÏßÄ Îí§ÏßëÍ∏∞ ÏÑ±Í≥µ: ${direction} (H:${newFlipState.isFlippedHorizontal}, V:${newFlipState.isFlippedVertical})`);
          } else {
            console.error("‚ùå Î∑∞Ìè¨Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§");
          }
        } else {
          console.error("‚ùå Î†åÎçîÎßÅ ÏóîÏßÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§");
        }
      } catch (error) {
        console.error("‚ùå Ïù¥ÎØ∏ÏßÄ Îí§ÏßëÍ∏∞ Ïã§Ìå®:", error);
        // Ïò§Î•ò Î∞úÏÉù Ïãú ÏÉÅÌÉú Î°§Î∞±
        set({
          isFlippedHorizontal: state.isFlippedHorizontal,
          isFlippedVertical: state.isFlippedVertical
        });
      }
    },

    // Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò Î¶¨ÏÖã (CornerstoneJS 3D Ïò¨Î∞îÎ•∏ API ÏÇ¨Ïö©)
    resetImageTransform: () => {
      const oldState = get();
      
      set({
        currentRotation: 0,
        isFlippedHorizontal: false,
        isFlippedVertical: false
      });
      
      try {
        const renderingEngine = (window as any).cornerstoneRenderingEngine;
        if (renderingEngine) {
          const viewport = renderingEngine.getViewport("dicom-viewport");
          if (viewport) {
            // üî• ÏàòÏ†ï: ÌöåÏ†Ñ Î¶¨ÏÖã
            viewport.setRotation(0);
            
            // üî• ÏàòÏ†ï: Îí§ÏßëÍ∏∞ ÏÉÅÌÉú Î¶¨ÏÖã - ÌòÑÏû¨ ÏÉÅÌÉúÏóê Îî∞Îùº Îã§Ïãú Îí§ÏßëÏñ¥ÏÑú ÏõêÏÉÅÎ≥µÍµ¨
            if (oldState.isFlippedHorizontal) {
              viewport.flip({ flipHorizontal: true });
              console.log("üîÑ ÏàòÌèâ Îí§ÏßëÍ∏∞ Î¶¨ÏÖã");
            }
            if (oldState.isFlippedVertical) {
              viewport.flip({ flipVertical: true });
              console.log("üîÑ ÏàòÏßÅ Îí§ÏßëÍ∏∞ Î¶¨ÏÖã");
            }
            
            // üî• ÌïµÏã¨: Î†åÎçîÎßÅ ÏóîÏßÑÏóêÏÑú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï¶âÏãú Î∞òÏòÅ
            renderingEngine.render();
            
            console.log("‚úÖ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò Î¶¨ÏÖã ÏôÑÎ£å");
          }
        }
      } catch (error) {
        console.error("‚ùå Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò Î¶¨ÏÖã Ïã§Ìå®:", error);
        // Ïò§Î•ò Î∞úÏÉù Ïãú ÏÉÅÌÉú Î°§Î∞±
        set({
          currentRotation: oldState.currentRotation,
          isFlippedHorizontal: oldState.isFlippedHorizontal,
          isFlippedVertical: oldState.isFlippedVertical
        });
      }
    },

    // DICOM Îç∞Ïù¥ÌÑ∞ÏÖã Ï†ÄÏû•
    setDicomDataSet: (dataSet: any) => {
      set({ currentDicomDataSet: dataSet });
      console.log("üíæ DICOM Îç∞Ïù¥ÌÑ∞ÏÖã Ï†ÄÏû• ÏôÑÎ£å");
    },

    // ÎùºÏù¥ÏÑ†Ïä§ Î™®Îã¨ ÌÜ†Í∏Ä
    toggleLicenseModal: () => {
      set((state) => ({ isLicenseModalOpen: !state.isLicenseModalOpen }));
    },

  }))
);

// Selectors for better performance
export const selectActiveViewport = (state: DicomViewerState) =>
  state.activeViewportId;
export const selectCurrentSeries = (state: DicomViewerState) =>
  state.currentSeries;
export const selectAnnotations = (state: DicomViewerState) => state.annotations;
export const selectActiveTool = (state: DicomViewerState) => state.activeTool;
export const selectWindowLevel = (state: DicomViewerState) =>
  state.currentWindowLevel;
export const selectIsLoading = (state: DicomViewerState) => state.isLoading;
export const selectError = (state: DicomViewerState) => state.error;
