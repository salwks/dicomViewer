{"version":3,"file":"jpeg-CB7_OXod.js","sources":["../../node_modules/@cornerstonejs/dicom-image-loader/dist/esm/codecs/jpeg.js"],"sourcesContent":["var ColorSpace = { Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4 };\nvar dctZigZag = new Int32Array([\n    0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29,\n    22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54,\n    47, 55, 62, 63,\n]);\nvar dctCos1 = 4017;\nvar dctSin1 = 799;\nvar dctCos3 = 3406;\nvar dctSin3 = 2276;\nvar dctCos6 = 1567;\nvar dctSin6 = 3784;\nvar dctSqrt2 = 5793;\nvar dctSqrt1d2 = 2896;\nfunction buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n        length--;\n    code.push({ children: [], index: 0 });\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n        for (j = 0; j < codeLengths[i]; j++) {\n            p = code.pop();\n            p.children[p.index] = values[k];\n            while (p.index > 0) {\n                p = code.pop();\n            }\n            p.index++;\n            code.push(p);\n            while (code.length <= i) {\n                code.push((q = { children: [], index: 0 }));\n                p.children[p.index] = q.children;\n                p = q;\n            }\n            k++;\n        }\n        if (i + 1 < length) {\n            code.push((q = { children: [], index: 0 }));\n            p.children[p.index] = q.children;\n            p = q;\n        }\n    }\n    return code[0].children;\n}\nfunction getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n}\nfunction decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n    function readBit() {\n        if (bitsCount > 0) {\n            bitsCount--;\n            return (bitsData >> bitsCount) & 1;\n        }\n        bitsData = data[offset++];\n        if (bitsData == 0xff) {\n            var nextByte = data[offset++];\n            if (nextByte) {\n                throw 'unexpected marker: ' + ((bitsData << 8) | nextByte).toString(16);\n            }\n        }\n        bitsCount = 7;\n        return bitsData >>> 7;\n    }\n    function decodeHuffman(tree) {\n        var node = tree;\n        var bit;\n        while ((bit = readBit()) !== null) {\n            node = node[bit];\n            if (typeof node === 'number')\n                return node;\n            if (typeof node !== 'object')\n                throw 'invalid huffman sequence';\n        }\n        return null;\n    }\n    function receive(length) {\n        var n = 0;\n        while (length > 0) {\n            var bit = readBit();\n            if (bit === null)\n                return;\n            n = (n << 1) | bit;\n            length--;\n        }\n        return n;\n    }\n    function receiveAndExtend(length) {\n        var n = receive(length);\n        if (n >= 1 << (length - 1))\n            return n;\n        return n + (-1 << length) + 1;\n    }\n    function decodeBaseline(component, offset) {\n        var t = decodeHuffman(component.huffmanTableDC);\n        var diff = t === 0 ? 0 : receiveAndExtend(t);\n        component.blockData[offset] = component.pred += diff;\n        var k = 1;\n        while (k < 64) {\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15, r = rs >> 4;\n            if (s === 0) {\n                if (r < 15)\n                    break;\n                k += 16;\n                continue;\n            }\n            k += r;\n            var z = dctZigZag[k];\n            component.blockData[offset + z] = receiveAndExtend(s);\n            k++;\n        }\n    }\n    function decodeDCFirst(component, offset) {\n        var t = decodeHuffman(component.huffmanTableDC);\n        var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n        component.blockData[offset] = component.pred += diff;\n    }\n    function decodeDCSuccessive(component, offset) {\n        component.blockData[offset] |= readBit() << successive;\n    }\n    var eobrun = 0;\n    function decodeACFirst(component, offset) {\n        if (eobrun > 0) {\n            eobrun--;\n            return;\n        }\n        var k = spectralStart, e = spectralEnd;\n        while (k <= e) {\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15, r = rs >> 4;\n            if (s === 0) {\n                if (r < 15) {\n                    eobrun = receive(r) + (1 << r) - 1;\n                    break;\n                }\n                k += 16;\n                continue;\n            }\n            k += r;\n            var z = dctZigZag[k];\n            component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n            k++;\n        }\n    }\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, offset) {\n        var k = spectralStart, e = spectralEnd, r = 0;\n        while (k <= e) {\n            var z = dctZigZag[k];\n            switch (successiveACState) {\n                case 0:\n                    var rs = decodeHuffman(component.huffmanTableAC);\n                    var s = rs & 15;\n                    r = rs >> 4;\n                    if (s === 0) {\n                        if (r < 15) {\n                            eobrun = receive(r) + (1 << r);\n                            successiveACState = 4;\n                        }\n                        else {\n                            r = 16;\n                            successiveACState = 1;\n                        }\n                    }\n                    else {\n                        if (s !== 1)\n                            throw 'invalid ACn encoding';\n                        successiveACNextValue = receiveAndExtend(s);\n                        successiveACState = r ? 2 : 3;\n                    }\n                    continue;\n                case 1:\n                case 2:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    else {\n                        r--;\n                        if (r === 0)\n                            successiveACState = successiveACState == 2 ? 3 : 0;\n                    }\n                    break;\n                case 3:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    else {\n                        component.blockData[offset + z] =\n                            successiveACNextValue << successive;\n                        successiveACState = 0;\n                    }\n                    break;\n                case 4:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    break;\n            }\n            k++;\n        }\n        if (successiveACState === 4) {\n            eobrun--;\n            if (eobrun === 0)\n                successiveACState = 0;\n        }\n    }\n    function decodeMcu(component, decode, mcu, row, col) {\n        var mcuRow = (mcu / mcusPerLine) | 0;\n        var mcuCol = mcu % mcusPerLine;\n        var blockRow = mcuRow * component.v + row;\n        var blockCol = mcuCol * component.h + col;\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        decode(component, offset);\n    }\n    function decodeBlock(component, decode, mcu) {\n        var blockRow = (mcu / component.blocksPerLine) | 0;\n        var blockCol = mcu % component.blocksPerLine;\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        decode(component, offset);\n    }\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n        if (spectralStart === 0)\n            decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n        else\n            decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    }\n    else {\n        decodeFn = decodeBaseline;\n    }\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n        mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    }\n    else {\n        mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) {\n        resetInterval = mcuExpected;\n    }\n    var h, v;\n    while (mcu < mcuExpected) {\n        for (i = 0; i < componentsLength; i++) {\n            components[i].pred = 0;\n        }\n        eobrun = 0;\n        if (componentsLength == 1) {\n            component = components[0];\n            for (n = 0; n < resetInterval; n++) {\n                decodeBlock(component, decodeFn, mcu);\n                mcu++;\n            }\n        }\n        else {\n            for (n = 0; n < resetInterval; n++) {\n                for (i = 0; i < componentsLength; i++) {\n                    component = components[i];\n                    h = component.h;\n                    v = component.v;\n                    for (j = 0; j < v; j++) {\n                        for (k = 0; k < h; k++) {\n                            decodeMcu(component, decodeFn, mcu, j, k);\n                        }\n                    }\n                }\n                mcu++;\n            }\n        }\n        bitsCount = 0;\n        marker = (data[offset] << 8) | data[offset + 1];\n        if (marker <= 0xff00) {\n            throw 'marker was not found';\n        }\n        if (marker >= 0xffd0 && marker <= 0xffd7) {\n            offset += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return offset - startOffset;\n}\nfunction quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable;\n    var v0, v1, v2, v3, v4, v5, v6, v7, t;\n    var i;\n    for (i = 0; i < 64; i++) {\n        p[i] = component.blockData[blockBufferOffset + i] * qt[i];\n    }\n    for (i = 0; i < 8; ++i) {\n        var row = 8 * i;\n        if (p[1 + row] === 0 &&\n            p[2 + row] === 0 &&\n            p[3 + row] === 0 &&\n            p[4 + row] === 0 &&\n            p[5 + row] === 0 &&\n            p[6 + row] === 0 &&\n            p[7 + row] === 0) {\n            t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n            p[0 + row] = t;\n            p[1 + row] = t;\n            p[2 + row] = t;\n            p[3 + row] = t;\n            p[4 + row] = t;\n            p[5 + row] = t;\n            p[6 + row] = t;\n            p[7 + row] = t;\n            continue;\n        }\n        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n        v2 = p[2 + row];\n        v3 = p[6 + row];\n        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n        v5 = p[3 + row] << 4;\n        v6 = p[5 + row] << 4;\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n        p[0 + row] = v0 + v7;\n        p[7 + row] = v0 - v7;\n        p[1 + row] = v1 + v6;\n        p[6 + row] = v1 - v6;\n        p[2 + row] = v2 + v5;\n        p[5 + row] = v2 - v5;\n        p[3 + row] = v3 + v4;\n        p[4 + row] = v3 - v4;\n    }\n    for (i = 0; i < 8; ++i) {\n        var col = i;\n        if (p[1 * 8 + col] === 0 &&\n            p[2 * 8 + col] === 0 &&\n            p[3 * 8 + col] === 0 &&\n            p[4 * 8 + col] === 0 &&\n            p[5 * 8 + col] === 0 &&\n            p[6 * 8 + col] === 0 &&\n            p[7 * 8 + col] === 0) {\n            t = (dctSqrt2 * p[i + 0] + 8192) >> 14;\n            p[0 * 8 + col] = t;\n            p[1 * 8 + col] = t;\n            p[2 * 8 + col] = t;\n            p[3 * 8 + col] = t;\n            p[4 * 8 + col] = t;\n            p[5 * 8 + col] = t;\n            p[6 * 8 + col] = t;\n            p[7 * 8 + col] = t;\n            continue;\n        }\n        v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;\n        v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;\n        v2 = p[2 * 8 + col];\n        v3 = p[6 * 8 + col];\n        v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;\n        v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;\n        v5 = p[3 * 8 + col];\n        v6 = p[5 * 8 + col];\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n        p[0 * 8 + col] = v0 + v7;\n        p[7 * 8 + col] = v0 - v7;\n        p[1 * 8 + col] = v1 + v6;\n        p[6 * 8 + col] = v1 - v6;\n        p[2 * 8 + col] = v2 + v5;\n        p[5 * 8 + col] = v2 - v5;\n        p[3 * 8 + col] = v3 + v4;\n        p[4 * 8 + col] = v3 - v4;\n    }\n    for (i = 0; i < 64; ++i) {\n        var index = blockBufferOffset + i;\n        var q = p[i];\n        q =\n            q <= -2056 / component.bitConversion\n                ? 0\n                : q >= 2024 / component.bitConversion\n                    ? 255 / component.bitConversion\n                    : (q + 2056 / component.bitConversion) >> 4;\n        component.blockData[index] = q;\n    }\n}\nfunction buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    var computationBuffer = new Int32Array(64);\n    var i, j, ll = 0;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n        for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n            var offset = getBlockBufferOffset(component, blockRow, blockCol);\n            quantizeAndInverse(component, offset, computationBuffer);\n        }\n    }\n    return component.blockData;\n}\nfunction clampToUint8(a) {\n    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;\n}\nclass JpegImage {\n    constructor() { }\n    load(path) {\n        var handleData = function (data) {\n            this.parse(data);\n            if (this.onload)\n                this.onload();\n        }.bind(this);\n        if (path.indexOf('data:') > -1) {\n            var offset = path.indexOf('base64,') + 7;\n            var data = atob(path.substring(offset));\n            var arr = new Uint8Array(data.length);\n            for (var i = data.length - 1; i >= 0; i--) {\n                arr[i] = data.charCodeAt(i);\n            }\n            handleData(data);\n        }\n        else {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', path, true);\n            xhr.responseType = 'arraybuffer';\n            xhr.onload = function () {\n                var data = new Uint8Array(xhr.response);\n                handleData(data);\n            }.bind(this);\n            xhr.send(null);\n        }\n    }\n    parse(data) {\n        function readUint16() {\n            var value = (data[offset] << 8) | data[offset + 1];\n            offset += 2;\n            return value;\n        }\n        function readDataBlock() {\n            var length = readUint16();\n            var array = data.subarray(offset, offset + length - 2);\n            offset += array.length;\n            return array;\n        }\n        function prepareComponents(frame) {\n            var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n            var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n            for (var i = 0; i < frame.components.length; i++) {\n                component = frame.components[i];\n                var blocksPerLine = Math.ceil((Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH);\n                var blocksPerColumn = Math.ceil((Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV);\n                var blocksPerLineForMcu = mcusPerLine * component.h;\n                var blocksPerColumnForMcu = mcusPerColumn * component.v;\n                var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n                component.blockData = new Int16Array(blocksBufferSize);\n                component.blocksPerLine = blocksPerLine;\n                component.blocksPerColumn = blocksPerColumn;\n            }\n            frame.mcusPerLine = mcusPerLine;\n            frame.mcusPerColumn = mcusPerColumn;\n        }\n        var offset = 0, length = data.length;\n        var jfif = null;\n        var adobe = null;\n        var pixels = null;\n        var frame, resetInterval;\n        var quantizationTables = [];\n        var huffmanTablesAC = [], huffmanTablesDC = [];\n        var fileMarker = readUint16();\n        if (fileMarker != 0xffd8) {\n            throw 'SOI not found';\n        }\n        fileMarker = readUint16();\n        while (fileMarker != 0xffd9) {\n            var i, j, l;\n            switch (fileMarker) {\n                case 0xffe0:\n                case 0xffe1:\n                case 0xffe2:\n                case 0xffe3:\n                case 0xffe4:\n                case 0xffe5:\n                case 0xffe6:\n                case 0xffe7:\n                case 0xffe8:\n                case 0xffe9:\n                case 0xffea:\n                case 0xffeb:\n                case 0xffec:\n                case 0xffed:\n                case 0xffee:\n                case 0xffef:\n                case 0xfffe:\n                    var appData = readDataBlock();\n                    if (fileMarker === 0xffe0) {\n                        if (appData[0] === 0x4a &&\n                            appData[1] === 0x46 &&\n                            appData[2] === 0x49 &&\n                            appData[3] === 0x46 &&\n                            appData[4] === 0) {\n                            jfif = {\n                                version: { major: appData[5], minor: appData[6] },\n                                densityUnits: appData[7],\n                                xDensity: (appData[8] << 8) | appData[9],\n                                yDensity: (appData[10] << 8) | appData[11],\n                                thumbWidth: appData[12],\n                                thumbHeight: appData[13],\n                                thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13]),\n                            };\n                        }\n                    }\n                    if (fileMarker === 0xffee) {\n                        if (appData[0] === 0x41 &&\n                            appData[1] === 0x64 &&\n                            appData[2] === 0x6f &&\n                            appData[3] === 0x62 &&\n                            appData[4] === 0x65 &&\n                            appData[5] === 0) {\n                            adobe = {\n                                version: appData[6],\n                                flags0: (appData[7] << 8) | appData[8],\n                                flags1: (appData[9] << 8) | appData[10],\n                                transformCode: appData[11],\n                            };\n                        }\n                    }\n                    break;\n                case 0xffdb:\n                    var quantizationTablesLength = readUint16();\n                    var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                    while (offset < quantizationTablesEnd) {\n                        var quantizationTableSpec = data[offset++];\n                        var tableData = new Int32Array(64);\n                        if (quantizationTableSpec >> 4 === 0) {\n                            for (j = 0; j < 64; j++) {\n                                var z = dctZigZag[j];\n                                tableData[z] = data[offset++];\n                            }\n                        }\n                        else if (quantizationTableSpec >> 4 === 1) {\n                            for (j = 0; j < 64; j++) {\n                                var zz = dctZigZag[j];\n                                tableData[zz] = readUint16();\n                            }\n                        }\n                        else\n                            throw 'DQT: invalid table spec';\n                        quantizationTables[quantizationTableSpec & 15] = tableData;\n                    }\n                    break;\n                case 0xffc0:\n                case 0xffc1:\n                case 0xffc2:\n                    if (frame) {\n                        throw 'Only single frame JPEGs supported';\n                    }\n                    readUint16();\n                    frame = {};\n                    frame.extended = fileMarker === 0xffc1;\n                    frame.progressive = fileMarker === 0xffc2;\n                    frame.precision = data[offset++];\n                    frame.scanLines = readUint16();\n                    frame.samplesPerLine = readUint16();\n                    frame.components = [];\n                    frame.componentIds = {};\n                    var componentsCount = data[offset++], componentId;\n                    var maxH = 0, maxV = 0;\n                    for (i = 0; i < componentsCount; i++) {\n                        componentId = data[offset];\n                        var h = data[offset + 1] >> 4;\n                        var v = data[offset + 1] & 15;\n                        if (maxH < h)\n                            maxH = h;\n                        if (maxV < v)\n                            maxV = v;\n                        var qId = data[offset + 2];\n                        l = frame.components.push({\n                            h: h,\n                            v: v,\n                            quantizationTable: quantizationTables[qId],\n                            quantizationTableId: qId,\n                            bitConversion: 255 / ((1 << frame.precision) - 1),\n                        });\n                        frame.componentIds[componentId] = l - 1;\n                        offset += 3;\n                    }\n                    frame.maxH = maxH;\n                    frame.maxV = maxV;\n                    prepareComponents(frame);\n                    break;\n                case 0xffc4:\n                    var huffmanLength = readUint16();\n                    for (i = 2; i < huffmanLength;) {\n                        var huffmanTableSpec = data[offset++];\n                        var codeLengths = new Uint8Array(16);\n                        var codeLengthSum = 0;\n                        for (j = 0; j < 16; j++, offset++)\n                            codeLengthSum += codeLengths[j] = data[offset];\n                        var huffmanValues = new Uint8Array(codeLengthSum);\n                        for (j = 0; j < codeLengthSum; j++, offset++)\n                            huffmanValues[j] = data[offset];\n                        i += 17 + codeLengthSum;\n                        (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n                    }\n                    break;\n                case 0xffdd:\n                    readUint16();\n                    resetInterval = readUint16();\n                    break;\n                case 0xffda:\n                    var scanLength = readUint16();\n                    var selectorsCount = data[offset++];\n                    var components = [], component;\n                    for (i = 0; i < selectorsCount; i++) {\n                        var componentIndex = frame.componentIds[data[offset++]];\n                        component = frame.components[componentIndex];\n                        var tableSpec = data[offset++];\n                        component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                        component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                        components.push(component);\n                    }\n                    var spectralStart = data[offset++];\n                    var spectralEnd = data[offset++];\n                    var successiveApproximation = data[offset++];\n                    var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);\n                    offset += processed;\n                    break;\n                case 0xffff:\n                    if (data[offset] !== 0xff) {\n                        offset--;\n                    }\n                    break;\n                default:\n                    if (data[offset - 3] == 0xff &&\n                        data[offset - 2] >= 0xc0 &&\n                        data[offset - 2] <= 0xfe) {\n                        offset -= 3;\n                        break;\n                    }\n                    throw 'unknown JPEG marker ' + fileMarker.toString(16);\n            }\n            fileMarker = readUint16();\n        }\n        this.width = frame.samplesPerLine;\n        this.height = frame.scanLines;\n        this.jfif = jfif;\n        this.adobe = adobe;\n        this.components = [];\n        switch (frame.components.length) {\n            case 1:\n                this.colorspace = ColorSpace.Grayscale;\n                break;\n            case 3:\n                if (this.adobe)\n                    this.colorspace = ColorSpace.AdobeRGB;\n                else\n                    this.colorspace = ColorSpace.RGB;\n                break;\n            case 4:\n                this.colorspace = ColorSpace.CYMK;\n                break;\n            default:\n                this.colorspace = ColorSpace.Unknown;\n        }\n        for (var i = 0; i < frame.components.length; i++) {\n            var component = frame.components[i];\n            if (!component.quantizationTable &&\n                component.quantizationTableId !== null)\n                component.quantizationTable =\n                    quantizationTables[component.quantizationTableId];\n            this.components.push({\n                output: buildComponentData(frame, component),\n                scaleX: component.h / frame.maxH,\n                scaleY: component.v / frame.maxV,\n                blocksPerLine: component.blocksPerLine,\n                blocksPerColumn: component.blocksPerColumn,\n                bitConversion: component.bitConversion,\n            });\n        }\n    }\n    getData16(width, height) {\n        if (this.components.length !== 1)\n            throw 'Unsupported color mode';\n        var scaleX = this.width / width, scaleY = this.height / height;\n        var component, componentScaleX, componentScaleY;\n        var x, y, i;\n        var offset = 0;\n        var numComponents = this.components.length;\n        var dataLength = width * height * numComponents;\n        var data = new Uint16Array(dataLength);\n        var componentLine;\n        var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) *\n            this.components[0].blocksPerColumn *\n            8);\n        for (i = 0; i < numComponents; i++) {\n            component = this.components[i];\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var samplesPerLine = blocksPerLine << 3;\n            var j, k, ll = 0;\n            var lineOffset = 0;\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                var scanLine = blockRow << 3;\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                    var offset = 0, sample = blockCol << 3;\n                    for (j = 0; j < 8; j++) {\n                        var lineOffset = (scanLine + j) * samplesPerLine;\n                        for (k = 0; k < 8; k++) {\n                            lineData[lineOffset + sample + k] =\n                                component.output[bufferOffset + offset++];\n                        }\n                    }\n                }\n            }\n            componentScaleX = component.scaleX * scaleX;\n            componentScaleY = component.scaleY * scaleY;\n            offset = i;\n            var cx, cy;\n            var index;\n            for (y = 0; y < height; y++) {\n                for (x = 0; x < width; x++) {\n                    cy = 0 | (y * componentScaleY);\n                    cx = 0 | (x * componentScaleX);\n                    index = cy * samplesPerLine + cx;\n                    data[offset] = lineData[index];\n                    offset += numComponents;\n                }\n            }\n        }\n        return data;\n    }\n    getData(width, height) {\n        var scaleX = this.width / width, scaleY = this.height / height;\n        var component, componentScaleX, componentScaleY;\n        var x, y, i;\n        var offset = 0;\n        var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n        var colorTransform;\n        var numComponents = this.components.length;\n        var dataLength = width * height * numComponents;\n        var data = new Uint8Array(dataLength);\n        var componentLine;\n        var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *\n            this.components[0].blocksPerColumn *\n            8);\n        for (i = 0; i < numComponents; i++) {\n            component = this.components[i];\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var samplesPerLine = blocksPerLine << 3;\n            var j, k, ll = 0;\n            var lineOffset = 0;\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                var scanLine = blockRow << 3;\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                    var offset = 0, sample = blockCol << 3;\n                    for (j = 0; j < 8; j++) {\n                        var lineOffset = (scanLine + j) * samplesPerLine;\n                        for (k = 0; k < 8; k++) {\n                            lineData[lineOffset + sample + k] =\n                                component.output[bufferOffset + offset++] *\n                                    component.bitConversion;\n                        }\n                    }\n                }\n            }\n            componentScaleX = component.scaleX * scaleX;\n            componentScaleY = component.scaleY * scaleY;\n            offset = i;\n            var cx, cy;\n            var index;\n            for (y = 0; y < height; y++) {\n                for (x = 0; x < width; x++) {\n                    cy = 0 | (y * componentScaleY);\n                    cx = 0 | (x * componentScaleX);\n                    index = cy * samplesPerLine + cx;\n                    data[offset] = lineData[index];\n                    offset += numComponents;\n                }\n            }\n        }\n        switch (numComponents) {\n            case 1:\n            case 2:\n                break;\n            case 3:\n                colorTransform = true;\n                if (this.adobe && this.adobe.transformCode)\n                    colorTransform = true;\n                else if (typeof this.colorTransform !== 'undefined')\n                    colorTransform = !!this.colorTransform;\n                if (colorTransform) {\n                    for (i = 0; i < dataLength; i += numComponents) {\n                        Y = data[i];\n                        Cb = data[i + 1];\n                        Cr = data[i + 2];\n                        R = clampToUint8(Y - 179.456 + 1.402 * Cr);\n                        G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\n                        B = clampToUint8(Y - 226.816 + 1.772 * Cb);\n                        data[i] = R;\n                        data[i + 1] = G;\n                        data[i + 2] = B;\n                    }\n                }\n                break;\n            case 4:\n                if (!this.adobe)\n                    throw 'Unsupported color mode (4 components)';\n                colorTransform = false;\n                if (this.adobe && this.adobe.transformCode)\n                    colorTransform = true;\n                else if (typeof this.colorTransform !== 'undefined')\n                    colorTransform = !!this.colorTransform;\n                if (colorTransform) {\n                    for (i = 0; i < dataLength; i += numComponents) {\n                        Y = data[i];\n                        Cb = data[i + 1];\n                        Cr = data[i + 2];\n                        C = clampToUint8(434.456 - Y - 1.402 * Cr);\n                        M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\n                        Y = clampToUint8(481.816 - Y - 1.772 * Cb);\n                        data[i] = C;\n                        data[i + 1] = M;\n                        data[i + 2] = Y;\n                    }\n                }\n                break;\n            default:\n                throw 'Unsupported color mode';\n        }\n        return data;\n    }\n}\nexport default JpegImage;\n"],"names":["ColorSpace","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","buildHuffmanTable","codeLengths","values","k","code","i","j","length","p","q","getBlockBufferOffset","component","row","col","decodeScan","data","offset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","mcusPerLine","progressive","startOffset","bitsData","bitsCount","readBit","nextByte","decodeHuffman","tree","node","bit","receive","n","receiveAndExtend","decodeBaseline","t","diff","rs","s","r","z","decodeDCFirst","decodeDCSuccessive","eobrun","decodeACFirst","e","successiveACState","successiveACNextValue","decodeACSuccessive","decodeMcu","decode","mcu","mcuRow","mcuCol","blockRow","blockCol","decodeBlock","componentsLength","decodeFn","marker","mcuExpected","h","v","quantizeAndInverse","blockBufferOffset","qt","v0","v1","v2","v3","v4","v5","v6","v7","index","buildComponentData","blocksPerLine","blocksPerColumn","computationBuffer","clampToUint8","a","JpegImage","path","handleData","arr","xhr","readUint16","value","readDataBlock","array","prepareComponents","mcusPerColumn","blocksPerLineForMcu","blocksPerColumnForMcu","blocksBufferSize","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","fileMarker","l","appData","quantizationTablesLength","quantizationTablesEnd","quantizationTableSpec","tableData","zz","componentsCount","componentId","maxH","maxV","qId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","width","height","scaleX","scaleY","componentScaleX","componentScaleY","x","y","numComponents","dataLength","lineData","samplesPerLine","lineOffset","scanLine","bufferOffset","sample","cx","cy","Y","Cb","Cr","C","M","R","G","B","colorTransform"],"mappings":"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","x_google_ignoreList":[0]}