/*! For license information please see 43.bundle.js.LICENSE.txt */
(self.webpackChunkcornerstone3d_viewer=self.webpackChunkcornerstone3d_viewer||[]).push([[43],{74:(t,e,r)=>{var n,o=(n=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,o,i=void 0!==(t=t||{})?t:{};i.ready=new Promise(function(t,r){e=t,o=r});var a,s,u,c=Object.assign({},i),l=[],f="./this.program",p="object"==typeof window,d="function"==typeof importScripts,h="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,y="";if(h){var v=r(9696),g=r(2544);y=d?g.dirname(y)+"/":"//",a=(t,e)=>(t=Y(t)?new URL(t):g.normalize(t),v.readFileSync(t,e?void 0:"utf8")),u=t=>{var e=a(t,!0);return e.buffer||(e=new Uint8Array(e)),e},s=(t,e,r)=>{t=Y(t)?new URL(t):g.normalize(t),v.readFile(t,function(t,n){t?r(t):e(n.buffer)})},process.argv.length>1&&(f=process.argv[1].replace(/\\/g,"/")),l=process.argv.slice(2),process.on("uncaughtException",function(t){if(!(t instanceof Z))throw t}),process.on("unhandledRejection",function(t){throw t}),i.inspect=function(){return"[Emscripten Module object]"}}else(p||d)&&(d?y=self.location.href:"undefined"!=typeof document&&document.currentScript&&(y=document.currentScript.src),n&&(y=n),y=0!==y.indexOf("blob:")?y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):"",a=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},d&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),s=(t,e,r)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):r()},n.onerror=r,n.send(null)});var m,w,b=i.print||console.log.bind(console),_=i.printErr||console.warn.bind(console);Object.assign(i,c),c=null,i.arguments&&(l=i.arguments),i.thisProgram&&(f=i.thisProgram),i.quit&&i.quit,i.wasmBinary&&(m=i.wasmBinary),i.noExitRuntime,"object"!=typeof WebAssembly&&J("no native wasm support detected");var T,P,C,$,A,S,x,E,k,R=!1,O="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function F(t,e,r){for(var n=e+r,o=e;t[o]&&!(o>=n);)++o;if(o-e>16&&t.buffer&&O)return O.decode(t.subarray(e,o));for(var i="";e<o;){var a=t[e++];if(128&a){var s=63&t[e++];if(192!=(224&a)){var u=63&t[e++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&t[e++])<65536)i+=String.fromCharCode(a);else{var c=a-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}function D(t,e){return t?F(C,t,e):""}function j(t,e,r){return function(t,e,r,n){if(!(n>0))return 0;for(var o=r,i=r+n-1,a=0;a<t.length;++a){var s=t.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&t.charCodeAt(++a)),s<=127){if(r>=i)break;e[r++]=s}else if(s<=2047){if(r+1>=i)break;e[r++]=192|s>>6,e[r++]=128|63&s}else if(s<=65535){if(r+2>=i)break;e[r++]=224|s>>12,e[r++]=128|s>>6&63,e[r++]=128|63&s}else{if(r+3>=i)break;e[r++]=240|s>>18,e[r++]=128|s>>12&63,e[r++]=128|s>>6&63,e[r++]=128|63&s}}return e[r]=0,r-o}(t,C,e,r)}function W(t){T=t,i.HEAP8=P=new Int8Array(t),i.HEAP16=$=new Int16Array(t),i.HEAP32=S=new Int32Array(t),i.HEAPU8=C=new Uint8Array(t),i.HEAPU16=A=new Uint16Array(t),i.HEAPU32=x=new Uint32Array(t),i.HEAPF32=E=new Float32Array(t),i.HEAPF64=k=new Float64Array(t)}i.INITIAL_MEMORY;var I,U=[],L=[],H=[];function M(t){U.unshift(t)}function B(t){H.unshift(t)}var z,V,N=0,G=null,q=null;function J(t){i.onAbort&&i.onAbort(t),_(t="Aborted("+t+")"),R=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw o(e),e}function X(t){return t.startsWith("data:application/octet-stream;base64,")}function Y(t){return t.startsWith("file://")}function K(t){try{if(t==z&&m)return new Uint8Array(m);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}catch(t){J(t)}}function Z(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function Q(t){for(;t.length>0;)t.shift()(i)}function tt(t){this.excPtr=t,this.ptr=t-24,this.set_type=function(t){x[this.ptr+4>>2]=t},this.get_type=function(){return x[this.ptr+4>>2]},this.set_destructor=function(t){x[this.ptr+8>>2]=t},this.get_destructor=function(){return x[this.ptr+8>>2]},this.set_refcount=function(t){S[this.ptr>>2]=t},this.set_caught=function(t){t=t?1:0,P[this.ptr+12|0]=t},this.get_caught=function(){return 0!=P[this.ptr+12|0]},this.set_rethrown=function(t){t=t?1:0,P[this.ptr+13|0]=t},this.get_rethrown=function(){return 0!=P[this.ptr+13|0]},this.init=function(t,e){this.set_adjusted_ptr(0),this.set_type(t),this.set_destructor(e),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var t=S[this.ptr>>2];S[this.ptr>>2]=t+1},this.release_ref=function(){var t=S[this.ptr>>2];return S[this.ptr>>2]=t-1,1===t},this.set_adjusted_ptr=function(t){x[this.ptr+16>>2]=t},this.get_adjusted_ptr=function(){return x[this.ptr+16>>2]},this.get_exception_ptr=function(){if(Ce(this.get_type()))return x[this.excPtr>>2];var t=this.get_adjusted_ptr();return 0!==t?t:this.excPtr}}X(z="openjpegwasm_decode.wasm")||(V=z,z=i.locateFile?i.locateFile(V,y):y+V);var et={};function rt(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function nt(t){return this.fromWireType(S[t>>2])}var ot={},it={},at={};function st(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=48&&e<=57?"_"+t:t}function ut(t,e){return t=st(t),new Function("body","return function "+t+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(e)}function ct(t,e){var r=ut(e,function(t){this.name=e,this.message=t;var r=new Error(t).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))});return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},r}var lt=void 0;function ft(t){throw new lt(t)}function pt(t,e,r){function n(e){var n=r(e);n.length!==t.length&&ft("Mismatched type converter count");for(var o=0;o<t.length;++o)mt(t[o],n[o])}t.forEach(function(t){at[t]=e});var o=new Array(e.length),i=[],a=0;e.forEach((t,e)=>{it.hasOwnProperty(t)?o[e]=it[t]:(i.push(t),ot.hasOwnProperty(t)||(ot[t]=[]),ot[t].push(()=>{o[e]=it[t],++a===i.length&&n(o)}))}),0===i.length&&n(o)}function dt(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+t)}}var ht=void 0;function yt(t){for(var e="",r=t;C[r];)e+=ht[C[r++]];return e}var vt=void 0;function gt(t){throw new vt(t)}function mt(t,e,r={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=e.name;if(t||gt('type "'+n+'" must have a positive integer typeid pointer'),it.hasOwnProperty(t)){if(r.ignoreDuplicateRegistrations)return;gt("Cannot register type '"+n+"' twice")}if(it[t]=e,delete at[t],ot.hasOwnProperty(t)){var o=ot[t];delete ot[t],o.forEach(t=>t())}}function wt(t){gt(t.$$.ptrType.registeredClass.name+" instance already deleted")}var bt=!1;function _t(t){}function Tt(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function Pt(t,e,r){if(e===r)return t;if(void 0===r.baseClass)return null;var n=Pt(t,e,r.baseClass);return null===n?null:r.downcast(n)}var Ct={};var $t=[];function At(){for(;$t.length;){var t=$t.pop();t.$$.deleteScheduled=!1,t.delete()}}var St=void 0;var xt={};function Et(t,e){return e.ptrType&&e.ptr||ft("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&ft("Both smartPtrType and smartPtr must be specified"),e.count={value:1},kt(Object.create(t,{$$:{value:e}}))}function kt(t){return"undefined"==typeof FinalizationRegistry?(kt=t=>t,t):(bt=new FinalizationRegistry(t=>{Tt(t.$$)}),kt=t=>{var e=t.$$;if(e.smartPtr){var r={$$:e};bt.register(t,r,t)}return t},_t=t=>bt.unregister(t),kt(t))}function Rt(){}function Ot(t,e,r){if(void 0===t[e].overloadTable){var n=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||gt("Function '"+r+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+t[e].overloadTable+")!"),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[n.argCount]=n}}function Ft(t,e,r,n,o,i,a,s){this.name=t,this.constructor=e,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function Dt(t,e,r){for(;e!==r;)e.upcast||gt("Expected null or instance of "+r.name+", got an instance of "+e.name),t=e.upcast(t),e=e.baseClass;return t}function jt(t,e){if(null===e)return this.isReference&&gt("null is not a valid "+this.name),0;e.$$||gt('Cannot pass "'+Kt(e)+'" as a '+this.name),e.$$.ptr||gt("Cannot pass deleted object as a pointer of type "+this.name);var r=e.$$.ptrType.registeredClass;return Dt(e.$$.ptr,r,this.registeredClass)}function Wt(t,e){var r;if(null===e)return this.isReference&&gt("null is not a valid "+this.name),this.isSmartPointer?(r=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,r),r):0;e.$$||gt('Cannot pass "'+Kt(e)+'" as a '+this.name),e.$$.ptr||gt("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&e.$$.ptrType.isConst&&gt("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);var n=e.$$.ptrType.registeredClass;if(r=Dt(e.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&gt("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?r=e.$$.smartPtr:gt("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:r=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)r=e.$$.smartPtr;else{var o=e.clone();r=this.rawShare(r,Yt.toHandle(function(){o.delete()})),null!==t&&t.push(this.rawDestructor,r)}break;default:gt("Unsupporting sharing policy")}return r}function It(t,e){if(null===e)return this.isReference&&gt("null is not a valid "+this.name),0;e.$$||gt('Cannot pass "'+Kt(e)+'" as a '+this.name),e.$$.ptr||gt("Cannot pass deleted object as a pointer of type "+this.name),e.$$.ptrType.isConst&&gt("Cannot convert argument of type "+e.$$.ptrType.name+" to parameter type "+this.name);var r=e.$$.ptrType.registeredClass;return Dt(e.$$.ptr,r,this.registeredClass)}function Ut(t,e,r,n,o,i,a,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=r,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==e.baseClass?this.toWireType=Wt:n?(this.toWireType=jt,this.destructorFunction=null):(this.toWireType=It,this.destructorFunction=null)}var Lt=[];function Ht(t){var e=Lt[t];return e||(t>=Lt.length&&(Lt.length=t+1),Lt[t]=e=I.get(t)),e}function Mt(t,e){var r,n,o,a=(t=yt(t)).includes("j")?(r=t,n=e,o=[],function(){return o.length=0,Object.assign(o,arguments),function(t,e,r){return t.includes("j")?function(t,e,r){var n=i["dynCall_"+t];return r&&r.length?n.apply(null,[e].concat(r)):n.call(null,e)}(t,e,r):Ht(e).apply(null,r)}(r,n,o)}):Ht(e);return"function"!=typeof a&&gt("unknown function pointer with signature "+t+": "+e),a}var Bt=void 0;function zt(t){var e=be(t),r=yt(e);return we(e),r}function Vt(t,e){var r=[],n={};throw e.forEach(function t(e){n[e]||it[e]||(at[e]?at[e].forEach(t):(r.push(e),n[e]=!0))}),new Bt(t+": "+r.map(zt).join([", "]))}function Nt(t,e){for(var r=[],n=0;n<t;n++)r.push(x[e+4*n>>2]);return r}function Gt(t,e,r,n,o){var i=e.length;i<2&&gt("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==e[1]&&null!==r,s=!1,u=1;u<e.length;++u)if(null!==e[u]&&void 0===e[u].destructorFunction){s=!0;break}var c="void"!==e[0].name,l="",f="";for(u=0;u<i-2;++u)l+=(0!==u?", ":"")+"arg"+u,f+=(0!==u?", ":"")+"arg"+u+"Wired";var p="return function "+st(t)+"("+l+") {\nif (arguments.length !== "+(i-2)+") {\nthrowBindingError('function "+t+" called with ' + arguments.length + ' arguments, expected "+(i-2)+" args!');\n}\n";s&&(p+="var destructors = [];\n");var d=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],y=[gt,n,o,rt,e[0],e[1]];for(a&&(p+="var thisWired = classParam.toWireType("+d+", this);\n"),u=0;u<i-2;++u)p+="var arg"+u+"Wired = argType"+u+".toWireType("+d+", arg"+u+"); // "+e[u+2].name+"\n",h.push("argType"+u),y.push(e[u+2]);if(a&&(f="thisWired"+(f.length>0?", ":"")+f),p+=(c?"var rv = ":"")+"invoker(fn"+(f.length>0?", ":"")+f+");\n",s)p+="runDestructors(destructors);\n";else for(u=a?1:2;u<e.length;++u){var v=1===u?"thisWired":"arg"+(u-2)+"Wired";null!==e[u].destructorFunction&&(p+=v+"_dtor("+v+"); // "+e[u].name+"\n",h.push(v+"_dtor"),y.push(e[u].destructorFunction))}return c&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",h.push(p),function(t,e){if(!(t instanceof Function))throw new TypeError("new_ called with constructor type "+typeof t+" which is not a function");var r=ut(t.name||"unknownFunctionName",function(){});r.prototype=t.prototype;var n=new r,o=t.apply(n,e);return o instanceof Object?o:n}(Function,h).apply(null,y)}var qt=[],Jt=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Xt(t){t>4&&0===--Jt[t].refcount&&(Jt[t]=void 0,qt.push(t))}var Yt={toValue:t=>(t||gt("Cannot use deleted val. handle = "+t),Jt[t].value),toHandle:t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var e=qt.length?qt.pop():Jt.length;return Jt[e]={refcount:1,value:t},e}}};function Kt(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function Zt(t,e){switch(e){case 2:return function(t){return this.fromWireType(E[t>>2])};case 3:return function(t){return this.fromWireType(k[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function Qt(t,e,r){switch(e){case 0:return r?function(t){return P[t]}:function(t){return C[t]};case 1:return r?function(t){return $[t>>1]}:function(t){return A[t>>1]};case 2:return r?function(t){return S[t>>2]}:function(t){return x[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var te="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function ee(t,e){for(var r=t,n=r>>1,o=n+e/2;!(n>=o)&&A[n];)++n;if((r=n<<1)-t>32&&te)return te.decode(C.subarray(t,r));for(var i="",a=0;!(a>=e/2);++a){var s=$[t+2*a>>1];if(0==s)break;i+=String.fromCharCode(s)}return i}function re(t,e,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=e,o=(r-=2)<2*t.length?r/2:t.length,i=0;i<o;++i){var a=t.charCodeAt(i);$[e>>1]=a,e+=2}return $[e>>1]=0,e-n}function ne(t){return 2*t.length}function oe(t,e){for(var r=0,n="";!(r>=e/4);){var o=S[t+4*r>>2];if(0==o)break;if(++r,o>=65536){var i=o-65536;n+=String.fromCharCode(55296|i>>10,56320|1023&i)}else n+=String.fromCharCode(o)}return n}function ie(t,e,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=e,o=n+r-4,i=0;i<t.length;++i){var a=t.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++i)),S[e>>2]=a,(e+=4)+4>o)break}return S[e>>2]=0,e-n}function ae(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n>=55296&&n<=57343&&++r,e+=4}return e}var se={};function ue(){return"object"==typeof globalThis?globalThis:Function("return this")()}function ce(t,e){var r=it[t];return void 0===r&&gt(e+" has unknown type "+zt(t)),r}var le={};function fe(t){try{return w.grow(t-T.byteLength+65535>>>16),W(w.buffer),1}catch(t){}}var pe={};function de(){if(!de.strings){var t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:f||"./this.program"};for(var e in pe)void 0===pe[e]?delete t[e]:t[e]=pe[e];var r=[];for(var e in t)r.push(e+"="+t[e]);de.strings=r}return de.strings}var he=[null,[],[]];function ye(t,e){var r=he[t];0===e||10===e?((1===t?b:_)(F(r,0)),r.length=0):r.push(e)}lt=i.InternalError=ct(Error,"InternalError"),function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);ht=t}(),vt=i.BindingError=ct(Error,"BindingError"),Rt.prototype.isAliasOf=function(t){if(!(this instanceof Rt))return!1;if(!(t instanceof Rt))return!1;for(var e=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=t.$$.ptrType.registeredClass,o=t.$$.ptr;e.baseClass;)r=e.upcast(r),e=e.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return e===n&&r===o},Rt.prototype.clone=function(){if(this.$$.ptr||wt(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=kt(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},Rt.prototype.delete=function(){this.$$.ptr||wt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&gt("Object already scheduled for deletion"),_t(this),Tt(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},Rt.prototype.isDeleted=function(){return!this.$$.ptr},Rt.prototype.deleteLater=function(){return this.$$.ptr||wt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&gt("Object already scheduled for deletion"),$t.push(this),1===$t.length&&St&&St(At),this.$$.deleteScheduled=!0,this},i.getInheritedInstanceCount=function(){return Object.keys(xt).length},i.getLiveInheritedInstances=function(){var t=[];for(var e in xt)xt.hasOwnProperty(e)&&t.push(xt[e]);return t},i.flushPendingDeletes=At,i.setDelayFunction=function(t){St=t,$t.length&&St&&St(At)},Ut.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},Ut.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},Ut.prototype.argPackAdvance=8,Ut.prototype.readValueFromPointer=nt,Ut.prototype.deleteObject=function(t){null!==t&&t.delete()},Ut.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var r=function(t,e){return e=function(t,e){for(void 0===e&&gt("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}(t,e),xt[e]}(this.registeredClass,e);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=e,r.$$.smartPtr=t,r.clone();var n=r.clone();return this.destructor(t),n}function o(){return this.isSmartPointer?Et(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):Et(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var i,a=this.registeredClass.getActualType(e),s=Ct[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var u=Pt(e,this.registeredClass,i.registeredClass);return null===u?o.call(this):this.isSmartPointer?Et(i.registeredClass.instancePrototype,{ptrType:i,ptr:u,smartPtrType:this,smartPtr:t}):Et(i.registeredClass.instancePrototype,{ptrType:i,ptr:u})},Bt=i.UnboundTypeError=ct(Error,"UnboundTypeError"),i.count_emval_handles=function(){for(var t=0,e=5;e<Jt.length;++e)void 0!==Jt[e]&&++t;return t},i.get_first_emval=function(){for(var t=5;t<Jt.length;++t)if(void 0!==Jt[t])return Jt[t];return null};var ve,ge={D:function(t,e,r){throw new tt(t).init(e,r),t},e:function(t){var e=et[t];delete et[t];var r=e.rawConstructor,n=e.rawDestructor,o=e.fields;pt([t],o.map(t=>t.getterReturnType).concat(o.map(t=>t.setterArgumentType)),t=>{var i={};return o.forEach((e,r)=>{var n=e.fieldName,a=t[r],s=e.getter,u=e.getterContext,c=t[r+o.length],l=e.setter,f=e.setterContext;i[n]={read:t=>a.fromWireType(s(u,t)),write:(t,e)=>{var r=[];l(f,t,c.toWireType(r,e)),rt(r)}}}),[{name:e.name,fromWireType:function(t){var e={};for(var r in i)e[r]=i[r].read(t);return n(t),e},toWireType:function(t,e){for(var o in i)if(!(o in e))throw new TypeError('Missing field:  "'+o+'"');var a=r();for(o in i)i[o].write(a,e[o]);return null!==t&&t.push(n,a),a},argPackAdvance:8,readValueFromPointer:nt,destructorFunction:n}]})},t:function(t,e,r,n,o){},B:function(t,e,r,n,o){var i=dt(r);mt(t,{name:e=yt(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:o},argPackAdvance:8,readValueFromPointer:function(t){var n;if(1===r)n=P;else if(2===r)n=$;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+e);n=S}return this.fromWireType(n[t>>i])},destructorFunction:null})},r:function(t,e,r,n,o,a,s,u,c,l,f,p,d){f=yt(f),a=Mt(o,a),u&&(u=Mt(s,u)),l&&(l=Mt(c,l)),d=Mt(p,d);var h=st(f);!function(t,e,r){i.hasOwnProperty(t)?(gt("Cannot register public name '"+t+"' twice"),Ot(i,t,t),i.hasOwnProperty(r)&&gt("Cannot register multiple overloads of a function with the same number of arguments ("+r+")!"),i[t].overloadTable[void 0]=e):i[t]=e}(h,function(){Vt("Cannot construct "+f+" due to unbound types",[n])}),pt([t,e,r],n?[n]:[],function(e){var r,o;e=e[0],o=n?(r=e.registeredClass).instancePrototype:Rt.prototype;var s=ut(h,function(){if(Object.getPrototypeOf(this)!==c)throw new vt("Use 'new' to construct "+f);if(void 0===p.constructor_body)throw new vt(f+" has no accessible constructor");var t=p.constructor_body[arguments.length];if(void 0===t)throw new vt("Tried to invoke ctor of "+f+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(p.constructor_body).toString()+") parameters instead!");return t.apply(this,arguments)}),c=Object.create(o,{constructor:{value:s}});s.prototype=c;var p=new Ft(f,s,c,d,r,a,u,l),y=new Ut(f,p,!0,!1,!1),v=new Ut(f+"*",p,!1,!1,!1),g=new Ut(f+" const*",p,!1,!0,!1);return Ct[t]={pointerType:v,constPointerType:g},function(t,e,r){i.hasOwnProperty(t)||ft("Replacing nonexistant public symbol"),i[t].overloadTable,i[t]=e,i[t].argCount=r}(h,s),[y,v,g]})},q:function(t,e,r,n,o,i){e>0||J(undefined);var a=Nt(e,r);o=Mt(n,o),pt([],[t],function(t){var r="constructor "+(t=t[0]).name;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new vt("Cannot register multiple constructors with identical number of parameters ("+(e-1)+") for class '"+t.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return t.registeredClass.constructor_body[e-1]=()=>{Vt("Cannot construct "+t.name+" due to unbound types",a)},pt([],a,function(n){return n.splice(1,0,null),t.registeredClass.constructor_body[e-1]=Gt(r,n,null,o,i),[]}),[]})},b:function(t,e,r,n,o,i,a,s){var u=Nt(r,n);e=yt(e),i=Mt(o,i),pt([],[t],function(t){var n=(t=t[0]).name+"."+e;function o(){Vt("Cannot call "+n+" due to unbound types",u)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var c=t.registeredClass.instancePrototype,l=c[e];return void 0===l||void 0===l.overloadTable&&l.className!==t.name&&l.argCount===r-2?(o.argCount=r-2,o.className=t.name,c[e]=o):(Ot(c,e,n),c[e].overloadTable[r-2]=o),pt([],u,function(o){var s=Gt(n,o,t,i,a);return void 0===c[e].overloadTable?(s.argCount=r-2,c[e]=s):c[e].overloadTable[r-2]=s,[]}),[]})},A:function(t,e){mt(t,{name:e=yt(e),fromWireType:function(t){var e=Yt.toValue(t);return Xt(t),e},toWireType:function(t,e){return Yt.toHandle(e)},argPackAdvance:8,readValueFromPointer:nt,destructorFunction:null})},l:function(t,e,r){var n=dt(r);mt(t,{name:e=yt(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:Zt(e,n),destructorFunction:null})},d:function(t,e,r,n,o){e=yt(e),-1===o&&(o=4294967295);var i=dt(r),a=t=>t;if(0===n){var s=32-8*r;a=t=>t<<s>>>s}var u=e.includes("unsigned");mt(t,{name:e,fromWireType:a,toWireType:u?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:Qt(e,i,0!==n),destructorFunction:null})},a:function(t,e,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function o(t){var e=x,r=e[t>>=2],o=e[t+1];return new n(T,o,r)}mt(t,{name:r=yt(r),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},k:function(t,e){var r="std::string"===(e=yt(e));mt(t,{name:e,fromWireType:function(t){var e,n=x[t>>2],o=t+4;if(r)for(var i=o,a=0;a<=n;++a){var s=o+a;if(a==n||0==C[s]){var u=D(i,s-i);void 0===e?e=u:(e+=String.fromCharCode(0),e+=u),i=s+1}}else{var c=new Array(n);for(a=0;a<n;++a)c[a]=String.fromCharCode(C[o+a]);e=c.join("")}return we(t),e},toWireType:function(t,e){var n;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var o="string"==typeof e;o||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||gt("Cannot pass non-string to std::string"),n=r&&o?function(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n<=127?e++:n<=2047?e+=2:n>=55296&&n<=57343?(e+=4,++r):e+=3}return e}(e):e.length;var i=me(4+n+1),a=i+4;if(x[i>>2]=n,r&&o)j(e,a,n+1);else if(o)for(var s=0;s<n;++s){var u=e.charCodeAt(s);u>255&&(we(a),gt("String has UTF-16 code units that do not fit in 8 bits")),C[a+s]=u}else for(s=0;s<n;++s)C[a+s]=e[s];return null!==t&&t.push(we,i),i},argPackAdvance:8,readValueFromPointer:nt,destructorFunction:function(t){we(t)}})},f:function(t,e,r){var n,o,i,a,s;r=yt(r),2===e?(n=ee,o=re,a=ne,i=()=>A,s=1):4===e&&(n=oe,o=ie,a=ae,i=()=>x,s=2),mt(t,{name:r,fromWireType:function(t){for(var r,o=x[t>>2],a=i(),u=t+4,c=0;c<=o;++c){var l=t+4+c*e;if(c==o||0==a[l>>s]){var f=n(u,l-u);void 0===r?r=f:(r+=String.fromCharCode(0),r+=f),u=l+e}}return we(t),r},toWireType:function(t,n){"string"!=typeof n&&gt("Cannot pass non-string to C++ string type "+r);var i=a(n),u=me(4+i+e);return x[u>>2]=i>>s,o(n,u+4,i+e),null!==t&&t.push(we,u),u},argPackAdvance:8,readValueFromPointer:nt,destructorFunction:function(t){we(t)}})},g:function(t,e,r,n,o,i){et[t]={name:yt(e),rawConstructor:Mt(r,n),rawDestructor:Mt(o,i),fields:[]}},c:function(t,e,r,n,o,i,a,s,u,c){et[t].fields.push({fieldName:yt(e),getterReturnType:r,getter:Mt(n,o),getterContext:i,setterArgumentType:a,setter:Mt(s,u),setterContext:c})},C:function(t,e){mt(t,{isVoid:!0,name:e=yt(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(t,e){}})},h:Xt,o:function(t){return 0===t?Yt.toHandle(ue()):(t=void 0===(r=se[e=t])?yt(e):r,Yt.toHandle(ue()[t]));var e,r},m:function(t){t>4&&(Jt[t].refcount+=1)},n:function(t,e,r,n){t=Yt.toValue(t);var o=le[e];return o||(o=function(t){for(var e="",r=0;r<t;++r)e+=(0!==r?", ":"")+"arg"+r;var n="return function emval_allocator_"+t+"(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";for(r=0;r<t;++r)n+="var argType"+r+" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter "+r+"');\nvar arg"+r+" = argType"+r+".readValueFromPointer(args);\nargs += argType"+r+"['argPackAdvance'];\nargTypes += 4;\n";return n+="var obj = new constructor("+e+");\nreturn valueToHandle(obj);\n}\n",new Function("requireRegisteredType","Module","valueToHandle","getMemory",n)(ce,i,Yt.toHandle,()=>x)}(e),le[e]=o),o(t,r,n)},p:function(t,e){var r=(t=ce(t,"_emval_take_value")).readValueFromPointer(e);return Yt.toHandle(r)},i:function(){J("")},v:function(){return 2147483648},z:function(t,e,r){C.copyWithin(t,e,e+r)},u:function(t){var e=C.length,r=2147483648;if((t>>>=0)>r)return!1;let n=(t,e)=>t+(e-t%e)%e;for(var o=1;o<=4;o*=2){var i=e*(1+.2/o);if(i=Math.min(i,t+100663296),fe(Math.min(r,n(Math.max(t,i),65536))))return!0}return!1},w:function(t,e){var r=0;return de().forEach(function(n,o){var i=e+r;x[t+4*o>>2]=i,function(t,e){for(var r=0;r<t.length;++r)P[0|e++]=t.charCodeAt(r);P[0|e]=0}(n,i),r+=n.length+1}),0},x:function(t,e){var r=de();x[t>>2]=r.length;var n=0;return r.forEach(function(t){n+=t.length+1}),x[e>>2]=n,0},y:function(t){return 52},s:function(t,e,r,n,o){return 70},j:function(t,e,r,n){for(var o=0,i=0;i<r;i++){var a=x[e>>2],s=x[e+4>>2];e+=8;for(var u=0;u<s;u++)ye(t,C[a+u]);o+=s}return x[n>>2]=o,0}},me=(function(){var t={a:ge};function e(t,e){var r,n=t.exports;i.asm=n,W((w=i.asm.E).buffer),I=i.asm.G,r=i.asm.F,L.unshift(r),function(){if(N--,i.monitorRunDependencies&&i.monitorRunDependencies(N),0==N&&(null!==G&&(clearInterval(G),G=null),q)){var t=q;q=null,t()}}()}function r(t){e(t.instance)}function n(e){return function(){if(!m&&(p||d)){if("function"==typeof fetch&&!Y(z))return fetch(z,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+z+"'";return t.arrayBuffer()}).catch(function(){return K(z)});if(s)return new Promise(function(t,e){s(z,function(e){t(new Uint8Array(e))},e)})}return Promise.resolve().then(function(){return K(z)})}().then(function(e){return WebAssembly.instantiate(e,t)}).then(function(t){return t}).then(e,function(t){_("failed to asynchronously prepare wasm: "+t),J(t)})}if(N++,i.monitorRunDependencies&&i.monitorRunDependencies(N),i.instantiateWasm)try{return i.instantiateWasm(t,e)}catch(t){_("Module.instantiateWasm callback failed with error: "+t),o(t)}(m||"function"!=typeof WebAssembly.instantiateStreaming||X(z)||Y(z)||h||"function"!=typeof fetch?n(r):fetch(z,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,t).then(r,function(t){return _("wasm streaming compile failed: "+t),_("falling back to ArrayBuffer instantiation"),n(r)})})).catch(o)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.F).apply(null,arguments)},i._malloc=function(){return(me=i._malloc=i.asm.H).apply(null,arguments)}),we=i._free=function(){return(we=i._free=i.asm.I).apply(null,arguments)},be=i.___getTypeName=function(){return(be=i.___getTypeName=i.asm.J).apply(null,arguments)},_e=(i.__embind_initialize_bindings=function(){return(i.__embind_initialize_bindings=i.asm.K).apply(null,arguments)},i.stackSave=function(){return(_e=i.stackSave=i.asm.L).apply(null,arguments)}),Te=i.stackRestore=function(){return(Te=i.stackRestore=i.asm.M).apply(null,arguments)},Pe=i.stackAlloc=function(){return(Pe=i.stackAlloc=i.asm.N).apply(null,arguments)},Ce=i.___cxa_is_pointer_type=function(){return(Ce=i.___cxa_is_pointer_type=i.asm.O).apply(null,arguments)};function $e(t){function r(){ve||(ve=!0,i.calledRun=!0,R||(Q(L),e(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)B(i.postRun.shift());Q(H)}()))}t=t||l,N>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)M(i.preRun.shift());Q(U)}(),N>0||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),r()},1)):r()))}if(i.dynCall_iji=function(){return(i.dynCall_iji=i.asm.P).apply(null,arguments)},i.dynCall_jji=function(){return(i.dynCall_jji=i.asm.Q).apply(null,arguments)},i.dynCall_iiji=function(){return(i.dynCall_iiji=i.asm.R).apply(null,arguments)},i.dynCall_jiji=function(){return(i.dynCall_jiji=i.asm.S).apply(null,arguments)},i.ccall=function(t,e,r,n,o){var a={string:t=>{var e=0;if(null!=t&&0!==t){var r=1+(t.length<<2);j(t,e=Pe(r),r)}return e},array:t=>{var e=Pe(t.length);return function(t,e){P.set(t,e)}(t,e),e}},s=function(t){return i["_"+t]}(t),u=[],c=0;if(n)for(var l=0;l<n.length;l++){var f=a[r[l]];f?(0===c&&(c=_e()),u[l]=f(n[l])):u[l]=n[l]}var p=s.apply(null,u);return function(t){return 0!==c&&Te(c),function(t){return"string"===e?D(t):"boolean"===e?Boolean(t):t}(t)}(p)},q=function t(){ve||$e(),ve||(q=t)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return $e(),t.ready});t.exports=o},605:(t,e,r)=>{"use strict";t.exports=r.p+"c22b37c3488e1d6c3aa4.wasm"},678:(t,e,r)=>{"use strict";function n(t,e){let r;return Number.isInteger(t)&&Number.isInteger(e)&&(t>=0?e<=255?r=Uint8Array:e<=65535?r=Uint16Array:e<=4294967295&&(r=Uint32Array):t>=-128&&e<=127?r=Int8Array:t>=-32768&&e<=32767&&(r=Int16Array)),r||Float32Array}function o(t,e,r){return n(t,e)===r}r.d(e,{A:()=>n,r:()=>o})},1427:(t,e,r)=>{var n,o=(n=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,o,i=void 0!==(t=t||{})?t:{};i.ready=new Promise(function(t,r){e=t,o=r});var a,s,u,c=Object.assign({},i),l=[],f="./this.program",p=(t,e)=>{throw e},d="object"==typeof window,h="function"==typeof importScripts,y="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,v="";if(y){var g=r(4150),m=r(1966);v=h?m.dirname(v)+"/":"//",a=(t,e)=>(t=Q(t)?new URL(t):m.normalize(t),g.readFileSync(t,e?void 0:"utf8")),u=t=>{var e=a(t,!0);return e.buffer||(e=new Uint8Array(e)),e},s=(t,e,r)=>{t=Q(t)?new URL(t):m.normalize(t),g.readFile(t,function(t,n){t?r(t):e(n.buffer)})},process.argv.length>1&&(f=process.argv[1].replace(/\\/g,"/")),l=process.argv.slice(2),process.on("uncaughtException",function(t){if(!(t instanceof et))throw t}),process.on("unhandledRejection",function(t){throw t}),p=(t,e)=>{if(z())throw process.exitCode=t,e;var r;(r=e)instanceof et||_("exiting due to exception: "+r),process.exit(t)},i.inspect=function(){return"[Emscripten Module object]"}}else(d||h)&&(h?v=self.location.href:"undefined"!=typeof document&&document.currentScript&&(v=document.currentScript.src),n&&(v=n),v=0!==v.indexOf("blob:")?v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):"",a=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},h&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),s=(t,e,r)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):r()},n.onerror=r,n.send(null)});var w,b=i.print||console.log.bind(console),_=i.printErr||console.warn.bind(console);Object.assign(i,c),c=null,i.arguments&&(l=i.arguments),i.thisProgram&&(f=i.thisProgram),i.quit&&(p=i.quit),i.wasmBinary&&(w=i.wasmBinary);var T,P=i.noExitRuntime||!0;"object"!=typeof WebAssembly&&K("no native wasm support detected");var C,$,A,S,x,E,k,R,O,F=!1,D="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function j(t,e,r){for(var n=e+r,o=e;t[o]&&!(o>=n);)++o;if(o-e>16&&t.buffer&&D)return D.decode(t.subarray(e,o));for(var i="";e<o;){var a=t[e++];if(128&a){var s=63&t[e++];if(192!=(224&a)){var u=63&t[e++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&t[e++])<65536)i+=String.fromCharCode(a);else{var c=a-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}function W(t,e){return t?j(A,t,e):""}function I(t,e,r){return function(t,e,r,n){if(!(n>0))return 0;for(var o=r,i=r+n-1,a=0;a<t.length;++a){var s=t.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&t.charCodeAt(++a)),s<=127){if(r>=i)break;e[r++]=s}else if(s<=2047){if(r+1>=i)break;e[r++]=192|s>>6,e[r++]=128|63&s}else if(s<=65535){if(r+2>=i)break;e[r++]=224|s>>12,e[r++]=128|s>>6&63,e[r++]=128|63&s}else{if(r+3>=i)break;e[r++]=240|s>>18,e[r++]=128|s>>12&63,e[r++]=128|s>>6&63,e[r++]=128|63&s}}return e[r]=0,r-o}(t,A,e,r)}function U(t){C=t,i.HEAP8=$=new Int8Array(t),i.HEAP16=S=new Int16Array(t),i.HEAP32=E=new Int32Array(t),i.HEAPU8=A=new Uint8Array(t),i.HEAPU16=x=new Uint16Array(t),i.HEAPU32=k=new Uint32Array(t),i.HEAPF32=R=new Float32Array(t),i.HEAPF64=O=new Float64Array(t)}i.INITIAL_MEMORY;var L,H=[],M=[],B=[];function z(){return P}function V(t){H.unshift(t)}function N(t){B.unshift(t)}var G,q,J=0,X=null,Y=null;function K(t){i.onAbort&&i.onAbort(t),_(t="Aborted("+t+")"),F=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw o(e),e}function Z(t){return t.startsWith("data:application/octet-stream;base64,")}function Q(t){return t.startsWith("file://")}function tt(t){try{if(t==G&&w)return new Uint8Array(w);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}catch(t){K(t)}}function et(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function rt(t){for(;t.length>0;)t.shift()(i)}function nt(t){this.excPtr=t,this.ptr=t-24,this.set_type=function(t){k[this.ptr+4>>2]=t},this.get_type=function(){return k[this.ptr+4>>2]},this.set_destructor=function(t){k[this.ptr+8>>2]=t},this.get_destructor=function(){return k[this.ptr+8>>2]},this.set_refcount=function(t){E[this.ptr>>2]=t},this.set_caught=function(t){t=t?1:0,$[this.ptr+12|0]=t},this.get_caught=function(){return 0!=$[this.ptr+12|0]},this.set_rethrown=function(t){t=t?1:0,$[this.ptr+13|0]=t},this.get_rethrown=function(){return 0!=$[this.ptr+13|0]},this.init=function(t,e){this.set_adjusted_ptr(0),this.set_type(t),this.set_destructor(e),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var t=E[this.ptr>>2];E[this.ptr>>2]=t+1},this.release_ref=function(){var t=E[this.ptr>>2];return E[this.ptr>>2]=t-1,1===t},this.set_adjusted_ptr=function(t){k[this.ptr+16>>2]=t},this.get_adjusted_ptr=function(){return k[this.ptr+16>>2]},this.get_exception_ptr=function(){if(xe(this.get_type()))return k[this.excPtr>>2];var t=this.get_adjusted_ptr();return 0!==t?t:this.excPtr}}Z(G="libjpegturbowasm_decode.wasm")||(q=G,G=i.locateFile?i.locateFile(q,v):v+q);var ot={};function it(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function at(t){return this.fromWireType(E[t>>2])}var st={},ut={},ct={};function lt(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=48&&e<=57?"_"+t:t}function ft(t,e){return t=lt(t),new Function("body","return function "+t+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(e)}function pt(t,e){var r=ft(e,function(t){this.name=e,this.message=t;var r=new Error(t).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))});return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},r}var dt=void 0;function ht(t){throw new dt(t)}function yt(t,e,r){function n(e){var n=r(e);n.length!==t.length&&ht("Mismatched type converter count");for(var o=0;o<t.length;++o)_t(t[o],n[o])}t.forEach(function(t){ct[t]=e});var o=new Array(e.length),i=[],a=0;e.forEach((t,e)=>{ut.hasOwnProperty(t)?o[e]=ut[t]:(i.push(t),st.hasOwnProperty(t)||(st[t]=[]),st[t].push(()=>{o[e]=ut[t],++a===i.length&&n(o)}))}),0===i.length&&n(o)}function vt(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+t)}}var gt=void 0;function mt(t){for(var e="",r=t;A[r];)e+=gt[A[r++]];return e}var wt=void 0;function bt(t){throw new wt(t)}function _t(t,e,r={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=e.name;if(t||bt('type "'+n+'" must have a positive integer typeid pointer'),ut.hasOwnProperty(t)){if(r.ignoreDuplicateRegistrations)return;bt("Cannot register type '"+n+"' twice")}if(ut[t]=e,delete ct[t],st.hasOwnProperty(t)){var o=st[t];delete st[t],o.forEach(t=>t())}}function Tt(t){bt(t.$$.ptrType.registeredClass.name+" instance already deleted")}var Pt=!1;function Ct(t){}function $t(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function At(t,e,r){if(e===r)return t;if(void 0===r.baseClass)return null;var n=At(t,e,r.baseClass);return null===n?null:r.downcast(n)}var St={};var xt=[];function Et(){for(;xt.length;){var t=xt.pop();t.$$.deleteScheduled=!1,t.delete()}}var kt=void 0;var Rt={};function Ot(t,e){return e.ptrType&&e.ptr||ht("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&ht("Both smartPtrType and smartPtr must be specified"),e.count={value:1},Ft(Object.create(t,{$$:{value:e}}))}function Ft(t){return"undefined"==typeof FinalizationRegistry?(Ft=t=>t,t):(Pt=new FinalizationRegistry(t=>{$t(t.$$)}),Ft=t=>{var e=t.$$;if(e.smartPtr){var r={$$:e};Pt.register(t,r,t)}return t},Ct=t=>Pt.unregister(t),Ft(t))}function Dt(){}function jt(t,e,r){if(void 0===t[e].overloadTable){var n=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||bt("Function '"+r+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+t[e].overloadTable+")!"),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[n.argCount]=n}}function Wt(t,e,r,n,o,i,a,s){this.name=t,this.constructor=e,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function It(t,e,r){for(;e!==r;)e.upcast||bt("Expected null or instance of "+r.name+", got an instance of "+e.name),t=e.upcast(t),e=e.baseClass;return t}function Ut(t,e){if(null===e)return this.isReference&&bt("null is not a valid "+this.name),0;e.$$||bt('Cannot pass "'+te(e)+'" as a '+this.name),e.$$.ptr||bt("Cannot pass deleted object as a pointer of type "+this.name);var r=e.$$.ptrType.registeredClass;return It(e.$$.ptr,r,this.registeredClass)}function Lt(t,e){var r;if(null===e)return this.isReference&&bt("null is not a valid "+this.name),this.isSmartPointer?(r=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,r),r):0;e.$$||bt('Cannot pass "'+te(e)+'" as a '+this.name),e.$$.ptr||bt("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&e.$$.ptrType.isConst&&bt("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);var n=e.$$.ptrType.registeredClass;if(r=It(e.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&bt("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?r=e.$$.smartPtr:bt("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:r=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)r=e.$$.smartPtr;else{var o=e.clone();r=this.rawShare(r,Qt.toHandle(function(){o.delete()})),null!==t&&t.push(this.rawDestructor,r)}break;default:bt("Unsupporting sharing policy")}return r}function Ht(t,e){if(null===e)return this.isReference&&bt("null is not a valid "+this.name),0;e.$$||bt('Cannot pass "'+te(e)+'" as a '+this.name),e.$$.ptr||bt("Cannot pass deleted object as a pointer of type "+this.name),e.$$.ptrType.isConst&&bt("Cannot convert argument of type "+e.$$.ptrType.name+" to parameter type "+this.name);var r=e.$$.ptrType.registeredClass;return It(e.$$.ptr,r,this.registeredClass)}function Mt(t,e,r,n,o,i,a,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=r,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==e.baseClass?this.toWireType=Lt:n?(this.toWireType=Ut,this.destructorFunction=null):(this.toWireType=Ht,this.destructorFunction=null)}var Bt=[];function zt(t){var e=Bt[t];return e||(t>=Bt.length&&(Bt.length=t+1),Bt[t]=e=L.get(t)),e}function Vt(t,e){var r,n,o,a=(t=mt(t)).includes("j")?(r=t,n=e,o=[],function(){return o.length=0,Object.assign(o,arguments),function(t,e,r){return t.includes("j")?function(t,e,r){var n=i["dynCall_"+t];return r&&r.length?n.apply(null,[e].concat(r)):n.call(null,e)}(t,e,r):zt(e).apply(null,r)}(r,n,o)}):zt(e);return"function"!=typeof a&&bt("unknown function pointer with signature "+t+": "+e),a}var Nt=void 0;function Gt(t){var e=Pe(t),r=mt(e);return Te(e),r}function qt(t,e){var r=[],n={};throw e.forEach(function t(e){n[e]||ut[e]||(ct[e]?ct[e].forEach(t):(r.push(e),n[e]=!0))}),new Nt(t+": "+r.map(Gt).join([", "]))}function Jt(t,e){for(var r=[],n=0;n<t;n++)r.push(k[e+4*n>>2]);return r}function Xt(t,e,r,n,o){var i=e.length;i<2&&bt("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==e[1]&&null!==r,s=!1,u=1;u<e.length;++u)if(null!==e[u]&&void 0===e[u].destructorFunction){s=!0;break}var c="void"!==e[0].name,l="",f="";for(u=0;u<i-2;++u)l+=(0!==u?", ":"")+"arg"+u,f+=(0!==u?", ":"")+"arg"+u+"Wired";var p="return function "+lt(t)+"("+l+") {\nif (arguments.length !== "+(i-2)+") {\nthrowBindingError('function "+t+" called with ' + arguments.length + ' arguments, expected "+(i-2)+" args!');\n}\n";s&&(p+="var destructors = [];\n");var d=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],y=[bt,n,o,it,e[0],e[1]];for(a&&(p+="var thisWired = classParam.toWireType("+d+", this);\n"),u=0;u<i-2;++u)p+="var arg"+u+"Wired = argType"+u+".toWireType("+d+", arg"+u+"); // "+e[u+2].name+"\n",h.push("argType"+u),y.push(e[u+2]);if(a&&(f="thisWired"+(f.length>0?", ":"")+f),p+=(c?"var rv = ":"")+"invoker(fn"+(f.length>0?", ":"")+f+");\n",s)p+="runDestructors(destructors);\n";else for(u=a?1:2;u<e.length;++u){var v=1===u?"thisWired":"arg"+(u-2)+"Wired";null!==e[u].destructorFunction&&(p+=v+"_dtor("+v+"); // "+e[u].name+"\n",h.push(v+"_dtor"),y.push(e[u].destructorFunction))}return c&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",h.push(p),function(t,e){if(!(t instanceof Function))throw new TypeError("new_ called with constructor type "+typeof t+" which is not a function");var r=ft(t.name||"unknownFunctionName",function(){});r.prototype=t.prototype;var n=new r,o=t.apply(n,e);return o instanceof Object?o:n}(Function,h).apply(null,y)}var Yt=[],Kt=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Zt(t){t>4&&0===--Kt[t].refcount&&(Kt[t]=void 0,Yt.push(t))}var Qt={toValue:t=>(t||bt("Cannot use deleted val. handle = "+t),Kt[t].value),toHandle:t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var e=Yt.length?Yt.pop():Kt.length;return Kt[e]={refcount:1,value:t},e}}};function te(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function ee(t,e){switch(e){case 2:return function(t){return this.fromWireType(R[t>>2])};case 3:return function(t){return this.fromWireType(O[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function re(t,e,r){switch(e){case 0:return r?function(t){return $[t]}:function(t){return A[t]};case 1:return r?function(t){return S[t>>1]}:function(t){return x[t>>1]};case 2:return r?function(t){return E[t>>2]}:function(t){return k[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var ne="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function oe(t,e){for(var r=t,n=r>>1,o=n+e/2;!(n>=o)&&x[n];)++n;if((r=n<<1)-t>32&&ne)return ne.decode(A.subarray(t,r));for(var i="",a=0;!(a>=e/2);++a){var s=S[t+2*a>>1];if(0==s)break;i+=String.fromCharCode(s)}return i}function ie(t,e,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=e,o=(r-=2)<2*t.length?r/2:t.length,i=0;i<o;++i){var a=t.charCodeAt(i);S[e>>1]=a,e+=2}return S[e>>1]=0,e-n}function ae(t){return 2*t.length}function se(t,e){for(var r=0,n="";!(r>=e/4);){var o=E[t+4*r>>2];if(0==o)break;if(++r,o>=65536){var i=o-65536;n+=String.fromCharCode(55296|i>>10,56320|1023&i)}else n+=String.fromCharCode(o)}return n}function ue(t,e,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=e,o=n+r-4,i=0;i<t.length;++i){var a=t.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++i)),E[e>>2]=a,(e+=4)+4>o)break}return E[e>>2]=0,e-n}function ce(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n>=55296&&n<=57343&&++r,e+=4}return e}var le={};function fe(){return"object"==typeof globalThis?globalThis:Function("return this")()}function pe(t,e){var r=ut[t];return void 0===r&&bt(e+" has unknown type "+Gt(t)),r}var de={};function he(t){try{return T.grow(t-C.byteLength+65535>>>16),U(T.buffer),1}catch(t){}}var ye={};function ve(){if(!ve.strings){var t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:f||"./this.program"};for(var e in ye)void 0===ye[e]?delete t[e]:t[e]=ye[e];var r=[];for(var e in t)r.push(e+"="+t[e]);ve.strings=r}return ve.strings}var ge=[null,[],[]];function me(t,e){var r=ge[t];0===e||10===e?((1===t?b:_)(j(r,0)),r.length=0):r.push(e)}dt=i.InternalError=pt(Error,"InternalError"),function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);gt=t}(),wt=i.BindingError=pt(Error,"BindingError"),Dt.prototype.isAliasOf=function(t){if(!(this instanceof Dt))return!1;if(!(t instanceof Dt))return!1;for(var e=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=t.$$.ptrType.registeredClass,o=t.$$.ptr;e.baseClass;)r=e.upcast(r),e=e.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return e===n&&r===o},Dt.prototype.clone=function(){if(this.$$.ptr||Tt(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=Ft(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},Dt.prototype.delete=function(){this.$$.ptr||Tt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&bt("Object already scheduled for deletion"),Ct(this),$t(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},Dt.prototype.isDeleted=function(){return!this.$$.ptr},Dt.prototype.deleteLater=function(){return this.$$.ptr||Tt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&bt("Object already scheduled for deletion"),xt.push(this),1===xt.length&&kt&&kt(Et),this.$$.deleteScheduled=!0,this},i.getInheritedInstanceCount=function(){return Object.keys(Rt).length},i.getLiveInheritedInstances=function(){var t=[];for(var e in Rt)Rt.hasOwnProperty(e)&&t.push(Rt[e]);return t},i.flushPendingDeletes=Et,i.setDelayFunction=function(t){kt=t,xt.length&&kt&&kt(Et)},Mt.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},Mt.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},Mt.prototype.argPackAdvance=8,Mt.prototype.readValueFromPointer=at,Mt.prototype.deleteObject=function(t){null!==t&&t.delete()},Mt.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var r=function(t,e){return e=function(t,e){for(void 0===e&&bt("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}(t,e),Rt[e]}(this.registeredClass,e);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=e,r.$$.smartPtr=t,r.clone();var n=r.clone();return this.destructor(t),n}function o(){return this.isSmartPointer?Ot(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):Ot(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var i,a=this.registeredClass.getActualType(e),s=St[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var u=At(e,this.registeredClass,i.registeredClass);return null===u?o.call(this):this.isSmartPointer?Ot(i.registeredClass.instancePrototype,{ptrType:i,ptr:u,smartPtrType:this,smartPtr:t}):Ot(i.registeredClass.instancePrototype,{ptrType:i,ptr:u})},Nt=i.UnboundTypeError=pt(Error,"UnboundTypeError"),i.count_emval_handles=function(){for(var t=0,e=5;e<Kt.length;++e)void 0!==Kt[e]&&++t;return t},i.get_first_emval=function(){for(var t=5;t<Kt.length;++t)if(void 0!==Kt[t])return Kt[t];return null};var we,be={g:function(t,e,r){throw new nt(t).init(e,r),t},A:function(t){var e=ot[t];delete ot[t];var r=e.rawConstructor,n=e.rawDestructor,o=e.fields;yt([t],o.map(t=>t.getterReturnType).concat(o.map(t=>t.setterArgumentType)),t=>{var i={};return o.forEach((e,r)=>{var n=e.fieldName,a=t[r],s=e.getter,u=e.getterContext,c=t[r+o.length],l=e.setter,f=e.setterContext;i[n]={read:t=>a.fromWireType(s(u,t)),write:(t,e)=>{var r=[];l(f,t,c.toWireType(r,e)),it(r)}}}),[{name:e.name,fromWireType:function(t){var e={};for(var r in i)e[r]=i[r].read(t);return n(t),e},toWireType:function(t,e){for(var o in i)if(!(o in e))throw new TypeError('Missing field:  "'+o+'"');var a=r();for(o in i)i[o].write(a,e[o]);return null!==t&&t.push(n,a),a},argPackAdvance:8,readValueFromPointer:at,destructorFunction:n}]})},w:function(t,e,r,n,o){},F:function(t,e,r,n,o){var i=vt(r);_t(t,{name:e=mt(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:o},argPackAdvance:8,readValueFromPointer:function(t){var n;if(1===r)n=$;else if(2===r)n=S;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+e);n=E}return this.fromWireType(n[t>>i])},destructorFunction:null})},u:function(t,e,r,n,o,a,s,u,c,l,f,p,d){f=mt(f),a=Vt(o,a),u&&(u=Vt(s,u)),l&&(l=Vt(c,l)),d=Vt(p,d);var h=lt(f);!function(t,e,r){i.hasOwnProperty(t)?(bt("Cannot register public name '"+t+"' twice"),jt(i,t,t),i.hasOwnProperty(r)&&bt("Cannot register multiple overloads of a function with the same number of arguments ("+r+")!"),i[t].overloadTable[void 0]=e):i[t]=e}(h,function(){qt("Cannot construct "+f+" due to unbound types",[n])}),yt([t,e,r],n?[n]:[],function(e){var r,o;e=e[0],o=n?(r=e.registeredClass).instancePrototype:Dt.prototype;var s=ft(h,function(){if(Object.getPrototypeOf(this)!==c)throw new wt("Use 'new' to construct "+f);if(void 0===p.constructor_body)throw new wt(f+" has no accessible constructor");var t=p.constructor_body[arguments.length];if(void 0===t)throw new wt("Tried to invoke ctor of "+f+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(p.constructor_body).toString()+") parameters instead!");return t.apply(this,arguments)}),c=Object.create(o,{constructor:{value:s}});s.prototype=c;var p=new Wt(f,s,c,d,r,a,u,l),y=new Mt(f,p,!0,!1,!1),v=new Mt(f+"*",p,!1,!1,!1),g=new Mt(f+" const*",p,!1,!0,!1);return St[t]={pointerType:v,constPointerType:g},function(t,e,r){i.hasOwnProperty(t)||ht("Replacing nonexistant public symbol"),i[t].overloadTable,i[t]=e,i[t].argCount=r}(h,s),[y,v,g]})},t:function(t,e,r,n,o,i){e>0||K(undefined);var a=Jt(e,r);o=Vt(n,o),yt([],[t],function(t){var r="constructor "+(t=t[0]).name;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new wt("Cannot register multiple constructors with identical number of parameters ("+(e-1)+") for class '"+t.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return t.registeredClass.constructor_body[e-1]=()=>{qt("Cannot construct "+t.name+" due to unbound types",a)},yt([],a,function(n){return n.splice(1,0,null),t.registeredClass.constructor_body[e-1]=Xt(r,n,null,o,i),[]}),[]})},c:function(t,e,r,n,o,i,a,s){var u=Jt(r,n);e=mt(e),i=Vt(o,i),yt([],[t],function(t){var n=(t=t[0]).name+"."+e;function o(){qt("Cannot call "+n+" due to unbound types",u)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var c=t.registeredClass.instancePrototype,l=c[e];return void 0===l||void 0===l.overloadTable&&l.className!==t.name&&l.argCount===r-2?(o.argCount=r-2,o.className=t.name,c[e]=o):(jt(c,e,n),c[e].overloadTable[r-2]=o),yt([],u,function(o){var s=Xt(n,o,t,i,a);return void 0===c[e].overloadTable?(s.argCount=r-2,c[e]=s):c[e].overloadTable[r-2]=s,[]}),[]})},E:function(t,e){_t(t,{name:e=mt(e),fromWireType:function(t){var e=Qt.toValue(t);return Zt(t),e},toWireType:function(t,e){return Qt.toHandle(e)},argPackAdvance:8,readValueFromPointer:at,destructorFunction:null})},m:function(t,e,r){var n=vt(r);_t(t,{name:e=mt(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:ee(e,n),destructorFunction:null})},b:function(t,e,r,n,o){e=mt(e),-1===o&&(o=4294967295);var i=vt(r),a=t=>t;if(0===n){var s=32-8*r;a=t=>t<<s>>>s}var u=e.includes("unsigned");_t(t,{name:e,fromWireType:a,toWireType:u?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:re(e,i,0!==n),destructorFunction:null})},a:function(t,e,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function o(t){var e=k,r=e[t>>=2],o=e[t+1];return new n(C,o,r)}_t(t,{name:r=mt(r),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},l:function(t,e){var r="std::string"===(e=mt(e));_t(t,{name:e,fromWireType:function(t){var e,n=k[t>>2],o=t+4;if(r)for(var i=o,a=0;a<=n;++a){var s=o+a;if(a==n||0==A[s]){var u=W(i,s-i);void 0===e?e=u:(e+=String.fromCharCode(0),e+=u),i=s+1}}else{var c=new Array(n);for(a=0;a<n;++a)c[a]=String.fromCharCode(A[o+a]);e=c.join("")}return Te(t),e},toWireType:function(t,e){var n;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var o="string"==typeof e;o||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||bt("Cannot pass non-string to std::string"),n=r&&o?function(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n<=127?e++:n<=2047?e+=2:n>=55296&&n<=57343?(e+=4,++r):e+=3}return e}(e):e.length;var i=_e(4+n+1),a=i+4;if(k[i>>2]=n,r&&o)I(e,a,n+1);else if(o)for(var s=0;s<n;++s){var u=e.charCodeAt(s);u>255&&(Te(a),bt("String has UTF-16 code units that do not fit in 8 bits")),A[a+s]=u}else for(s=0;s<n;++s)A[a+s]=e[s];return null!==t&&t.push(Te,i),i},argPackAdvance:8,readValueFromPointer:at,destructorFunction:function(t){Te(t)}})},h:function(t,e,r){var n,o,i,a,s;r=mt(r),2===e?(n=oe,o=ie,a=ae,i=()=>x,s=1):4===e&&(n=se,o=ue,a=ce,i=()=>k,s=2),_t(t,{name:r,fromWireType:function(t){for(var r,o=k[t>>2],a=i(),u=t+4,c=0;c<=o;++c){var l=t+4+c*e;if(c==o||0==a[l>>s]){var f=n(u,l-u);void 0===r?r=f:(r+=String.fromCharCode(0),r+=f),u=l+e}}return Te(t),r},toWireType:function(t,n){"string"!=typeof n&&bt("Cannot pass non-string to C++ string type "+r);var i=a(n),u=_e(4+i+e);return k[u>>2]=i>>s,o(n,u+4,i+e),null!==t&&t.push(Te,u),u},argPackAdvance:8,readValueFromPointer:at,destructorFunction:function(t){Te(t)}})},J:function(t,e,r,n,o,i){ot[t]={name:mt(e),rawConstructor:Vt(r,n),rawDestructor:Vt(o,i),fields:[]}},d:function(t,e,r,n,o,i,a,s,u,c){ot[t].fields.push({fieldName:mt(e),getterReturnType:r,getter:Vt(n,o),getterContext:i,setterArgumentType:a,setter:Vt(s,u),setterContext:c})},G:function(t,e){_t(t,{isVoid:!0,name:e=mt(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(t,e){}})},x:function(){throw 1/0},i:Zt,r:function(t){return 0===t?Qt.toHandle(fe()):(t=void 0===(r=le[e=t])?mt(e):r,Qt.toHandle(fe()[t]));var e,r},p:function(t){t>4&&(Kt[t].refcount+=1)},q:function(t,e,r,n){t=Qt.toValue(t);var o=de[e];return o||(o=function(t){for(var e="",r=0;r<t;++r)e+=(0!==r?", ":"")+"arg"+r;var n="return function emval_allocator_"+t+"(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";for(r=0;r<t;++r)n+="var argType"+r+" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter "+r+"');\nvar arg"+r+" = argType"+r+".readValueFromPointer(args);\nargs += argType"+r+"['argPackAdvance'];\nargTypes += 4;\n";return n+="var obj = new constructor("+e+");\nreturn valueToHandle(obj);\n}\n",new Function("requireRegisteredType","Module","valueToHandle","getMemory",n)(pe,i,Qt.toHandle,()=>k)}(e),de[e]=o),o(t,r,n)},s:function(t,e){var r=(t=pe(t,"_emval_take_value")).readValueFromPointer(e);return Qt.toHandle(r)},j:function(){K("")},D:function(t,e,r){A.copyWithin(t,e,e+r)},y:function(t){var e=A.length,r=2147483648;if((t>>>=0)>r)return!1;let n=(t,e)=>t+(e-t%e)%e;for(var o=1;o<=4;o*=2){var i=e*(1+.2/o);if(i=Math.min(i,t+100663296),he(Math.min(r,n(Math.max(t,i),65536))))return!0}return!1},z:function(t,e){var r=0;return ve().forEach(function(n,o){var i=e+r;k[t+4*o>>2]=i,function(t,e){for(var r=0;r<t.length;++r)$[0|e++]=t.charCodeAt(r);$[0|e]=0}(n,i),r+=n.length+1}),0},B:function(t,e){var r=ve();k[t>>2]=r.length;var n=0;return r.forEach(function(t){n+=t.length+1}),k[e>>2]=n,0},I:function(t,e){var r;r=t,z()||(i.onExit&&i.onExit(r),F=!0),p(r,new et(r))},C:function(t){return 52},v:function(t,e,r,n,o){return 70},k:function(t,e,r,n){for(var o=0,i=0;i<r;i++){var a=k[e>>2],s=k[e+4>>2];e+=8;for(var u=0;u<s;u++)me(t,A[a+u]);o+=s}return k[n>>2]=o,0},o:function(t,e){var r=$e();try{return zt(t)(e)}catch(t){if(Ae(r),t!==t+0)throw t;Ce(1,0)}},n:function(t,e,r){var n=$e();try{return zt(t)(e,r)}catch(t){if(Ae(n),t!==t+0)throw t;Ce(1,0)}},H:function(t,e,r,n){var o=$e();try{return zt(t)(e,r,n)}catch(t){if(Ae(o),t!==t+0)throw t;Ce(1,0)}},f:function(t,e){var r=$e();try{zt(t)(e)}catch(t){if(Ae(r),t!==t+0)throw t;Ce(1,0)}},e:function(t,e,r,n){var o=$e();try{zt(t)(e,r,n)}catch(t){if(Ae(o),t!==t+0)throw t;Ce(1,0)}}},_e=(function(){var t={a:be};function e(t,e){var r,n=t.exports;i.asm=n,U((T=i.asm.K).buffer),L=i.asm.M,r=i.asm.L,M.unshift(r),function(){if(J--,i.monitorRunDependencies&&i.monitorRunDependencies(J),0==J&&(null!==X&&(clearInterval(X),X=null),Y)){var t=Y;Y=null,t()}}()}function r(t){e(t.instance)}function n(e){return function(){if(!w&&(d||h)){if("function"==typeof fetch&&!Q(G))return fetch(G,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+G+"'";return t.arrayBuffer()}).catch(function(){return tt(G)});if(s)return new Promise(function(t,e){s(G,function(e){t(new Uint8Array(e))},e)})}return Promise.resolve().then(function(){return tt(G)})}().then(function(e){return WebAssembly.instantiate(e,t)}).then(function(t){return t}).then(e,function(t){_("failed to asynchronously prepare wasm: "+t),K(t)})}if(J++,i.monitorRunDependencies&&i.monitorRunDependencies(J),i.instantiateWasm)try{return i.instantiateWasm(t,e)}catch(t){_("Module.instantiateWasm callback failed with error: "+t),o(t)}(w||"function"!=typeof WebAssembly.instantiateStreaming||Z(G)||Q(G)||y||"function"!=typeof fetch?n(r):fetch(G,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,t).then(r,function(t){return _("wasm streaming compile failed: "+t),_("falling back to ArrayBuffer instantiation"),n(r)})})).catch(o)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.L).apply(null,arguments)},i._malloc=function(){return(_e=i._malloc=i.asm.N).apply(null,arguments)}),Te=i._free=function(){return(Te=i._free=i.asm.O).apply(null,arguments)},Pe=i.___getTypeName=function(){return(Pe=i.___getTypeName=i.asm.P).apply(null,arguments)},Ce=(i.__embind_initialize_bindings=function(){return(i.__embind_initialize_bindings=i.asm.Q).apply(null,arguments)},i._setThrew=function(){return(Ce=i._setThrew=i.asm.R).apply(null,arguments)}),$e=i.stackSave=function(){return($e=i.stackSave=i.asm.S).apply(null,arguments)},Ae=i.stackRestore=function(){return(Ae=i.stackRestore=i.asm.T).apply(null,arguments)},Se=i.stackAlloc=function(){return(Se=i.stackAlloc=i.asm.U).apply(null,arguments)},xe=i.___cxa_is_pointer_type=function(){return(xe=i.___cxa_is_pointer_type=i.asm.V).apply(null,arguments)};function Ee(t){function r(){we||(we=!0,i.calledRun=!0,F||(rt(M),e(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)N(i.postRun.shift());rt(B)}()))}t=t||l,J>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)V(i.preRun.shift());rt(H)}(),J>0||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),r()},1)):r()))}if(i.dynCall_jiji=function(){return(i.dynCall_jiji=i.asm.W).apply(null,arguments)},i.ccall=function(t,e,r,n,o){var a={string:t=>{var e=0;if(null!=t&&0!==t){var r=1+(t.length<<2);I(t,e=Se(r),r)}return e},array:t=>{var e=Se(t.length);return function(t,e){$.set(t,e)}(t,e),e}},s=function(t){return i["_"+t]}(t),u=[],c=0;if(n)for(var l=0;l<n.length;l++){var f=a[r[l]];f?(0===c&&(c=$e()),u[l]=f(n[l])):u[l]=n[l]}var p=s.apply(null,u);return function(t){return 0!==c&&Ae(c),function(t){return"string"===e?W(t):"boolean"===e?Boolean(t):t}(t)}(p)},Y=function t(){we||Ee(),we||(Y=t)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return Ee(),t.ready});t.exports=o},3114:(t,e,r)=>{var n,o=(n=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,o;(t=void 0!==(t=t||{})?t:{}).ready=new Promise(function(t,r){e=t,o=r});var i,a,s,u=Object.assign({},t),c=[],l="object"==typeof window,f="function"==typeof importScripts,p="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,d="";if(p){var h=r(4304),y=r(1440);d=f?y.dirname(d)+"/":"//",i=(t,e)=>(t=J(t)?new URL(t):y.normalize(t),h.readFileSync(t,e?void 0:"utf8")),s=t=>{var e=i(t,!0);return e.buffer||(e=new Uint8Array(e)),e},a=(t,e,r)=>{t=J(t)?new URL(t):y.normalize(t),h.readFile(t,function(t,n){t?r(t):e(n.buffer)})},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),c=process.argv.slice(2),process.on("uncaughtException",function(t){if(!(t instanceof Y))throw t}),process.on("unhandledRejection",function(t){throw t}),t.inspect=function(){return"[Emscripten Module object]"}}else(l||f)&&(f?d=self.location.href:"undefined"!=typeof document&&document.currentScript&&(d=document.currentScript.src),n&&(d=n),d=0!==d.indexOf("blob:")?d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1):"",i=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},f&&(s=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),a=(t,e,r)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):r()},n.onerror=r,n.send(null)});var v,g,m=t.print||console.log.bind(console),w=t.printErr||console.warn.bind(console);Object.assign(t,u),u=null,t.arguments&&(c=t.arguments),t.thisProgram&&t.thisProgram,t.quit&&t.quit,t.wasmBinary&&(v=t.wasmBinary),t.noExitRuntime,"object"!=typeof WebAssembly&&G("no native wasm support detected");var b=!1;var _,T,P,C,$,A,S,x,E,k="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function R(t,e,r){for(var n=e+r,o=e;t[o]&&!(o>=n);)++o;if(o-e>16&&t.buffer&&k)return k.decode(t.subarray(e,o));for(var i="";e<o;){var a=t[e++];if(128&a){var s=63&t[e++];if(192!=(224&a)){var u=63&t[e++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&t[e++])<65536)i+=String.fromCharCode(a);else{var c=a-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}function O(t,e){return t?R(P,t,e):""}function F(t,e,r){return function(t,e,r,n){if(!(n>0))return 0;for(var o=r,i=r+n-1,a=0;a<t.length;++a){var s=t.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&t.charCodeAt(++a)),s<=127){if(r>=i)break;e[r++]=s}else if(s<=2047){if(r+1>=i)break;e[r++]=192|s>>6,e[r++]=128|63&s}else if(s<=65535){if(r+2>=i)break;e[r++]=224|s>>12,e[r++]=128|s>>6&63,e[r++]=128|63&s}else{if(r+3>=i)break;e[r++]=240|s>>18,e[r++]=128|s>>12&63,e[r++]=128|s>>6&63,e[r++]=128|63&s}}return e[r]=0,r-o}(t,P,e,r)}function D(e){_=e,t.HEAP8=T=new Int8Array(e),t.HEAP16=C=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=P=new Uint8Array(e),t.HEAPU16=$=new Uint16Array(e),t.HEAPU32=S=new Uint32Array(e),t.HEAPF32=x=new Float32Array(e),t.HEAPF64=E=new Float64Array(e)}t.INITIAL_MEMORY;var j,W=[],I=[],U=[];function L(t){W.unshift(t)}function H(t){U.unshift(t)}var M,B,z=0,V=null,N=null;function G(e){t.onAbort&&t.onAbort(e),w(e="Aborted("+e+")"),b=!0,e+=". Build with -sASSERTIONS for more info.";var r=new WebAssembly.RuntimeError(e);throw o(r),r}function q(t){return t.startsWith("data:application/octet-stream;base64,")}function J(t){return t.startsWith("file://")}function X(t){try{if(t==M&&v)return new Uint8Array(v);if(s)return s(t);throw"both async and sync fetching of the wasm failed"}catch(t){G(t)}}function Y(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function K(e){for(;e.length>0;)e.shift()(t)}q(M="openjphjs.wasm")||(B=M,M=t.locateFile?t.locateFile(B,d):d+B);var Z=[],Q=0,tt=[];function et(t){var e=tt[t];return e||(t>=tt.length&&(tt.length=t+1),tt[t]=e=j.get(t)),e}function rt(t){this.excPtr=t,this.ptr=t-24,this.set_type=function(t){S[this.ptr+4>>2]=t},this.get_type=function(){return S[this.ptr+4>>2]},this.set_destructor=function(t){S[this.ptr+8>>2]=t},this.get_destructor=function(){return S[this.ptr+8>>2]},this.set_refcount=function(t){A[this.ptr>>2]=t},this.set_caught=function(t){t=t?1:0,T[this.ptr+12|0]=t},this.get_caught=function(){return 0!=T[this.ptr+12|0]},this.set_rethrown=function(t){t=t?1:0,T[this.ptr+13|0]=t},this.get_rethrown=function(){return 0!=T[this.ptr+13|0]},this.init=function(t,e){this.set_adjusted_ptr(0),this.set_type(t),this.set_destructor(e),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var t=A[this.ptr>>2];A[this.ptr>>2]=t+1},this.release_ref=function(){var t=A[this.ptr>>2];return A[this.ptr>>2]=t-1,1===t},this.set_adjusted_ptr=function(t){S[this.ptr+16>>2]=t},this.get_adjusted_ptr=function(){return S[this.ptr+16>>2]},this.get_exception_ptr=function(){if(Pe(this.get_type()))return S[this.excPtr>>2];var t=this.get_adjusted_ptr();return 0!==t?t:this.excPtr}}var nt={};function ot(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function it(t){return this.fromWireType(A[t>>2])}var at={},st={},ut={};function ct(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=48&&e<=57?"_"+t:t}function lt(t,e){return t=ct(t),new Function("body","return function "+t+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(e)}function ft(t,e){var r=lt(e,function(t){this.name=e,this.message=t;var r=new Error(t).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))});return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},r}var pt=void 0;function dt(t){throw new pt(t)}function ht(t,e,r){function n(e){var n=r(e);n.length!==t.length&&dt("Mismatched type converter count");for(var o=0;o<t.length;++o)bt(t[o],n[o])}t.forEach(function(t){ut[t]=e});var o=new Array(e.length),i=[],a=0;e.forEach((t,e)=>{st.hasOwnProperty(t)?o[e]=st[t]:(i.push(t),at.hasOwnProperty(t)||(at[t]=[]),at[t].push(()=>{o[e]=st[t],++a===i.length&&n(o)}))}),0===i.length&&n(o)}function yt(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+t)}}var vt=void 0;function gt(t){for(var e="",r=t;P[r];)e+=vt[P[r++]];return e}var mt=void 0;function wt(t){throw new mt(t)}function bt(t,e,r={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=e.name;if(t||wt('type "'+n+'" must have a positive integer typeid pointer'),st.hasOwnProperty(t)){if(r.ignoreDuplicateRegistrations)return;wt("Cannot register type '"+n+"' twice")}if(st[t]=e,delete ut[t],at.hasOwnProperty(t)){var o=at[t];delete at[t],o.forEach(t=>t())}}function _t(t){wt(t.$$.ptrType.registeredClass.name+" instance already deleted")}var Tt=!1;function Pt(t){}function Ct(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function $t(t,e,r){if(e===r)return t;if(void 0===r.baseClass)return null;var n=$t(t,e,r.baseClass);return null===n?null:r.downcast(n)}var At={};var St=[];function xt(){for(;St.length;){var t=St.pop();t.$$.deleteScheduled=!1,t.delete()}}var Et=void 0;var kt={};function Rt(t,e){return e.ptrType&&e.ptr||dt("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&dt("Both smartPtrType and smartPtr must be specified"),e.count={value:1},Ot(Object.create(t,{$$:{value:e}}))}function Ot(t){return"undefined"==typeof FinalizationRegistry?(Ot=t=>t,t):(Tt=new FinalizationRegistry(t=>{Ct(t.$$)}),Ot=t=>{var e=t.$$;if(e.smartPtr){var r={$$:e};Tt.register(t,r,t)}return t},Pt=t=>Tt.unregister(t),Ot(t))}function Ft(){}function Dt(t,e,r){if(void 0===t[e].overloadTable){var n=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||wt("Function '"+r+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+t[e].overloadTable+")!"),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[n.argCount]=n}}function jt(e,r,n){t.hasOwnProperty(e)?((void 0===n||void 0!==t[e].overloadTable&&void 0!==t[e].overloadTable[n])&&wt("Cannot register public name '"+e+"' twice"),Dt(t,e,e),t.hasOwnProperty(n)&&wt("Cannot register multiple overloads of a function with the same number of arguments ("+n+")!"),t[e].overloadTable[n]=r):(t[e]=r,void 0!==n&&(t[e].numArguments=n))}function Wt(t,e,r,n,o,i,a,s){this.name=t,this.constructor=e,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function It(t,e,r){for(;e!==r;)e.upcast||wt("Expected null or instance of "+r.name+", got an instance of "+e.name),t=e.upcast(t),e=e.baseClass;return t}function Ut(t,e){if(null===e)return this.isReference&&wt("null is not a valid "+this.name),0;e.$$||wt('Cannot pass "'+Qt(e)+'" as a '+this.name),e.$$.ptr||wt("Cannot pass deleted object as a pointer of type "+this.name);var r=e.$$.ptrType.registeredClass;return It(e.$$.ptr,r,this.registeredClass)}function Lt(t,e){var r;if(null===e)return this.isReference&&wt("null is not a valid "+this.name),this.isSmartPointer?(r=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,r),r):0;e.$$||wt('Cannot pass "'+Qt(e)+'" as a '+this.name),e.$$.ptr||wt("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&e.$$.ptrType.isConst&&wt("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);var n=e.$$.ptrType.registeredClass;if(r=It(e.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&wt("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?r=e.$$.smartPtr:wt("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:r=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)r=e.$$.smartPtr;else{var o=e.clone();r=this.rawShare(r,Zt.toHandle(function(){o.delete()})),null!==t&&t.push(this.rawDestructor,r)}break;default:wt("Unsupporting sharing policy")}return r}function Ht(t,e){if(null===e)return this.isReference&&wt("null is not a valid "+this.name),0;e.$$||wt('Cannot pass "'+Qt(e)+'" as a '+this.name),e.$$.ptr||wt("Cannot pass deleted object as a pointer of type "+this.name),e.$$.ptrType.isConst&&wt("Cannot convert argument of type "+e.$$.ptrType.name+" to parameter type "+this.name);var r=e.$$.ptrType.registeredClass;return It(e.$$.ptr,r,this.registeredClass)}function Mt(t,e,r,n,o,i,a,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=r,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==e.baseClass?this.toWireType=Lt:n?(this.toWireType=Ut,this.destructorFunction=null):(this.toWireType=Ht,this.destructorFunction=null)}function Bt(e,r,n){t.hasOwnProperty(e)||dt("Replacing nonexistant public symbol"),void 0!==t[e].overloadTable&&void 0!==n?t[e].overloadTable[n]=r:(t[e]=r,t[e].argCount=n)}function zt(e,r){var n,o,i,a=(e=gt(e)).includes("j")?(n=e,o=r,i=[],function(){return i.length=0,Object.assign(i,arguments),function(e,r,n){return e.includes("j")?function(e,r,n){var o=t["dynCall_"+e];return n&&n.length?o.apply(null,[r].concat(n)):o.call(null,r)}(e,r,n):et(r).apply(null,n)}(n,o,i)}):et(r);return"function"!=typeof a&&wt("unknown function pointer with signature "+e+": "+r),a}var Vt=void 0;function Nt(t){var e=ge(t),r=gt(e);return ye(e),r}function Gt(t,e){var r=[],n={};throw e.forEach(function t(e){n[e]||st[e]||(ut[e]?ut[e].forEach(t):(r.push(e),n[e]=!0))}),new Vt(t+": "+r.map(Nt).join([", "]))}function qt(t,e){for(var r=[],n=0;n<t;n++)r.push(S[e+4*n>>2]);return r}function Jt(t,e,r,n,o){var i=e.length;i<2&&wt("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==e[1]&&null!==r,s=!1,u=1;u<e.length;++u)if(null!==e[u]&&void 0===e[u].destructorFunction){s=!0;break}var c="void"!==e[0].name,l="",f="";for(u=0;u<i-2;++u)l+=(0!==u?", ":"")+"arg"+u,f+=(0!==u?", ":"")+"arg"+u+"Wired";var p="return function "+ct(t)+"("+l+") {\nif (arguments.length !== "+(i-2)+") {\nthrowBindingError('function "+t+" called with ' + arguments.length + ' arguments, expected "+(i-2)+" args!');\n}\n";s&&(p+="var destructors = [];\n");var d=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],y=[wt,n,o,ot,e[0],e[1]];for(a&&(p+="var thisWired = classParam.toWireType("+d+", this);\n"),u=0;u<i-2;++u)p+="var arg"+u+"Wired = argType"+u+".toWireType("+d+", arg"+u+"); // "+e[u+2].name+"\n",h.push("argType"+u),y.push(e[u+2]);if(a&&(f="thisWired"+(f.length>0?", ":"")+f),p+=(c?"var rv = ":"")+"invoker(fn"+(f.length>0?", ":"")+f+");\n",s)p+="runDestructors(destructors);\n";else for(u=a?1:2;u<e.length;++u){var v=1===u?"thisWired":"arg"+(u-2)+"Wired";null!==e[u].destructorFunction&&(p+=v+"_dtor("+v+"); // "+e[u].name+"\n",h.push(v+"_dtor"),y.push(e[u].destructorFunction))}return c&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",h.push(p),function(t,e){if(!(t instanceof Function))throw new TypeError("new_ called with constructor type "+typeof t+" which is not a function");var r=lt(t.name||"unknownFunctionName",function(){});r.prototype=t.prototype;var n=new r,o=t.apply(n,e);return o instanceof Object?o:n}(Function,h).apply(null,y)}var Xt=[],Yt=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Kt(t){t>4&&0===--Yt[t].refcount&&(Yt[t]=void 0,Xt.push(t))}var Zt={toValue:t=>(t||wt("Cannot use deleted val. handle = "+t),Yt[t].value),toHandle:t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var e=Xt.length?Xt.pop():Yt.length;return Yt[e]={refcount:1,value:t},e}}};function Qt(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function te(t,e){switch(e){case 2:return function(t){return this.fromWireType(x[t>>2])};case 3:return function(t){return this.fromWireType(E[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function ee(t,e,r){switch(e){case 0:return r?function(t){return T[t]}:function(t){return P[t]};case 1:return r?function(t){return C[t>>1]}:function(t){return $[t>>1]};case 2:return r?function(t){return A[t>>2]}:function(t){return S[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var re="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function ne(t,e){for(var r=t,n=r>>1,o=n+e/2;!(n>=o)&&$[n];)++n;if((r=n<<1)-t>32&&re)return re.decode(P.subarray(t,r));for(var i="",a=0;!(a>=e/2);++a){var s=C[t+2*a>>1];if(0==s)break;i+=String.fromCharCode(s)}return i}function oe(t,e,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=e,o=(r-=2)<2*t.length?r/2:t.length,i=0;i<o;++i){var a=t.charCodeAt(i);C[e>>1]=a,e+=2}return C[e>>1]=0,e-n}function ie(t){return 2*t.length}function ae(t,e){for(var r=0,n="";!(r>=e/4);){var o=A[t+4*r>>2];if(0==o)break;if(++r,o>=65536){var i=o-65536;n+=String.fromCharCode(55296|i>>10,56320|1023&i)}else n+=String.fromCharCode(o)}return n}function se(t,e,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=e,o=n+r-4,i=0;i<t.length;++i){var a=t.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++i)),A[e>>2]=a,(e+=4)+4>o)break}return A[e>>2]=0,e-n}function ue(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n>=55296&&n<=57343&&++r,e+=4}return e}function ce(t){try{return g.grow(t-_.byteLength+65535>>>16),D(g.buffer),1}catch(t){}}var le=[null,[],[]];function fe(t,e){var r=le[t];0===e||10===e?((1===t?m:w)(R(r,0)),r.length=0):r.push(e)}pt=t.InternalError=ft(Error,"InternalError"),function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);vt=t}(),mt=t.BindingError=ft(Error,"BindingError"),Ft.prototype.isAliasOf=function(t){if(!(this instanceof Ft))return!1;if(!(t instanceof Ft))return!1;for(var e=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=t.$$.ptrType.registeredClass,o=t.$$.ptr;e.baseClass;)r=e.upcast(r),e=e.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return e===n&&r===o},Ft.prototype.clone=function(){if(this.$$.ptr||_t(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=Ot(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},Ft.prototype.delete=function(){this.$$.ptr||_t(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&wt("Object already scheduled for deletion"),Pt(this),Ct(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},Ft.prototype.isDeleted=function(){return!this.$$.ptr},Ft.prototype.deleteLater=function(){return this.$$.ptr||_t(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&wt("Object already scheduled for deletion"),St.push(this),1===St.length&&Et&&Et(xt),this.$$.deleteScheduled=!0,this},t.getInheritedInstanceCount=function(){return Object.keys(kt).length},t.getLiveInheritedInstances=function(){var t=[];for(var e in kt)kt.hasOwnProperty(e)&&t.push(kt[e]);return t},t.flushPendingDeletes=xt,t.setDelayFunction=function(t){Et=t,St.length&&Et&&Et(xt)},Mt.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},Mt.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},Mt.prototype.argPackAdvance=8,Mt.prototype.readValueFromPointer=it,Mt.prototype.deleteObject=function(t){null!==t&&t.delete()},Mt.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var r=function(t,e){return e=function(t,e){for(void 0===e&&wt("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}(t,e),kt[e]}(this.registeredClass,e);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=e,r.$$.smartPtr=t,r.clone();var n=r.clone();return this.destructor(t),n}function o(){return this.isSmartPointer?Rt(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):Rt(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var i,a=this.registeredClass.getActualType(e),s=At[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var u=$t(e,this.registeredClass,i.registeredClass);return null===u?o.call(this):this.isSmartPointer?Rt(i.registeredClass.instancePrototype,{ptrType:i,ptr:u,smartPtrType:this,smartPtr:t}):Rt(i.registeredClass.instancePrototype,{ptrType:i,ptr:u})},Vt=t.UnboundTypeError=ft(Error,"UnboundTypeError"),t.count_emval_handles=function(){for(var t=0,e=5;e<Yt.length;++e)void 0!==Yt[e]&&++t;return t},t.get_first_emval=function(){for(var t=5;t<Yt.length;++t)if(void 0!==Yt[t])return Yt[t];return null};var pe,de={__assert_fail:function(t,e,r,n){G("Assertion failed: "+O(t)+", at: "+[e?O(e):"unknown filename",r,n?O(n):"unknown function"])},__cxa_begin_catch:function(t){var e=new rt(t);return e.get_caught()||e.set_caught(!0),e.set_rethrown(!1),Z.push(e),function(t){t.add_ref()}(e),e.get_exception_ptr()},__cxa_end_catch:function(){_setThrew(0),function(t){if(t.release_ref()&&!t.get_rethrown()){var e=t.get_destructor();e&&et(e)(t.excPtr),ve(t.excPtr)}}(Z.pop()),Q=0},__cxa_find_matching_catch_2:function(){var t=Q;if(!t)return me(0),0;var e=new rt(t);e.set_adjusted_ptr(t);var r=e.get_type();if(!r)return me(0),t;for(var n=0;n<arguments.length;n++){var o=arguments[n];if(0===o||o===r)break;var i=e.ptr+16;if(Te(o,r,i))return me(o),t}return me(r),t},__cxa_find_matching_catch_3:function(){var t=Q;if(!t)return me(0),0;var e=new rt(t);e.set_adjusted_ptr(t);var r=e.get_type();if(!r)return me(0),t;for(var n=0;n<arguments.length;n++){var o=arguments[n];if(0===o||o===r)break;var i=e.ptr+16;if(Te(o,r,i))return me(o),t}return me(r),t},__cxa_throw:function(t,e,r){throw new rt(t).init(e,r),Q=t,t},__resumeException:function(t){throw Q||(Q=t),t},_embind_finalize_value_object:function(t){var e=nt[t];delete nt[t];var r=e.rawConstructor,n=e.rawDestructor,o=e.fields;ht([t],o.map(t=>t.getterReturnType).concat(o.map(t=>t.setterArgumentType)),t=>{var i={};return o.forEach((e,r)=>{var n=e.fieldName,a=t[r],s=e.getter,u=e.getterContext,c=t[r+o.length],l=e.setter,f=e.setterContext;i[n]={read:t=>a.fromWireType(s(u,t)),write:(t,e)=>{var r=[];l(f,t,c.toWireType(r,e)),ot(r)}}}),[{name:e.name,fromWireType:function(t){var e={};for(var r in i)e[r]=i[r].read(t);return n(t),e},toWireType:function(t,e){for(var o in i)if(!(o in e))throw new TypeError('Missing field:  "'+o+'"');var a=r();for(o in i)i[o].write(a,e[o]);return null!==t&&t.push(n,a),a},argPackAdvance:8,readValueFromPointer:it,destructorFunction:n}]})},_embind_register_bigint:function(t,e,r,n,o){},_embind_register_bool:function(t,e,r,n,o){var i=yt(r);bt(t,{name:e=gt(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:o},argPackAdvance:8,readValueFromPointer:function(t){var n;if(1===r)n=T;else if(2===r)n=C;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+e);n=A}return this.fromWireType(n[t>>i])},destructorFunction:null})},_embind_register_class:function(t,e,r,n,o,i,a,s,u,c,l,f,p){l=gt(l),i=zt(o,i),s&&(s=zt(a,s)),c&&(c=zt(u,c)),p=zt(f,p);var d=ct(l);jt(d,function(){Gt("Cannot construct "+l+" due to unbound types",[n])}),ht([t,e,r],n?[n]:[],function(e){var r,o;e=e[0],o=n?(r=e.registeredClass).instancePrototype:Ft.prototype;var a=lt(d,function(){if(Object.getPrototypeOf(this)!==u)throw new mt("Use 'new' to construct "+l);if(void 0===f.constructor_body)throw new mt(l+" has no accessible constructor");var t=f.constructor_body[arguments.length];if(void 0===t)throw new mt("Tried to invoke ctor of "+l+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(f.constructor_body).toString()+") parameters instead!");return t.apply(this,arguments)}),u=Object.create(o,{constructor:{value:a}});a.prototype=u;var f=new Wt(l,a,u,p,r,i,s,c),h=new Mt(l,f,!0,!1,!1),y=new Mt(l+"*",f,!1,!1,!1),v=new Mt(l+" const*",f,!1,!0,!1);return At[t]={pointerType:y,constPointerType:v},Bt(d,a),[h,y,v]})},_embind_register_class_constructor:function(t,e,r,n,o,i){var a;e>0||G(a);var s=qt(e,r);o=zt(n,o),ht([],[t],function(t){var r="constructor "+(t=t[0]).name;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new mt("Cannot register multiple constructors with identical number of parameters ("+(e-1)+") for class '"+t.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return t.registeredClass.constructor_body[e-1]=()=>{Gt("Cannot construct "+t.name+" due to unbound types",s)},ht([],s,function(n){return n.splice(1,0,null),t.registeredClass.constructor_body[e-1]=Jt(r,n,null,o,i),[]}),[]})},_embind_register_class_function:function(t,e,r,n,o,i,a,s){var u=qt(r,n);e=gt(e),i=zt(o,i),ht([],[t],function(t){var n=(t=t[0]).name+"."+e;function o(){Gt("Cannot call "+n+" due to unbound types",u)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var c=t.registeredClass.instancePrototype,l=c[e];return void 0===l||void 0===l.overloadTable&&l.className!==t.name&&l.argCount===r-2?(o.argCount=r-2,o.className=t.name,c[e]=o):(Dt(c,e,n),c[e].overloadTable[r-2]=o),ht([],u,function(o){var s=Jt(n,o,t,i,a);return void 0===c[e].overloadTable?(s.argCount=r-2,c[e]=s):c[e].overloadTable[r-2]=s,[]}),[]})},_embind_register_emval:function(t,e){bt(t,{name:e=gt(e),fromWireType:function(t){var e=Zt.toValue(t);return Kt(t),e},toWireType:function(t,e){return Zt.toHandle(e)},argPackAdvance:8,readValueFromPointer:it,destructorFunction:null})},_embind_register_float:function(t,e,r){var n=yt(r);bt(t,{name:e=gt(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:te(e,n),destructorFunction:null})},_embind_register_function:function(t,e,r,n,o,i){var a=qt(e,r);t=gt(t),o=zt(n,o),jt(t,function(){Gt("Cannot call "+t+" due to unbound types",a)},e-1),ht([],a,function(r){var n=[r[0],null].concat(r.slice(1));return Bt(t,Jt(t,n,null,o,i),e-1),[]})},_embind_register_integer:function(t,e,r,n,o){e=gt(e),-1===o&&(o=4294967295);var i=yt(r),a=t=>t;if(0===n){var s=32-8*r;a=t=>t<<s>>>s}var u=e.includes("unsigned");bt(t,{name:e,fromWireType:a,toWireType:u?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:ee(e,i,0!==n),destructorFunction:null})},_embind_register_memory_view:function(t,e,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function o(t){var e=S,r=e[t>>=2],o=e[t+1];return new n(_,o,r)}bt(t,{name:r=gt(r),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},_embind_register_std_string:function(t,e){var r="std::string"===(e=gt(e));bt(t,{name:e,fromWireType:function(t){var e,n=S[t>>2],o=t+4;if(r)for(var i=o,a=0;a<=n;++a){var s=o+a;if(a==n||0==P[s]){var u=O(i,s-i);void 0===e?e=u:(e+=String.fromCharCode(0),e+=u),i=s+1}}else{var c=new Array(n);for(a=0;a<n;++a)c[a]=String.fromCharCode(P[o+a]);e=c.join("")}return ye(t),e},toWireType:function(t,e){var n;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var o="string"==typeof e;o||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||wt("Cannot pass non-string to std::string"),n=r&&o?function(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n<=127?e++:n<=2047?e+=2:n>=55296&&n<=57343?(e+=4,++r):e+=3}return e}(e):e.length;var i=he(4+n+1),a=i+4;if(S[i>>2]=n,r&&o)F(e,a,n+1);else if(o)for(var s=0;s<n;++s){var u=e.charCodeAt(s);u>255&&(ye(a),wt("String has UTF-16 code units that do not fit in 8 bits")),P[a+s]=u}else for(s=0;s<n;++s)P[a+s]=e[s];return null!==t&&t.push(ye,i),i},argPackAdvance:8,readValueFromPointer:it,destructorFunction:function(t){ye(t)}})},_embind_register_std_wstring:function(t,e,r){var n,o,i,a,s;r=gt(r),2===e?(n=ne,o=oe,a=ie,i=()=>$,s=1):4===e&&(n=ae,o=se,a=ue,i=()=>S,s=2),bt(t,{name:r,fromWireType:function(t){for(var r,o=S[t>>2],a=i(),u=t+4,c=0;c<=o;++c){var l=t+4+c*e;if(c==o||0==a[l>>s]){var f=n(u,l-u);void 0===r?r=f:(r+=String.fromCharCode(0),r+=f),u=l+e}}return ye(t),r},toWireType:function(t,n){"string"!=typeof n&&wt("Cannot pass non-string to C++ string type "+r);var i=a(n),u=he(4+i+e);return S[u>>2]=i>>s,o(n,u+4,i+e),null!==t&&t.push(ye,u),u},argPackAdvance:8,readValueFromPointer:it,destructorFunction:function(t){ye(t)}})},_embind_register_value_object:function(t,e,r,n,o,i){nt[t]={name:gt(e),rawConstructor:zt(r,n),rawDestructor:zt(o,i),fields:[]}},_embind_register_value_object_field:function(t,e,r,n,o,i,a,s,u,c){nt[t].fields.push({fieldName:gt(e),getterReturnType:r,getter:zt(n,o),getterContext:i,setterArgumentType:a,setter:zt(s,u),setterContext:c})},_embind_register_void:function(t,e){bt(t,{isVoid:!0,name:e=gt(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(t,e){}})},_emval_decref:Kt,_emval_incref:function(t){t>4&&(Yt[t].refcount+=1)},_emval_take_value:function(t,e){var r,n;void 0===(n=st[r=t])&&wt("_emval_take_value has unknown type "+Nt(r));var o=(t=n).readValueFromPointer(e);return Zt.toHandle(o)},abort:function(){G("")},emscripten_memcpy_big:function(t,e,r){P.copyWithin(t,e,e+r)},emscripten_resize_heap:function(t){var e=P.length,r=2147483648;if((t>>>=0)>r)return!1;let n=(t,e)=>t+(e-t%e)%e;for(var o=1;o<=4;o*=2){var i=e*(1+.2/o);if(i=Math.min(i,t+100663296),ce(Math.min(r,n(Math.max(t,i),65536))))return!0}return!1},fd_close:function(t){return 52},fd_seek:function(t,e,r,n,o){return 70},fd_write:function(t,e,r,n){for(var o=0,i=0;i<r;i++){var a=S[e>>2],s=S[e+4>>2];e+=8;for(var u=0;u<s;u++)fe(t,P[a+u]);o+=s}return S[n>>2]=o,0},invoke_i:function(t){var e=we();try{return et(t)()}catch(t){if(be(e),t!==t+0)throw t;_setThrew(1,0)}},invoke_ii:function(t,e){var r=we();try{return et(t)(e)}catch(t){if(be(r),t!==t+0)throw t;_setThrew(1,0)}},invoke_iii:function(t,e,r){var n=we();try{return et(t)(e,r)}catch(t){if(be(n),t!==t+0)throw t;_setThrew(1,0)}},invoke_iiii:function(t,e,r,n){var o=we();try{return et(t)(e,r,n)}catch(t){if(be(o),t!==t+0)throw t;_setThrew(1,0)}},invoke_v:function(t){var e=we();try{et(t)()}catch(t){if(be(e),t!==t+0)throw t;_setThrew(1,0)}},invoke_vi:function(t,e){var r=we();try{et(t)(e)}catch(t){if(be(r),t!==t+0)throw t;_setThrew(1,0)}},invoke_viiii:function(t,e,r,n,o){var i=we();try{et(t)(e,r,n,o)}catch(t){if(be(i),t!==t+0)throw t;_setThrew(1,0)}},invoke_viiiiii:function(t,e,r,n,o,i,a){var s=we();try{et(t)(e,r,n,o,i,a)}catch(t){if(be(s),t!==t+0)throw t;_setThrew(1,0)}},llvm_eh_typeid_for:function(t){return t}},he=(function(){var e={env:de,wasi_snapshot_preview1:de};function r(e,r){var n,o=e.exports;t.asm=o,D((g=t.asm.memory).buffer),j=t.asm.__indirect_function_table,n=t.asm.__wasm_call_ctors,I.unshift(n),function(){if(z--,t.monitorRunDependencies&&t.monitorRunDependencies(z),0==z&&(null!==V&&(clearInterval(V),V=null),N)){var e=N;N=null,e()}}()}function n(t){r(t.instance)}function i(t){return function(){if(!v&&(l||f)){if("function"==typeof fetch&&!J(M))return fetch(M,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+M+"'";return t.arrayBuffer()}).catch(function(){return X(M)});if(a)return new Promise(function(t,e){a(M,function(e){t(new Uint8Array(e))},e)})}return Promise.resolve().then(function(){return X(M)})}().then(function(t){return WebAssembly.instantiate(t,e)}).then(function(t){return t}).then(t,function(t){w("failed to asynchronously prepare wasm: "+t),G(t)})}if(z++,t.monitorRunDependencies&&t.monitorRunDependencies(z),t.instantiateWasm)try{return t.instantiateWasm(e,r)}catch(t){w("Module.instantiateWasm callback failed with error: "+t),o(t)}(v||"function"!=typeof WebAssembly.instantiateStreaming||q(M)||J(M)||p||"function"!=typeof fetch?i(n):fetch(M,{credentials:"same-origin"}).then(function(t){return WebAssembly.instantiateStreaming(t,e).then(n,function(t){return w("wasm streaming compile failed: "+t),w("falling back to ArrayBuffer instantiation"),i(n)})})).catch(o)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.__wasm_call_ctors).apply(null,arguments)},t._malloc=function(){return(he=t._malloc=t.asm.malloc).apply(null,arguments)}),ye=t._free=function(){return(ye=t._free=t.asm.free).apply(null,arguments)},ve=t.___cxa_free_exception=function(){return(ve=t.___cxa_free_exception=t.asm.__cxa_free_exception).apply(null,arguments)},ge=t.___getTypeName=function(){return(ge=t.___getTypeName=t.asm.__getTypeName).apply(null,arguments)},me=(t.__embind_initialize_bindings=function(){return(t.__embind_initialize_bindings=t.asm._embind_initialize_bindings).apply(null,arguments)},t.___errno_location=function(){return(t.___errno_location=t.asm.__errno_location).apply(null,arguments)},t.setTempRet0=function(){return(me=t.setTempRet0=t.asm.setTempRet0).apply(null,arguments)}),we=t.stackSave=function(){return(we=t.stackSave=t.asm.stackSave).apply(null,arguments)},be=t.stackRestore=function(){return(be=t.stackRestore=t.asm.stackRestore).apply(null,arguments)},_e=t.stackAlloc=function(){return(_e=t.stackAlloc=t.asm.stackAlloc).apply(null,arguments)},Te=t.___cxa_can_catch=function(){return(Te=t.___cxa_can_catch=t.asm.__cxa_can_catch).apply(null,arguments)},Pe=t.___cxa_is_pointer_type=function(){return(Pe=t.___cxa_is_pointer_type=t.asm.__cxa_is_pointer_type).apply(null,arguments)};function Ce(r){function n(){pe||(pe=!0,t.calledRun=!0,b||(K(I),e(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),function(){if(t.postRun)for("function"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;)H(t.postRun.shift());K(U)}()))}r=r||c,z>0||(function(){if(t.preRun)for("function"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)L(t.preRun.shift());K(W)}(),z>0||(t.setStatus?(t.setStatus("Running..."),setTimeout(function(){setTimeout(function(){t.setStatus("")},1),n()},1)):n()))}if(t.dynCall_ji=function(){return(t.dynCall_ji=t.asm.dynCall_ji).apply(null,arguments)},t.dynCall_iiji=function(){return(t.dynCall_iiji=t.asm.dynCall_iiji).apply(null,arguments)},t.dynCall_jiji=function(){return(t.dynCall_jiji=t.asm.dynCall_jiji).apply(null,arguments)},t.ccall=function(e,r,n,o,i){var a={string:t=>{var e=0;if(null!=t&&0!==t){var r=1+(t.length<<2);F(t,e=_e(r),r)}return e},array:t=>{var e=_e(t.length);return function(t,e){T.set(t,e)}(t,e),e}},s=function(e){return t["_"+e]}(e),u=[],c=0;if(o)for(var l=0;l<o.length;l++){var f=a[n[l]];f?(0===c&&(c=we()),u[l]=f(o[l])):u[l]=o[l]}var p=s.apply(null,u);return function(t){return 0!==c&&be(c),function(t){return"string"===r?O(t):"boolean"===r?Boolean(t):t}(t)}(p)},N=function t(){pe||Ce(),pe||(N=t)},t.preInit)for("function"==typeof t.preInit&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();return Ce(),t.ready});t.exports=o},3650:(t,e,r)=>{"use strict";t.exports=r.p+"a957c5cd315f89b6feb1.wasm"},4590:(t,e,r)=>{"use strict";r.d(e,{p:()=>f});const n=Symbol("Comlink.proxy"),o=Symbol("Comlink.endpoint"),i=Symbol("Comlink.releaseProxy"),a=Symbol("Comlink.finalizer"),s=Symbol("Comlink.thrown"),u=t=>"object"==typeof t&&null!==t||"function"==typeof t,c={canHandle:t=>u(t)&&t[n],serialize(t){const{port1:e,port2:r}=new MessageChannel;return f(t,e),[r,[r]]},deserialize:t=>(t.start(),function(t){const e=new Map;return t.addEventListener("message",function(t){const{data:r}=t;if(!r||!r.id)return;const n=e.get(r.id);if(n)try{n(r)}finally{e.delete(r.id)}}),g(t,e,[],void 0)}(t))},l=new Map([["proxy",c],["throw",{canHandle:t=>u(t)&&s in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function f(t,e=globalThis,r=["*"]){e.addEventListener("message",function o(i){if(!i||!i.data)return;if(!function(t,e){for(const r of t){if(e===r||"*"===r)return!0;if(r instanceof RegExp&&r.test(e))return!0}return!1}(r,i.origin))return void console.warn(`Invalid origin '${i.origin}' for comlink proxy`);const{id:u,type:c,path:l}=Object.assign({path:[]},i.data),d=(i.data.argumentList||[]).map(_);let h;try{const e=l.slice(0,-1).reduce((t,e)=>t[e],t),r=l.reduce((t,e)=>t[e],t);switch(c){case"GET":h=r;break;case"SET":e[l.slice(-1)[0]]=_(i.data.value),h=!0;break;case"APPLY":h=r.apply(e,d);break;case"CONSTRUCT":h=function(t){return Object.assign(t,{[n]:!0})}(new r(...d));break;case"ENDPOINT":{const{port1:e,port2:r}=new MessageChannel;f(t,r),h=function(t,e){return w.set(t,e),t}(e,[e])}break;case"RELEASE":h=void 0;break;default:return}}catch(t){h={value:t,[s]:0}}Promise.resolve(h).catch(t=>({value:t,[s]:0})).then(r=>{const[n,i]=b(r);e.postMessage(Object.assign(Object.assign({},n),{id:u}),i),"RELEASE"===c&&(e.removeEventListener("message",o),p(e),a in t&&"function"==typeof t[a]&&t[a]())}).catch(t=>{const[r,n]=b({value:new TypeError("Unserializable return value"),[s]:0});e.postMessage(Object.assign(Object.assign({},r),{id:u}),n)})}),e.start&&e.start()}function p(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function d(t){if(t)throw new Error("Proxy has been released and is not useable")}function h(t){return T(t,new Map,{type:"RELEASE"}).then(()=>{p(t)})}const y=new WeakMap,v="FinalizationRegistry"in globalThis&&new FinalizationRegistry(t=>{const e=(y.get(t)||0)-1;y.set(t,e),0===e&&h(t)});function g(t,e,r=[],n=function(){}){let a=!1;const s=new Proxy(n,{get(n,o){if(d(a),o===i)return()=>{!function(t){v&&v.unregister(t)}(s),h(t),e.clear(),a=!0};if("then"===o){if(0===r.length)return{then:()=>s};const n=T(t,e,{type:"GET",path:r.map(t=>t.toString())}).then(_);return n.then.bind(n)}return g(t,e,[...r,o])},set(n,o,i){d(a);const[s,u]=b(i);return T(t,e,{type:"SET",path:[...r,o].map(t=>t.toString()),value:s},u).then(_)},apply(n,i,s){d(a);const u=r[r.length-1];if(u===o)return T(t,e,{type:"ENDPOINT"}).then(_);if("bind"===u)return g(t,e,r.slice(0,-1));const[c,l]=m(s);return T(t,e,{type:"APPLY",path:r.map(t=>t.toString()),argumentList:c},l).then(_)},construct(n,o){d(a);const[i,s]=m(o);return T(t,e,{type:"CONSTRUCT",path:r.map(t=>t.toString()),argumentList:i},s).then(_)}});return function(t,e){const r=(y.get(e)||0)+1;y.set(e,r),v&&v.register(t,e,t)}(s,t),s}function m(t){const e=t.map(b);return[e.map(t=>t[0]),(r=e.map(t=>t[1]),Array.prototype.concat.apply([],r))];var r}const w=new WeakMap;function b(t){for(const[e,r]of l)if(r.canHandle(t)){const[n,o]=r.serialize(t);return[{type:"HANDLER",name:e,value:n},o]}return[{type:"RAW",value:t},w.get(t)||[]]}function _(t){switch(t.type){case"HANDLER":return l.get(t.name).deserialize(t.value);case"RAW":return t.value}}function T(t,e,r,n){return new Promise(o=>{const i=new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");e.set(i,o),t.start&&t.start(),t.postMessage(Object.assign({id:i},r),n)})}},6708:(t,e,r)=>{"use strict";t.exports=r.p+"031089e563a18ada8441.wasm"},7043:(t,e,r)=>{"use strict";var n=r(4590);function o(t){return(255&t)<<8|t>>8&255}var i=r(1427),a=r.n(i);const s=new URL(r(605),r.b),u={codec:void 0,decoder:void 0},c={JpegImage:void 0,decodeConfig:{}},l={jpeg:void 0,decodeConfig:{}};var f=r(9114),p=r.n(f);const d=new URL(r(9484),r.b),h={codec:void 0,decoder:void 0,decodeConfig:{}};var y=r(74),v=r.n(y);const g=new URL(r(6708),r.b),m={codec:void 0,decoder:void 0,decodeConfig:{}};var w=r(3114),b=r.n(w);const _=new URL(r(3650),r.b),T={codec:void 0,decoder:void 0,decodeConfig:{}};var P=r(7416),C=r(678),$=r(7092);const A={bilinear:function(t,e){const{rows:r,columns:n,data:o}=t,{rows:i,columns:a,data:s}=e,u=[],c=[],l=[];for(let t=0;t<a;t++){const e=t*(n-1)/(a-1);u[t]=Math.floor(e),c[t]=Math.min(u[t]+1,n-1),l[t]=e-u[t]}for(let t=0;t<i;t++){const e=t*(r-1)/(i-1),f=Math.floor(e)*n,p=Math.min(f+n,(r-1)*n),d=e-Math.floor(e),h=1-d,y=t*a;for(let t=0;t<a;t++){const e=o[f+u[t]],r=o[f+c[t]],n=o[p+u[t]],i=o[p+c[t]],a=1-l[t];s[y+t]=(e*a+r*l[t])*h+(n*a+i*l[t])*d}}return s},replicate:function(t,e){const{rows:r,columns:n,pixelData:o,samplesPerPixel:i=1}=t,{rows:a,columns:s,pixelData:u}=e,c=[];for(let t=0;t<s;t++){const e=t*(n-1)/(s-1);c[t]=Math.floor(e)*i}for(let t=0;t<a;t++){const e=t*(r-1)/(a-1),l=Math.floor(e)*n*i,f=t*s;for(let t=0;t<s;t++)for(let e=0;e<i;e++)u[f+t+e]=o[l+c[t]+e]}return u}},S={Uint8Array,Uint16Array,Int16Array,Float32Array,Uint32Array};function x(t,e,r){const n=new((0,C.A)(t,e))(r.pixelData.length);return n.set(r.pixelData,0),n}function E(t,e,r){const{rescaleSlope:n,rescaleIntercept:o,modality:i,doseGridScaling:a,suvbw:s}=r;return"PT"!==i||"number"!=typeof s||isNaN(s)?"RTDOSE"!==i||"number"!=typeof a||isNaN(a)?"number"==typeof n&&"number"==typeof o?{min:n*t+o,max:n*e+o}:{min:t,max:e}:{min:t*a,max:e*a}:{min:s*(t*n+o),max:s*(e*n+o)}}function k(t){if(!t)throw new Error("options.preScale.scalingParameters must be defined if preScale.enabled is true, and scalingParameters cannot be derived from the metadata providers.")}const R={decodeTask:({imageFrame:t,transferSyntax:e,decodeConfig:n,options:i,pixelData:f,callbackFn:y})=>async function(t,e,n,i,f,y){const w=(new Date).getTime();let R,O=null;switch(e){case"1.2.840.10008.1.2":case"1.2.840.10008.1.2.1":case"1.2.840.10008.1.2.1.99":O=async function(t,e){let r=e.buffer,n=e.byteOffset;const o=e.length;if(16===t.bitsAllocated)n%2&&(r=r.slice(n),n=0),0===t.pixelRepresentation?t.pixelData=new Uint16Array(r,n,o/2):t.pixelData=new Int16Array(r,n,o/2);else if(8===t.bitsAllocated||1===t.bitsAllocated)t.pixelData=e;else if(32===t.bitsAllocated){if(n%2&&(r=r.slice(n),n=0),t.floatPixelData||t.doubleFloatPixelData)throw new Error("Float pixel data is not supported for parsing into ImageFrame");0===t.pixelRepresentation?t.pixelData=new Uint32Array(r,n,o/4):1===t.pixelRepresentation?t.pixelData=new Int32Array(r,n,o/4):t.pixelData=new Float32Array(r,n,o/4)}return t}(t,n);break;case"1.2.840.10008.1.2.2":O=async function(t,e){if(16===t.bitsAllocated){let r=e.buffer,n=e.byteOffset;const i=e.length;n%2&&(r=r.slice(n),n=0),0===t.pixelRepresentation?t.pixelData=new Uint16Array(r,n,i/2):t.pixelData=new Int16Array(r,n,i/2);for(let e=0;e<t.pixelData.length;e++)t.pixelData[e]=o(t.pixelData[e])}else 8===t.bitsAllocated&&(t.pixelData=e);return t}(t,n);break;case"1.2.840.10008.1.2.5":O=async function(t,e){if(8===t.bitsAllocated)return t.planarConfiguration?function(t,e){const r=e,n=t.rows*t.columns,o=new ArrayBuffer(n*t.samplesPerPixel),i=new DataView(r.buffer,r.byteOffset),a=new Int8Array(r.buffer,r.byteOffset),s=new Int8Array(o);let u=0;const c=i.getInt32(0,!0);for(let t=0;t<c;++t){u=t*n;let e=i.getInt32(4*(t+1),!0),o=i.getInt32(4*(t+2),!0);0===o&&(o=r.length);const l=n*c;for(;e<o;){const t=a[e++];if(t>=0&&t<=127)for(let r=0;r<t+1&&u<l;++r)s[u]=a[e++],u++;else if(t<=-1&&t>=-127){const r=a[e++];for(let e=0;e<1-t&&u<l;++e)s[u]=r,u++}}}return t.pixelData=new Uint8Array(o),t}(t,e):function(t,e){const r=e,n=t.rows*t.columns,o=new ArrayBuffer(n*t.samplesPerPixel),i=new DataView(r.buffer,r.byteOffset),a=new Int8Array(r.buffer,r.byteOffset),s=new Int8Array(o);let u=0;const c=i.getInt32(0,!0);for(let e=0;e<c;++e){u=e;let o=i.getInt32(4*(e+1),!0),l=i.getInt32(4*(e+2),!0);0===l&&(l=r.length);const f=n*c;for(;o<l;){const e=a[o++];if(e>=0&&e<=127)for(let r=0;r<e+1&&u<f;++r)s[u]=a[o++],u+=t.samplesPerPixel;else if(e<=-1&&e>=-127){const r=a[o++];for(let n=0;n<1-e&&u<f;++n)s[u]=r,u+=t.samplesPerPixel}}}return t.pixelData=new Uint8Array(o),t}(t,e);if(16===t.bitsAllocated)return function(t,e){const r=e,n=t.rows*t.columns,o=new ArrayBuffer(n*t.samplesPerPixel*2),i=new DataView(r.buffer,r.byteOffset),a=new Int8Array(r.buffer,r.byteOffset),s=new Int8Array(o),u=i.getInt32(0,!0);for(let t=0;t<u;++t){let e=0;const o=0===t?1:0;let u=i.getInt32(4*(t+1),!0),c=i.getInt32(4*(t+2),!0);for(0===c&&(c=r.length);u<c;){const t=a[u++];if(t>=0&&t<=127)for(let r=0;r<t+1&&e<n;++r)s[2*e+o]=a[u++],e++;else if(t<=-1&&t>=-127){const r=a[u++];for(let i=0;i<1-t&&e<n;++i)s[2*e+o]=r,e++}}}return 0===t.pixelRepresentation?t.pixelData=new Uint16Array(o):t.pixelData=new Int16Array(o),t}(t,e);throw new Error("unsupported pixel format for RLE")}(t,n);break;case"1.2.840.10008.1.2.4.50":R={...t},O=async function(t,e){await function(){if(u.codec)return Promise.resolve();const t=a()({locateFile:t=>t.endsWith(".wasm")?s.toString():t});return new Promise((e,r)=>{t.then(t=>{u.codec=t,u.decoder=new t.JPEGDecoder,e()},r)})}();const r=u.decoder;r.getEncodedBuffer(t.length).set(t),r.decode();const n=r.getFrameInfo(),o=r.getDecodedBuffer(),i={columns:n.width,rows:n.height,bitsPerPixel:n.bitsPerSample,signed:e.signed,bytesPerPixel:e.bytesPerPixel,componentsPerPixel:n.componentCount},c=function(t,e){return t.isSigned?new Int8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}(n,o),l={frameInfo:n};return{...e,pixelData:c,imageInfo:i,encodeOptions:l,...l,...i}}(n,R);break;case"1.2.840.10008.1.2.4.51":O=async function(t,e){if(await(c.decodeConfig=void 0,c.JpegImage?Promise.resolve():new Promise((t,e)=>{r.e(216).then(r.bind(r,3216)).then(e=>{c.JpegImage=e.default,t()}).catch(e)})),void 0===c.JpegImage)throw new Error("No JPEG Baseline decoder loaded");const n=new c.JpegImage;return n.parse(e),n.colorTransform=!1,8===t.bitsAllocated?(t.pixelData=n.getData(t.columns,t.rows),t):16===t.bitsAllocated?(t.pixelData=n.getData16(t.columns,t.rows),t):void 0}(t,n);break;case"1.2.840.10008.1.2.4.57":case"1.2.840.10008.1.2.4.70":O=async function(t,e){if(await(l.decodeConfig=void 0,l.jpeg?Promise.resolve():new Promise((t,e)=>{r.e(232).then(r.bind(r,5232)).then(({Decoder:e})=>{const r=new e;l.jpeg=r,t()},e)})),void 0===l.jpeg)throw new Error("No JPEG Lossless decoder loaded");const n=t.bitsAllocated<=8?1:2,o=e.buffer,i=l.jpeg.decode(o,e.byteOffset,e.length,n);return 0===t.pixelRepresentation?16===t.bitsAllocated?(t.pixelData=new Uint16Array(i.buffer),t):(t.pixelData=new Uint8Array(i.buffer),t):(t.pixelData=new Int16Array(i.buffer),t)}(t,n);break;case"1.2.840.10008.1.2.4.80":case"1.2.840.10008.1.2.4.81":R={signed:1===t.pixelRepresentation,bytesPerPixel:t.bitsAllocated<=8?1:2,...t},O=async function(t,e){try{await function(){if(h.decodeConfig=void 0,h.codec)return Promise.resolve();const t=p()({locateFile:t=>t.endsWith(".wasm")?d.toString():t});return new Promise((e,r)=>{t.then(t=>{h.codec=t,h.decoder=new t.JpegLSDecoder,e()},r)})}();const r=h.decoder;r.getEncodedBuffer(t.length).set(t),r.decode();const n=r.getFrameInfo(),o=r.getInterleaveMode(),i=r.getNearLossless(),a=r.getDecodedBuffer(),s={columns:n.width,rows:n.height,bitsPerPixel:n.bitsPerSample,signed:e.signed,bytesPerPixel:e.bytesPerPixel,componentsPerPixel:n.componentCount},u=function(t,e,r){return t.bitsPerSample>8?r?new Int16Array(e.buffer,e.byteOffset,e.byteLength/2):new Uint16Array(e.buffer,e.byteOffset,e.byteLength/2):r?new Int8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}(n,a,e.signed),c={nearLossless:i,interleaveMode:o,frameInfo:n};return{...e,pixelData:u,imageInfo:s,encodeOptions:c,...c,...s}}catch(t){throw"number"==typeof(r=t)?h.codec.getExceptionMessage(r):r}var r}(n,R);break;case"1.2.840.10008.1.2.4.90":case"1.2.840.10008.1.2.4.91":R={...t},O=async function(t,e){await function(){if(m.decodeConfig=void 0,m.codec)return Promise.resolve();const t=v()({locateFile:t=>t.endsWith(".wasm")?g.toString():t});return new Promise((e,r)=>{t.then(t=>{m.codec=t,m.decoder=new t.J2KDecoder,e()},r)})}();const r=m.decoder,n=r.getEncodedBuffer(t.length);n.set(t),r.decode();const o=r.getFrameInfo(),i=r.getDecodedBuffer();new Uint8Array(i.length).set(i);const a=`x: ${r.getImageOffset().x}, y: ${r.getImageOffset().y}`,s=r.getNumDecompositions(),u=r.getNumLayers(),c=["unknown","LRCP","RLCP","RPCL","PCRL","CPRL"][r.getProgressionOrder()+1],l=r.getIsReversible(),f=`${r.getBlockDimensions().width} x ${r.getBlockDimensions().height}`,p=`${r.getTileSize().width} x ${r.getTileSize().height}`,d=`${r.getTileOffset().x}, ${r.getTileOffset().y}`,h=r.getColorSpace(),y=`${i.length.toLocaleString()} bytes`,w=`${(i.length/n.length).toFixed(2)}:1`,b={columns:o.width,rows:o.height,bitsPerPixel:o.bitsPerSample,signed:o.isSigned,bytesPerPixel:e.bytesPerPixel,componentsPerPixel:o.componentCount},_=function(t,e){return t.bitsPerSample>8?t.isSigned?new Int16Array(e.buffer,e.byteOffset,e.byteLength/2):new Uint16Array(e.buffer,e.byteOffset,e.byteLength/2):t.isSigned?new Int8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}(o,i),T={imageOffset:a,numDecompositions:s,numLayers:u,progessionOrder:c,reversible:l,blockDimensions:f,tileSize:p,tileOffset:d,colorTransform:h,decodedSize:y,compressionRatio:w};return{...e,pixelData:_,imageInfo:b,encodeOptions:T,...T,...b}}(n,R);break;case"3.2.840.10008.1.2.4.96":case"1.2.840.10008.1.2.4.201":case"1.2.840.10008.1.2.4.202":case"1.2.840.10008.1.2.4.203":R={...t},O=async function(t,e){await function(){if(T.decodeConfig=void 0,T.codec)return Promise.resolve();const t=b()({locateFile:t=>t.endsWith(".wasm")?_.toString():t});return new Promise((e,r)=>{t.then(t=>{T.codec=t,T.decoder=new t.HTJ2KDecoder,e()},r)})}();const r=new T.codec.HTJ2KDecoder,n=r.getEncodedBuffer(t.length);n.set(t);const o=e.decodeLevel||0;r.decodeSubResolution(o);const i=r.getFrameInfo();if(e.decodeLevel>0){const{width:t,height:r}=function(t,e,r){const n={width:e,height:r};for(;t>0;)n.width=Math.ceil(n.width/2),n.height=Math.ceil(n.height/2),t--;return n}(e.decodeLevel,i.width,i.height);i.width=t,i.height=r}const a=r.getDecodedBuffer();new Uint8Array(a.length).set(a);const s=`x: ${r.getImageOffset().x}, y: ${r.getImageOffset().y}`,u=r.getNumDecompositions(),c=r.getNumLayers(),l=["unknown","LRCP","RLCP","RPCL","PCRL","CPRL"][r.getProgressionOrder()+1],f=r.getIsReversible(),p=`${r.getBlockDimensions().width} x ${r.getBlockDimensions().height}`,d=`${r.getTileSize().width} x ${r.getTileSize().height}`,h=`${r.getTileOffset().x}, ${r.getTileOffset().y}`,y=`${a.length.toLocaleString()} bytes`,v=`${(a.length/n.length).toFixed(2)}:1`,g={columns:i.width,rows:i.height,bitsPerPixel:i.bitsPerSample,signed:i.isSigned,bytesPerPixel:e.bytesPerPixel,componentsPerPixel:i.componentCount};let m=function(t,e){return t.bitsPerSample>8?t.isSigned?new Int16Array(e.buffer,e.byteOffset,e.byteLength/2):new Uint16Array(e.buffer,e.byteOffset,e.byteLength/2):t.isSigned?new Int8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}(i,a);const{buffer:w,byteOffset:P,byteLength:C}=m,$=w.slice(P,P+C);m=new m.constructor($);const A={imageOffset:s,numDecompositions:u,numLayers:c,progessionOrder:l,reversible:f,blockDimensions:p,tileSize:d,tileOffset:h,decodedSize:y,compressionRatio:v};return{...e,pixelData:m,imageInfo:g,encodeOptions:A,...A,...g}}(n,R);break;default:throw new Error(`no decoder for transfer syntax ${e}`)}if(!O)throw new Error("decodePromise not defined");const F=function(t,e,r){const n=void 0!==t.pixelRepresentation&&1===t.pixelRepresentation,o=n&&void 0!==t.bitsStored?32-t.bitsStored:void 0;if(n&&void 0!==o)for(let e=0;e<t.pixelData.length;e++)t.pixelData[e]=t.pixelData[e]<<o>>o;let i=t.pixelData;t.pixelDataLength=t.pixelData.length;const{min:a,max:s}=(0,P.A)(t.pixelData),u=void 0===e.allowFloatRendering||e.allowFloatRendering;let c=(0,$.A)(t.photometricInterpretation)&&void 0===e.targetBuffer?.offset;const l=e.preScale?.enabled,f=l&&Object.values(e.preScale.scalingParameters).some(t=>"number"==typeof t&&!Number.isInteger(t)),p=!e.preScale.enabled||!u&&f,d=e.targetBuffer?.type;if(d&&e.preScale.enabled&&!p){const t=E(a,s,e.preScale.scalingParameters);c=!(0,C.r)(t.min,t.max,S[d])}i=d&&!c?function(t,e,r){const{arrayBuffer:n,type:o,offset:i=0,length:a,rows:s}=t.targetBuffer,u=r[o];if(!u)throw new Error(`target array ${o} is not supported, or doesn't exist.`);s&&s!=e.rows&&function(t,e,r){const n=function(t,e,r){const{samplesPerPixel:n}=t,{rows:o,columns:i}=e,a=o*i*n,s=new r(a),u=s.byteLength/a;return{pixelData:s,rows:o,columns:i,frameInfo:{...t.frameInfo,rows:o,columns:i},imageInfo:{...t.imageInfo,rows:o,columns:i,bytesPerPixel:u}}}(t,e,r),{scalingType:o="replicate"}=e;A[o](t,n),Object.assign(t,n),t.pixelDataLength=t.pixelData.length}(e,t.targetBuffer,u);const c=e.pixelDataLength,l=i,f=null!=a?a:c-l,p=e.pixelData;if(f!==p.length)throw new Error(`target array for image does not have the same length (${f}) as the decoded image length (${p.length}).`);const d=n?new u(n,l,f):new u(f);return d.set(p,0),d}(e,t,S):e.preScale.enabled&&!p?function(t,e,r,n){const o=t.preScale.scalingParameters;k(o);const i=E(e,r,o);return x(i.min,i.max,n)}(e,a,s,t):x(a,s,t);let h=a,y=s;if(e.preScale.enabled&&!p){const r=e.preScale.scalingParameters;k(r);const n=function(t){const{rescaleSlope:e,rescaleIntercept:r,modality:n,doseGridScaling:o,suvbw:i}=t;return"number"==typeof e&&"number"==typeof r||"RTDOSE"===n&&"number"==typeof o||"PT"===n&&"number"==typeof i}(r);if(n){!function(t,e){const r=t.length,{rescaleSlope:n,rescaleIntercept:o,suvbw:i,doseGridScaling:a}=e;if("PT"!==e.modality||"number"!=typeof i||isNaN(i))if("RTDOSE"!==e.modality||"number"!=typeof a||isNaN(a))for(let e=0;e<r;e++)t[e]=t[e]*n+o;else for(let e=0;e<r;e++)t[e]=t[e]*a;else for(let e=0;e<r;e++)t[e]=i*(t[e]*n+o)}(i,r),t.preScale={...e.preScale,scaled:!0};const n=E(a,s,r);h=n.min,y=n.max}}else p&&(t.preScale={enabled:!0,scaled:!1},h=a,y=s);t.pixelData=i,t.smallestPixelValue=h,t.largestPixelValue=y;const v=(new Date).getTime();return t.decodeTimeInMS=v-r,t}(await O,f,w);return y?.(F),F}(t,e,f,0,i,y)};(0,n.p)(R)},7092:(t,e,r)=>{"use strict";function n(t){return"RGB"===t||"PALETTE COLOR"===t||"YBR_FULL"===t||"YBR_FULL_422"===t||"YBR_PARTIAL_422"===t||"YBR_PARTIAL_420"===t||"YBR_RCT"===t||"YBR_ICT"===t}r.d(e,{A:()=>n})},7416:(t,e,r)=>{"use strict";r.d(e,{A:()=>n});const n=function(t){let e,r=t[0],n=t[0];const o=t.length;for(let i=1;i<o;i++)e=t[i],r=Math.min(r,e),n=Math.max(n,e);return{min:r,max:n}}},9114:(t,e,r)=>{var n,o=(n=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,o,i=void 0!==(t=t||{})?t:{};i.ready=new Promise(function(t,r){e=t,o=r});var a,s,u,c=Object.assign({},i),l=[],f="object"==typeof window,p="function"==typeof importScripts,d="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,h="";if(d){var y=r(6221),v=r(4457);h=p?v.dirname(h)+"/":"//",a=(t,e)=>(t=q(t)?new URL(t):v.normalize(t),y.readFileSync(t,e?void 0:"utf8")),u=t=>{var e=a(t,!0);return e.buffer||(e=new Uint8Array(e)),e},s=(t,e,r)=>{t=q(t)?new URL(t):v.normalize(t),y.readFile(t,function(t,n){t?r(t):e(n.buffer)})},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),l=process.argv.slice(2),process.on("uncaughtException",function(t){if(!(t instanceof X))throw t}),process.on("unhandledRejection",function(t){throw t}),i.inspect=function(){return"[Emscripten Module object]"}}else(f||p)&&(p?h=self.location.href:"undefined"!=typeof document&&document.currentScript&&(h=document.currentScript.src),n&&(h=n),h=0!==h.indexOf("blob:")?h.substr(0,h.replace(/[?#].*/,"").lastIndexOf("/")+1):"",a=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},p&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),s=(t,e,r)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):r()},n.onerror=r,n.send(null)});i.print||console.log.bind(console);var g,m,w=i.printErr||console.warn.bind(console);Object.assign(i,c),c=null,i.arguments&&(l=i.arguments),i.thisProgram&&i.thisProgram,i.quit&&i.quit,i.wasmBinary&&(g=i.wasmBinary),i.noExitRuntime,"object"!=typeof WebAssembly&&N("no native wasm support detected");var b,_,T,P,C,$,A,S,x,E=!1,k="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function R(t,e){return t?function(t,e,r){for(var n=e+r,o=e;t[o]&&!(o>=n);)++o;if(o-e>16&&t.buffer&&k)return k.decode(t.subarray(e,o));for(var i="";e<o;){var a=t[e++];if(128&a){var s=63&t[e++];if(192!=(224&a)){var u=63&t[e++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&t[e++])<65536)i+=String.fromCharCode(a);else{var c=a-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}(T,t,e):""}function O(t,e,r){return function(t,e,r,n){if(!(n>0))return 0;for(var o=r,i=r+n-1,a=0;a<t.length;++a){var s=t.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&t.charCodeAt(++a)),s<=127){if(r>=i)break;e[r++]=s}else if(s<=2047){if(r+1>=i)break;e[r++]=192|s>>6,e[r++]=128|63&s}else if(s<=65535){if(r+2>=i)break;e[r++]=224|s>>12,e[r++]=128|s>>6&63,e[r++]=128|63&s}else{if(r+3>=i)break;e[r++]=240|s>>18,e[r++]=128|s>>12&63,e[r++]=128|s>>6&63,e[r++]=128|63&s}}return e[r]=0,r-o}(t,T,e,r)}function F(t){b=t,i.HEAP8=_=new Int8Array(t),i.HEAP16=P=new Int16Array(t),i.HEAP32=$=new Int32Array(t),i.HEAPU8=T=new Uint8Array(t),i.HEAPU16=C=new Uint16Array(t),i.HEAPU32=A=new Uint32Array(t),i.HEAPF32=S=new Float32Array(t),i.HEAPF64=x=new Float64Array(t)}i.INITIAL_MEMORY;var D,j=[],W=[],I=[];function U(t){j.unshift(t)}function L(t){I.unshift(t)}var H,M,B=0,z=null,V=null;function N(t){i.onAbort&&i.onAbort(t),w(t="Aborted("+t+")"),E=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw o(e),e}function G(t){return t.startsWith("data:application/octet-stream;base64,")}function q(t){return t.startsWith("file://")}function J(t){try{if(t==H&&g)return new Uint8Array(g);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}catch(t){N(t)}}function X(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function Y(t){for(;t.length>0;)t.shift()(i)}function K(t){this.excPtr=t,this.ptr=t-24,this.set_type=function(t){A[this.ptr+4>>2]=t},this.get_type=function(){return A[this.ptr+4>>2]},this.set_destructor=function(t){A[this.ptr+8>>2]=t},this.get_destructor=function(){return A[this.ptr+8>>2]},this.set_refcount=function(t){$[this.ptr>>2]=t},this.set_caught=function(t){t=t?1:0,_[this.ptr+12|0]=t},this.get_caught=function(){return 0!=_[this.ptr+12|0]},this.set_rethrown=function(t){t=t?1:0,_[this.ptr+13|0]=t},this.get_rethrown=function(){return 0!=_[this.ptr+13|0]},this.init=function(t,e){this.set_adjusted_ptr(0),this.set_type(t),this.set_destructor(e),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var t=$[this.ptr>>2];$[this.ptr>>2]=t+1},this.release_ref=function(){var t=$[this.ptr>>2];return $[this.ptr>>2]=t-1,1===t},this.set_adjusted_ptr=function(t){A[this.ptr+16>>2]=t},this.get_adjusted_ptr=function(){return A[this.ptr+16>>2]},this.get_exception_ptr=function(){if(we(this.get_type()))return A[this.excPtr>>2];var t=this.get_adjusted_ptr();return 0!==t?t:this.excPtr}}G(H="charlswasm_decode.wasm")||(M=H,H=i.locateFile?i.locateFile(M,h):h+M);var Z={};function Q(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function tt(t){return this.fromWireType($[t>>2])}var et={},rt={},nt={};function ot(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=48&&e<=57?"_"+t:t}function it(t,e){return t=ot(t),new Function("body","return function "+t+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(e)}function at(t,e){var r=it(e,function(t){this.name=e,this.message=t;var r=new Error(t).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))});return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},r}var st=void 0;function ut(t){throw new st(t)}function ct(t,e,r){function n(e){var n=r(e);n.length!==t.length&&ut("Mismatched type converter count");for(var o=0;o<t.length;++o)yt(t[o],n[o])}t.forEach(function(t){nt[t]=e});var o=new Array(e.length),i=[],a=0;e.forEach((t,e)=>{rt.hasOwnProperty(t)?o[e]=rt[t]:(i.push(t),et.hasOwnProperty(t)||(et[t]=[]),et[t].push(()=>{o[e]=rt[t],++a===i.length&&n(o)}))}),0===i.length&&n(o)}function lt(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+t)}}var ft=void 0;function pt(t){for(var e="",r=t;T[r];)e+=ft[T[r++]];return e}var dt=void 0;function ht(t){throw new dt(t)}function yt(t,e,r={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=e.name;if(t||ht('type "'+n+'" must have a positive integer typeid pointer'),rt.hasOwnProperty(t)){if(r.ignoreDuplicateRegistrations)return;ht("Cannot register type '"+n+"' twice")}if(rt[t]=e,delete nt[t],et.hasOwnProperty(t)){var o=et[t];delete et[t],o.forEach(t=>t())}}function vt(t){ht(t.$$.ptrType.registeredClass.name+" instance already deleted")}var gt=!1;function mt(t){}function wt(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function bt(t,e,r){if(e===r)return t;if(void 0===r.baseClass)return null;var n=bt(t,e,r.baseClass);return null===n?null:r.downcast(n)}var _t={};var Tt=[];function Pt(){for(;Tt.length;){var t=Tt.pop();t.$$.deleteScheduled=!1,t.delete()}}var Ct=void 0;var $t={};function At(t,e){return e.ptrType&&e.ptr||ut("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&ut("Both smartPtrType and smartPtr must be specified"),e.count={value:1},St(Object.create(t,{$$:{value:e}}))}function St(t){return"undefined"==typeof FinalizationRegistry?(St=t=>t,t):(gt=new FinalizationRegistry(t=>{wt(t.$$)}),St=t=>{var e=t.$$;if(e.smartPtr){var r={$$:e};gt.register(t,r,t)}return t},mt=t=>gt.unregister(t),St(t))}function xt(){}function Et(t,e,r){if(void 0===t[e].overloadTable){var n=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||ht("Function '"+r+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+t[e].overloadTable+")!"),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[n.argCount]=n}}function kt(t,e,r){i.hasOwnProperty(t)?((void 0===r||void 0!==i[t].overloadTable&&void 0!==i[t].overloadTable[r])&&ht("Cannot register public name '"+t+"' twice"),Et(i,t,t),i.hasOwnProperty(r)&&ht("Cannot register multiple overloads of a function with the same number of arguments ("+r+")!"),i[t].overloadTable[r]=e):(i[t]=e,void 0!==r&&(i[t].numArguments=r))}function Rt(t,e,r,n,o,i,a,s){this.name=t,this.constructor=e,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function Ot(t,e,r){for(;e!==r;)e.upcast||ht("Expected null or instance of "+r.name+", got an instance of "+e.name),t=e.upcast(t),e=e.baseClass;return t}function Ft(t,e){if(null===e)return this.isReference&&ht("null is not a valid "+this.name),0;e.$$||ht('Cannot pass "'+Yt(e)+'" as a '+this.name),e.$$.ptr||ht("Cannot pass deleted object as a pointer of type "+this.name);var r=e.$$.ptrType.registeredClass;return Ot(e.$$.ptr,r,this.registeredClass)}function Dt(t,e){var r;if(null===e)return this.isReference&&ht("null is not a valid "+this.name),this.isSmartPointer?(r=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,r),r):0;e.$$||ht('Cannot pass "'+Yt(e)+'" as a '+this.name),e.$$.ptr||ht("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&e.$$.ptrType.isConst&&ht("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);var n=e.$$.ptrType.registeredClass;if(r=Ot(e.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&ht("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?r=e.$$.smartPtr:ht("Cannot convert argument of type "+(e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:r=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)r=e.$$.smartPtr;else{var o=e.clone();r=this.rawShare(r,Xt.toHandle(function(){o.delete()})),null!==t&&t.push(this.rawDestructor,r)}break;default:ht("Unsupporting sharing policy")}return r}function jt(t,e){if(null===e)return this.isReference&&ht("null is not a valid "+this.name),0;e.$$||ht('Cannot pass "'+Yt(e)+'" as a '+this.name),e.$$.ptr||ht("Cannot pass deleted object as a pointer of type "+this.name),e.$$.ptrType.isConst&&ht("Cannot convert argument of type "+e.$$.ptrType.name+" to parameter type "+this.name);var r=e.$$.ptrType.registeredClass;return Ot(e.$$.ptr,r,this.registeredClass)}function Wt(t,e,r,n,o,i,a,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=r,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==e.baseClass?this.toWireType=Dt:n?(this.toWireType=Ft,this.destructorFunction=null):(this.toWireType=jt,this.destructorFunction=null)}function It(t,e,r){i.hasOwnProperty(t)||ut("Replacing nonexistant public symbol"),void 0!==i[t].overloadTable&&void 0!==r?i[t].overloadTable[r]=e:(i[t]=e,i[t].argCount=r)}var Ut=[];function Lt(t){var e=Ut[t];return e||(t>=Ut.length&&(Ut.length=t+1),Ut[t]=e=D.get(t)),e}function Ht(t,e){var r,n,o,a=(t=pt(t)).includes("j")?(r=t,n=e,o=[],function(){return o.length=0,Object.assign(o,arguments),function(t,e,r){return t.includes("j")?function(t,e,r){var n=i["dynCall_"+t];return r&&r.length?n.apply(null,[e].concat(r)):n.call(null,e)}(t,e,r):Lt(e).apply(null,r)}(r,n,o)}):Lt(e);return"function"!=typeof a&&ht("unknown function pointer with signature "+t+": "+e),a}var Mt=void 0;function Bt(t){var e=he(t),r=pt(e);return ye(e),r}function zt(t,e){var r=[],n={};throw e.forEach(function t(e){n[e]||rt[e]||(nt[e]?nt[e].forEach(t):(r.push(e),n[e]=!0))}),new Mt(t+": "+r.map(Bt).join([", "]))}function Vt(t,e){for(var r=[],n=0;n<t;n++)r.push(A[e+4*n>>2]);return r}function Nt(t,e,r,n,o){var i=e.length;i<2&&ht("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==e[1]&&null!==r,s=!1,u=1;u<e.length;++u)if(null!==e[u]&&void 0===e[u].destructorFunction){s=!0;break}var c="void"!==e[0].name,l="",f="";for(u=0;u<i-2;++u)l+=(0!==u?", ":"")+"arg"+u,f+=(0!==u?", ":"")+"arg"+u+"Wired";var p="return function "+ot(t)+"("+l+") {\nif (arguments.length !== "+(i-2)+") {\nthrowBindingError('function "+t+" called with ' + arguments.length + ' arguments, expected "+(i-2)+" args!');\n}\n";s&&(p+="var destructors = [];\n");var d=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],y=[ht,n,o,Q,e[0],e[1]];for(a&&(p+="var thisWired = classParam.toWireType("+d+", this);\n"),u=0;u<i-2;++u)p+="var arg"+u+"Wired = argType"+u+".toWireType("+d+", arg"+u+"); // "+e[u+2].name+"\n",h.push("argType"+u),y.push(e[u+2]);if(a&&(f="thisWired"+(f.length>0?", ":"")+f),p+=(c?"var rv = ":"")+"invoker(fn"+(f.length>0?", ":"")+f+");\n",s)p+="runDestructors(destructors);\n";else for(u=a?1:2;u<e.length;++u){var v=1===u?"thisWired":"arg"+(u-2)+"Wired";null!==e[u].destructorFunction&&(p+=v+"_dtor("+v+"); // "+e[u].name+"\n",h.push(v+"_dtor"),y.push(e[u].destructorFunction))}return c&&(p+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),p+="}\n",h.push(p),function(t,e){if(!(t instanceof Function))throw new TypeError("new_ called with constructor type "+typeof t+" which is not a function");var r=it(t.name||"unknownFunctionName",function(){});r.prototype=t.prototype;var n=new r,o=t.apply(n,e);return o instanceof Object?o:n}(Function,h).apply(null,y)}var Gt=[],qt=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Jt(t){t>4&&0===--qt[t].refcount&&(qt[t]=void 0,Gt.push(t))}var Xt={toValue:t=>(t||ht("Cannot use deleted val. handle = "+t),qt[t].value),toHandle:t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var e=Gt.length?Gt.pop():qt.length;return qt[e]={refcount:1,value:t},e}}};function Yt(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function Kt(t,e){switch(e){case 2:return function(t){return this.fromWireType(S[t>>2])};case 3:return function(t){return this.fromWireType(x[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function Zt(t,e,r){switch(e){case 0:return r?function(t){return _[t]}:function(t){return T[t]};case 1:return r?function(t){return P[t>>1]}:function(t){return C[t>>1]};case 2:return r?function(t){return $[t>>2]}:function(t){return A[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var Qt="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function te(t,e){for(var r=t,n=r>>1,o=n+e/2;!(n>=o)&&C[n];)++n;if((r=n<<1)-t>32&&Qt)return Qt.decode(T.subarray(t,r));for(var i="",a=0;!(a>=e/2);++a){var s=P[t+2*a>>1];if(0==s)break;i+=String.fromCharCode(s)}return i}function ee(t,e,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=e,o=(r-=2)<2*t.length?r/2:t.length,i=0;i<o;++i){var a=t.charCodeAt(i);P[e>>1]=a,e+=2}return P[e>>1]=0,e-n}function re(t){return 2*t.length}function ne(t,e){for(var r=0,n="";!(r>=e/4);){var o=$[t+4*r>>2];if(0==o)break;if(++r,o>=65536){var i=o-65536;n+=String.fromCharCode(55296|i>>10,56320|1023&i)}else n+=String.fromCharCode(o)}return n}function oe(t,e,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=e,o=n+r-4,i=0;i<t.length;++i){var a=t.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++i)),$[e>>2]=a,(e+=4)+4>o)break}return $[e>>2]=0,e-n}function ie(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n>=55296&&n<=57343&&++r,e+=4}return e}var ae={};function se(){return"object"==typeof globalThis?globalThis:Function("return this")()}function ue(t,e){var r=rt[t];return void 0===r&&ht(e+" has unknown type "+Bt(t)),r}var ce={};function le(t){try{return m.grow(t-b.byteLength+65535>>>16),F(m.buffer),1}catch(t){}}st=i.InternalError=at(Error,"InternalError"),function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);ft=t}(),dt=i.BindingError=at(Error,"BindingError"),xt.prototype.isAliasOf=function(t){if(!(this instanceof xt))return!1;if(!(t instanceof xt))return!1;for(var e=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=t.$$.ptrType.registeredClass,o=t.$$.ptr;e.baseClass;)r=e.upcast(r),e=e.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return e===n&&r===o},xt.prototype.clone=function(){if(this.$$.ptr||vt(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=St(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},xt.prototype.delete=function(){this.$$.ptr||vt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&ht("Object already scheduled for deletion"),mt(this),wt(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},xt.prototype.isDeleted=function(){return!this.$$.ptr},xt.prototype.deleteLater=function(){return this.$$.ptr||vt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&ht("Object already scheduled for deletion"),Tt.push(this),1===Tt.length&&Ct&&Ct(Pt),this.$$.deleteScheduled=!0,this},i.getInheritedInstanceCount=function(){return Object.keys($t).length},i.getLiveInheritedInstances=function(){var t=[];for(var e in $t)$t.hasOwnProperty(e)&&t.push($t[e]);return t},i.flushPendingDeletes=Pt,i.setDelayFunction=function(t){Ct=t,Tt.length&&Ct&&Ct(Pt)},Wt.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},Wt.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},Wt.prototype.argPackAdvance=8,Wt.prototype.readValueFromPointer=tt,Wt.prototype.deleteObject=function(t){null!==t&&t.delete()},Wt.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var r=function(t,e){return e=function(t,e){for(void 0===e&&ht("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}(t,e),$t[e]}(this.registeredClass,e);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=e,r.$$.smartPtr=t,r.clone();var n=r.clone();return this.destructor(t),n}function o(){return this.isSmartPointer?At(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):At(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var i,a=this.registeredClass.getActualType(e),s=_t[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var u=bt(e,this.registeredClass,i.registeredClass);return null===u?o.call(this):this.isSmartPointer?At(i.registeredClass.instancePrototype,{ptrType:i,ptr:u,smartPtrType:this,smartPtr:t}):At(i.registeredClass.instancePrototype,{ptrType:i,ptr:u})},Mt=i.UnboundTypeError=at(Error,"UnboundTypeError"),i.count_emval_handles=function(){for(var t=0,e=5;e<qt.length;++e)void 0!==qt[e]&&++t;return t},i.get_first_emval=function(){for(var t=5;t<qt.length;++t)if(void 0!==qt[t])return qt[t];return null};var fe,pe={h:function(t,e,r){throw new K(t).init(e,r),t},q:function(t){var e=Z[t];delete Z[t];var r=e.rawConstructor,n=e.rawDestructor,o=e.fields;ct([t],o.map(t=>t.getterReturnType).concat(o.map(t=>t.setterArgumentType)),t=>{var i={};return o.forEach((e,r)=>{var n=e.fieldName,a=t[r],s=e.getter,u=e.getterContext,c=t[r+o.length],l=e.setter,f=e.setterContext;i[n]={read:t=>a.fromWireType(s(u,t)),write:(t,e)=>{var r=[];l(f,t,c.toWireType(r,e)),Q(r)}}}),[{name:e.name,fromWireType:function(t){var e={};for(var r in i)e[r]=i[r].read(t);return n(t),e},toWireType:function(t,e){for(var o in i)if(!(o in e))throw new TypeError('Missing field:  "'+o+'"');var a=r();for(o in i)i[o].write(a,e[o]);return null!==t&&t.push(n,a),a},argPackAdvance:8,readValueFromPointer:tt,destructorFunction:n}]})},r:function(t,e,r,n,o){},w:function(t,e,r,n,o){var i=lt(r);yt(t,{name:e=pt(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:o},argPackAdvance:8,readValueFromPointer:function(t){var n;if(1===r)n=_;else if(2===r)n=P;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+e);n=$}return this.fromWireType(n[t>>i])},destructorFunction:null})},p:function(t,e,r,n,o,i,a,s,u,c,l,f,p){l=pt(l),i=Ht(o,i),s&&(s=Ht(a,s)),c&&(c=Ht(u,c)),p=Ht(f,p);var d=ot(l);kt(d,function(){zt("Cannot construct "+l+" due to unbound types",[n])}),ct([t,e,r],n?[n]:[],function(e){var r,o;e=e[0],o=n?(r=e.registeredClass).instancePrototype:xt.prototype;var a=it(d,function(){if(Object.getPrototypeOf(this)!==u)throw new dt("Use 'new' to construct "+l);if(void 0===f.constructor_body)throw new dt(l+" has no accessible constructor");var t=f.constructor_body[arguments.length];if(void 0===t)throw new dt("Tried to invoke ctor of "+l+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(f.constructor_body).toString()+") parameters instead!");return t.apply(this,arguments)}),u=Object.create(o,{constructor:{value:a}});a.prototype=u;var f=new Rt(l,a,u,p,r,i,s,c),h=new Wt(l,f,!0,!1,!1),y=new Wt(l+"*",f,!1,!1,!1),v=new Wt(l+" const*",f,!1,!0,!1);return _t[t]={pointerType:y,constPointerType:v},It(d,a),[h,y,v]})},o:function(t,e,r,n,o,i){e>0||N(undefined);var a=Vt(e,r);o=Ht(n,o),ct([],[t],function(t){var r="constructor "+(t=t[0]).name;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new dt("Cannot register multiple constructors with identical number of parameters ("+(e-1)+") for class '"+t.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return t.registeredClass.constructor_body[e-1]=()=>{zt("Cannot construct "+t.name+" due to unbound types",a)},ct([],a,function(n){return n.splice(1,0,null),t.registeredClass.constructor_body[e-1]=Nt(r,n,null,o,i),[]}),[]})},c:function(t,e,r,n,o,i,a,s){var u=Vt(r,n);e=pt(e),i=Ht(o,i),ct([],[t],function(t){var n=(t=t[0]).name+"."+e;function o(){zt("Cannot call "+n+" due to unbound types",u)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var c=t.registeredClass.instancePrototype,l=c[e];return void 0===l||void 0===l.overloadTable&&l.className!==t.name&&l.argCount===r-2?(o.argCount=r-2,o.className=t.name,c[e]=o):(Et(c,e,n),c[e].overloadTable[r-2]=o),ct([],u,function(o){var s=Nt(n,o,t,i,a);return void 0===c[e].overloadTable?(s.argCount=r-2,c[e]=s):c[e].overloadTable[r-2]=s,[]}),[]})},v:function(t,e){yt(t,{name:e=pt(e),fromWireType:function(t){var e=Xt.toValue(t);return Jt(t),e},toWireType:function(t,e){return Xt.toHandle(e)},argPackAdvance:8,readValueFromPointer:tt,destructorFunction:null})},k:function(t,e,r){var n=lt(r);yt(t,{name:e=pt(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:Kt(e,n),destructorFunction:null})},e:function(t,e,r,n,o,i){var a=Vt(e,r);t=pt(t),o=Ht(n,o),kt(t,function(){zt("Cannot call "+t+" due to unbound types",a)},e-1),ct([],a,function(r){var n=[r[0],null].concat(r.slice(1));return It(t,Nt(t,n,null,o,i),e-1),[]})},b:function(t,e,r,n,o){e=pt(e),-1===o&&(o=4294967295);var i=lt(r),a=t=>t;if(0===n){var s=32-8*r;a=t=>t<<s>>>s}var u=e.includes("unsigned");yt(t,{name:e,fromWireType:a,toWireType:u?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:Zt(e,i,0!==n),destructorFunction:null})},a:function(t,e,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function o(t){var e=A,r=e[t>>=2],o=e[t+1];return new n(b,o,r)}yt(t,{name:r=pt(r),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},j:function(t,e){var r="std::string"===(e=pt(e));yt(t,{name:e,fromWireType:function(t){var e,n=A[t>>2],o=t+4;if(r)for(var i=o,a=0;a<=n;++a){var s=o+a;if(a==n||0==T[s]){var u=R(i,s-i);void 0===e?e=u:(e+=String.fromCharCode(0),e+=u),i=s+1}}else{var c=new Array(n);for(a=0;a<n;++a)c[a]=String.fromCharCode(T[o+a]);e=c.join("")}return ye(t),e},toWireType:function(t,e){var n;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var o="string"==typeof e;o||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||ht("Cannot pass non-string to std::string"),n=r&&o?function(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n<=127?e++:n<=2047?e+=2:n>=55296&&n<=57343?(e+=4,++r):e+=3}return e}(e):e.length;var i=de(4+n+1),a=i+4;if(A[i>>2]=n,r&&o)O(e,a,n+1);else if(o)for(var s=0;s<n;++s){var u=e.charCodeAt(s);u>255&&(ye(a),ht("String has UTF-16 code units that do not fit in 8 bits")),T[a+s]=u}else for(s=0;s<n;++s)T[a+s]=e[s];return null!==t&&t.push(ye,i),i},argPackAdvance:8,readValueFromPointer:tt,destructorFunction:function(t){ye(t)}})},g:function(t,e,r){var n,o,i,a,s;r=pt(r),2===e?(n=te,o=ee,a=re,i=()=>C,s=1):4===e&&(n=ne,o=oe,a=ie,i=()=>A,s=2),yt(t,{name:r,fromWireType:function(t){for(var r,o=A[t>>2],a=i(),u=t+4,c=0;c<=o;++c){var l=t+4+c*e;if(c==o||0==a[l>>s]){var f=n(u,l-u);void 0===r?r=f:(r+=String.fromCharCode(0),r+=f),u=l+e}}return ye(t),r},toWireType:function(t,n){"string"!=typeof n&&ht("Cannot pass non-string to C++ string type "+r);var i=a(n),u=de(4+i+e);return A[u>>2]=i>>s,o(n,u+4,i+e),null!==t&&t.push(ye,u),u},argPackAdvance:8,readValueFromPointer:tt,destructorFunction:function(t){ye(t)}})},u:function(t,e,r,n,o,i){Z[t]={name:pt(e),rawConstructor:Ht(r,n),rawDestructor:Ht(o,i),fields:[]}},d:function(t,e,r,n,o,i,a,s,u,c){Z[t].fields.push({fieldName:pt(e),getterReturnType:r,getter:Ht(n,o),getterContext:i,setterArgumentType:a,setter:Ht(s,u),setterContext:c})},x:function(t,e){yt(t,{isVoid:!0,name:e=pt(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(t,e){}})},i:Jt,m:function(t){return 0===t?Xt.toHandle(se()):(t=void 0===(r=ae[e=t])?pt(e):r,Xt.toHandle(se()[t]));var e,r},l:function(t){t>4&&(qt[t].refcount+=1)},y:function(t,e,r,n){t=Xt.toValue(t);var o=ce[e];return o||(o=function(t){for(var e="",r=0;r<t;++r)e+=(0!==r?", ":"")+"arg"+r;var n="return function emval_allocator_"+t+"(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";for(r=0;r<t;++r)n+="var argType"+r+" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter "+r+"');\nvar arg"+r+" = argType"+r+".readValueFromPointer(args);\nargs += argType"+r+"['argPackAdvance'];\nargTypes += 4;\n";return n+="var obj = new constructor("+e+");\nreturn valueToHandle(obj);\n}\n",new Function("requireRegisteredType","Module","valueToHandle","getMemory",n)(ue,i,Xt.toHandle,()=>A)}(e),ce[e]=o),o(t,r,n)},n:function(t,e){var r=(t=ue(t,"_emval_take_value")).readValueFromPointer(e);return Xt.toHandle(r)},f:function(){N("")},t:function(t,e,r){T.copyWithin(t,e,e+r)},s:function(t){var e=T.length,r=2147483648;if((t>>>=0)>r)return!1;let n=(t,e)=>t+(e-t%e)%e;for(var o=1;o<=4;o*=2){var i=e*(1+.2/o);if(i=Math.min(i,t+100663296),le(Math.min(r,n(Math.max(t,i),65536))))return!0}return!1}},de=(function(){var t={a:pe};function e(t,e){var r,n=t.exports;i.asm=n,F((m=i.asm.z).buffer),D=i.asm.C,r=i.asm.A,W.unshift(r),function(){if(B--,i.monitorRunDependencies&&i.monitorRunDependencies(B),0==B&&(null!==z&&(clearInterval(z),z=null),V)){var t=V;V=null,t()}}()}function r(t){e(t.instance)}function n(e){return function(){if(!g&&(f||p)){if("function"==typeof fetch&&!q(H))return fetch(H,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+H+"'";return t.arrayBuffer()}).catch(function(){return J(H)});if(s)return new Promise(function(t,e){s(H,function(e){t(new Uint8Array(e))},e)})}return Promise.resolve().then(function(){return J(H)})}().then(function(e){return WebAssembly.instantiate(e,t)}).then(function(t){return t}).then(e,function(t){w("failed to asynchronously prepare wasm: "+t),N(t)})}if(B++,i.monitorRunDependencies&&i.monitorRunDependencies(B),i.instantiateWasm)try{return i.instantiateWasm(t,e)}catch(t){w("Module.instantiateWasm callback failed with error: "+t),o(t)}(g||"function"!=typeof WebAssembly.instantiateStreaming||G(H)||q(H)||d||"function"!=typeof fetch?n(r):fetch(H,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,t).then(r,function(t){return w("wasm streaming compile failed: "+t),w("falling back to ArrayBuffer instantiation"),n(r)})})).catch(o)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.A).apply(null,arguments)},i._malloc=function(){return(de=i._malloc=i.asm.B).apply(null,arguments)}),he=i.___getTypeName=function(){return(he=i.___getTypeName=i.asm.D).apply(null,arguments)},ye=(i.__embind_initialize_bindings=function(){return(i.__embind_initialize_bindings=i.asm.E).apply(null,arguments)},i._free=function(){return(ye=i._free=i.asm.F).apply(null,arguments)}),ve=i.stackSave=function(){return(ve=i.stackSave=i.asm.G).apply(null,arguments)},ge=i.stackRestore=function(){return(ge=i.stackRestore=i.asm.H).apply(null,arguments)},me=i.stackAlloc=function(){return(me=i.stackAlloc=i.asm.I).apply(null,arguments)},we=i.___cxa_is_pointer_type=function(){return(we=i.___cxa_is_pointer_type=i.asm.J).apply(null,arguments)};function be(t){function r(){fe||(fe=!0,i.calledRun=!0,E||(Y(W),e(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)L(i.postRun.shift());Y(I)}()))}t=t||l,B>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)U(i.preRun.shift());Y(j)}(),B>0||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),r()},1)):r()))}if(i.ccall=function(t,e,r,n,o){var a={string:t=>{var e=0;if(null!=t&&0!==t){var r=1+(t.length<<2);O(t,e=me(r),r)}return e},array:t=>{var e=me(t.length);return function(t,e){_.set(t,e)}(t,e),e}},s=function(t){return i["_"+t]}(t),u=[],c=0;if(n)for(var l=0;l<n.length;l++){var f=a[r[l]];f?(0===c&&(c=ve()),u[l]=f(n[l])):u[l]=n[l]}var p=s.apply(null,u);return function(t){return 0!==c&&ge(c),function(t){return"string"===e?R(t):"boolean"===e?Boolean(t):t}(t)}(p)},V=function t(){fe||be(),fe||(V=t)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return be(),t.ready});t.exports=o},9484:(t,e,r)=>{"use strict";t.exports=r.p+"5004fdc02f329ce53b69.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,