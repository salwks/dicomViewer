/*! For license information please see 718.bundle.js.LICENSE.txt */
(self.webpackChunkcornerstone3d_viewer=self.webpackChunkcornerstone3d_viewer||[]).push([[718],{41:(e,t,n)=>{"use strict";var r=n(655),o=n(8068),a=n(9675),i=n(5795);e.exports=function(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new a("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new a("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new a("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new a("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new a("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new a("`loose`, if provided, must be a boolean");var s=arguments.length>3?arguments[3]:null,l=arguments.length>4?arguments[4]:null,c=arguments.length>5?arguments[5]:null,u=arguments.length>6&&arguments[6],d=!!i&&i(e,t);if(r)r(e,t,{configurable:null===c&&d?d.configurable:!c,enumerable:null===s&&d?d.enumerable:!s,value:n,writable:null===l&&d?d.writable:!l});else{if(!u&&(s||l||c))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=n}}},170:(e,t,n)=>{"use strict";var r=n(8452),o=n(7820),a=n(5323),i=n(6061),s=a(),l=function(){return s};r(l,{getPolyfill:a,implementation:o,shim:i}),e.exports=l},592:(e,t,n)=>{"use strict";var r=n(655),o=function(){return!!r};o.hasArrayLengthDefineBug=function(){if(!r)return null;try{return 1!==r([],"length",{value:1}).length}catch(e){return!0}},e.exports=o},655:e=>{"use strict";var t=Object.defineProperty||!1;if(t)try{t({},"a",{value:1})}catch(e){t=!1}e.exports=t},1093:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var n=t.call(e),r="[object Arguments]"===n;return r||(r="[object Array]"!==n&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),r}},1189:(e,t,n)=>{"use strict";var r=Array.prototype.slice,o=n(1093),a=Object.keys,i=a?function(e){return a(e)}:n(8875),s=Object.keys;i.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return o(e)?s(r.call(e)):s(e)})}else Object.keys=i;return Object.keys||i},e.exports=i},2017:e=>{"use strict";e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,o,a;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(o=r;0!==o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(a=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=r;0!==o--;)if(!Object.prototype.hasOwnProperty.call(n,a[o]))return!1;for(o=r;0!==o--;){var i=a[o];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n}},3031:function(e,t,n){var r;!function(e,o){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new a(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&i(r,n),o.state=function(){return i(n,{})}),o}o&&o.exports?o.exports=s:n.amdD&&n.amdO?void 0===(r=function(){return s}.call(t,n,t,o))||(o.exports=r):this.xorwow=s}(0,e=n.nmd(e),n.amdD)},3181:function(e,t,n){var r;!function(e,o){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new a(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&i(r,n),o.state=function(){return i(n,{})}),o}o&&o.exports?o.exports=s:n.amdD&&n.amdO?void 0===(r=function(){return s}.call(t,n,t,o))||(o.exports=r):this.xor128=s}(0,e=n.nmd(e),n.amdD)},3717:function(e,t,n){var r;!function(e,o){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,o=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^o,t.a=o-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new a(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&i(r,n),o.state=function(){return i(n,{})}),o}o&&o.exports?o.exports=s:n.amdD&&n.amdO?void 0===(r=function(){return s}.call(t,n,t,o))||(o.exports=r):this.tychei=s}(0,e=n.nmd(e),n.amdD)},4801:function(e,t,n){var r;!function(o,a,i){var s,l=256,c=i.pow(l,6),u=i.pow(2,52),d=2*u,m=255;function g(e,t,n){var r=[],m=y(p((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(a)]}}():e,3),r),g=new f(r),v=function(){for(var e=g.g(6),t=c,n=0;e<u;)e=(e+n)*l,t*=l,n=g.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return v.int32=function(){return 0|g.g(4)},v.quick=function(){return g.g(4)/4294967296},v.double=v,y(b(g.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&h(r,g),e.state=function(){return h(g,{})}),n?(i.random=e,t):e})(v,m,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,r=this,o=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);o<l;)i[o]=o++;for(o=0;o<l;o++)i[o]=i[a=m&a+e[o%n]+(t=i[o])],i[a]=t;(r.g=function(e){for(var t,n=0,o=r.i,a=r.j,i=r.S;e--;)t=i[o=m&o+1],n=n*l+i[m&(i[o]=i[a=m&a+t])+(i[a]=t)];return r.i=o,r.j=a,n})(l)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var n,r=[],o=typeof e;if(t&&"object"==o)for(n in e)try{r.push(p(e[n],t-1))}catch(e){}return r.length?r:"string"==o?e:e+"\0"}function y(e,t){for(var n,r=e+"",o=0;o<r.length;)t[m&o]=m&(n^=19*t[m&o])+r.charCodeAt(o++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),a),e.exports){e.exports=g;try{s=n(1234)}catch(e){}}else void 0===(r=function(){return g}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},5323:(e,t,n)=>{"use strict";var r=n(7820);e.exports=function(){return"object"==typeof n.g&&n.g&&n.g.Math===Math&&n.g.Array===Array?n.g:r}},5795:(e,t,n)=>{"use strict";var r=n(6549);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},6061:(e,t,n)=>{"use strict";var r=n(8452),o=n(5323);e.exports=function(){var e=o();if(r.supportsDescriptors){var t=Object.getOwnPropertyDescriptor(e,"globalThis");t&&(!t.configurable||!t.enumerable&&t.writable&&globalThis===e)||Object.defineProperty(e,"globalThis",{configurable:!0,enumerable:!1,value:e,writable:!0})}else"object"==typeof globalThis&&globalThis===e||(e.globalThis=e);return e}},6549:e=>{"use strict";e.exports=Object.getOwnPropertyDescriptor},6718:(e,t,n)=>{"use strict";var r={};n.r(r),n.d(r,{NC:()=>x,QW:()=>ee});var o={};n.r(o),n.d(o,{ov:()=>ue});const a=Symbol("Comlink.proxy"),i=Symbol("Comlink.endpoint"),s=Symbol("Comlink.releaseProxy"),l=Symbol("Comlink.finalizer"),c=Symbol("Comlink.thrown"),u=e=>"object"==typeof e&&null!==e||"function"==typeof e,d={canHandle:e=>u(e)&&e[a],serialize(e){const{port1:t,port2:n}=new MessageChannel;return g(e,t),[n,[n]]},deserialize:e=>(e.start(),function(e){const t=new Map;return e.addEventListener("message",function(e){const{data:n}=e;if(!n||!n.id)return;const r=t.get(n.id);if(r)try{r(n)}finally{t.delete(n.id)}}),v(e,t,[],void 0)}(e))},m=new Map([["proxy",d],["throw",{canHandle:e=>u(e)&&c in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function g(e,t=globalThis,n=["*"]){t.addEventListener("message",function r(o){if(!o||!o.data)return;if(!function(e,t){for(const n of e){if(t===n||"*"===n)return!0;if(n instanceof RegExp&&n.test(t))return!0}return!1}(n,o.origin))return void console.warn(`Invalid origin '${o.origin}' for comlink proxy`);const{id:i,type:s,path:u}=Object.assign({path:[]},o.data),d=(o.data.argumentList||[]).map(O);let m;try{const t=u.slice(0,-1).reduce((e,t)=>e[t],e),n=u.reduce((e,t)=>e[t],e);switch(s){case"GET":m=n;break;case"SET":t[u.slice(-1)[0]]=O(o.data.value),m=!0;break;case"APPLY":m=n.apply(t,d);break;case"CONSTRUCT":m=function(e){return Object.assign(e,{[a]:!0})}(new n(...d));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;g(e,n),m=function(e,t){return E.set(e,t),e}(t,[t])}break;case"RELEASE":m=void 0;break;default:return}}catch(e){m={value:e,[c]:0}}Promise.resolve(m).catch(e=>({value:e,[c]:0})).then(n=>{const[o,a]=C(n);t.postMessage(Object.assign(Object.assign({},o),{id:i}),a),"RELEASE"===s&&(t.removeEventListener("message",r),f(t),l in e&&"function"==typeof e[l]&&e[l]())}).catch(e=>{const[n,r]=C({value:new TypeError("Unserializable return value"),[c]:0});t.postMessage(Object.assign(Object.assign({},n),{id:i}),r)})}),t.start&&t.start()}function f(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function h(e){if(e)throw new Error("Proxy has been released and is not useable")}function p(e){return A(e,new Map,{type:"RELEASE"}).then(()=>{f(e)})}const y=new WeakMap,b="FinalizationRegistry"in globalThis&&new FinalizationRegistry(e=>{const t=(y.get(e)||0)-1;y.set(e,t),0===t&&p(e)});function v(e,t,n=[],r=function(){}){let o=!1;const a=new Proxy(r,{get(r,i){if(h(o),i===s)return()=>{!function(e){b&&b.unregister(e)}(a),p(e),t.clear(),o=!0};if("then"===i){if(0===n.length)return{then:()=>a};const r=A(e,t,{type:"GET",path:n.map(e=>e.toString())}).then(O);return r.then.bind(r)}return v(e,t,[...n,i])},set(r,a,i){h(o);const[s,l]=C(i);return A(e,t,{type:"SET",path:[...n,a].map(e=>e.toString()),value:s},l).then(O)},apply(r,a,s){h(o);const l=n[n.length-1];if(l===i)return A(e,t,{type:"ENDPOINT"}).then(O);if("bind"===l)return v(e,t,n.slice(0,-1));const[c,u]=I(s);return A(e,t,{type:"APPLY",path:n.map(e=>e.toString()),argumentList:c},u).then(O)},construct(r,a){h(o);const[i,s]=I(a);return A(e,t,{type:"CONSTRUCT",path:n.map(e=>e.toString()),argumentList:i},s).then(O)}});return function(e,t){const n=(y.get(t)||0)+1;y.set(t,n),b&&b.register(e,t,e)}(a,e),a}function I(e){const t=e.map(C);return[t.map(e=>e[0]),(n=t.map(e=>e[1]),Array.prototype.concat.apply([],n))];var n}const E=new WeakMap;function C(e){for(const[t,n]of m)if(n.canHandle(e)){const[r,o]=n.serialize(e);return[{type:"HANDLER",name:t,value:r},o]}return[{type:"RAW",value:e},E.get(e)||[]]}function O(e){switch(e.type){case"HANDLER":return m.get(e.name).deserialize(e.value);case"RAW":return e.value}}function A(e,t,n,r){return new Promise(o=>{const a=new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");t.set(a,o),e.start&&e.start(),e.postMessage(Object.assign({id:a},n),r)})}class x{constructor(e={}){this._dimensions=3,this._length=0,this._byteSize=4,this.growSize=128;const{initialSize:t=1024,dimensions:n=3,growSize:r=128}=e,o=t*n;this.growSize=r,this.array=new ArrayBuffer(o*this._byteSize),this.data=new Float32Array(this.array),this._dimensions=n}forEach(e){for(let t=0;t<this._length;t++)e(this.getPoint(t),t)}get length(){return this._length}get dimensions(){return this._dimensions}get dimensionLength(){return this._length*this._dimensions}getPoint(e){if(e<0&&(e+=this._length),e<0||e>=this._length)return;const t=this._dimensions*e;return this.data.subarray(t,t+this._dimensions)}getPointArray(e){const t=[];if(e<0&&(e+=this._length),e<0||e>=this._length)return;const n=this._dimensions*e;for(let e=0;e<this._dimensions;e++)t.push(this.data[e+n]);return t}grow(e=1,t=this.growSize){if(this.dimensionLength+e*this._dimensions<=this.data.length)return;const n=this.data.length+t,r=new ArrayBuffer(n*this._dimensions*this._byteSize),o=new Float32Array(r);o.set(this.data),this.data=o,this.array=r}reverse(){const e=Math.floor(this._length/2);for(let t=0;t<e;t++){const e=t*this._dimensions,n=(this._length-1-t)*this._dimensions;for(let t=0;t<this._dimensions;t++){const r=this.data[e+t];this.data[e+t]=this.data[n+t],this.data[n+t]=r}}}getTypedArray(){return this.data}push(e){this.grow(1);const t=this.length*this._dimensions;for(let n=0;n<this._dimensions;n++)this.data[n+t]=e[n];this._length++}map(e){const t=[];for(let n=0;n<this._length;n++)t.push(e(this.getPoint(n),n));return t}get points(){return this.map(e=>e)}toXYZ(){const e={x:[],y:[]};this._dimensions>=3&&(e.z=[]);const{x:t,y:n,z:r}=e;return this.forEach(e=>{t.push(e[0]),n.push(e[1]),r&&r.push(e[2])}),e}static fromXYZ({x:e,y:t,z:n}){const r=x.create3(e.length);let o=0;for(let a=0;a<e.length;a++)r.data[o++]=e[a],r.data[o++]=t[a],r.data[o++]=n?n[a]:0;return r._length=e.length,r}subselect(e=10,t=0){const n=new x({initialSize:e,dimensions:this._dimensions});for(let r=0;r<e;r++){const o=(t+Math.floor(this.length*r/e))%this.length;n.push(this.getPoint(o))}return n}static create3(e=128,t){e=Math.max(e,t?.length||0);const n=new x({initialSize:e,dimensions:3});return t&&t.forEach(e=>n.push(e)),n}static create2(e=128){return new x({initialSize:e,dimensions:2})}}const _=new class{constructor(){this.listeners={},this.debouncedListeners={}}reset(){this.listeners={},this.debouncedListeners={}}addEventListenerOnce(e,t){const n=r=>{this.removeEventListener(e,n),t.call(this,r)};this.addEventListener(e,n)}addEventListener(e,t){this.listeners[e]||(this.listeners[e]=[]),-1===this.listeners[e].indexOf(t)&&this.listeners[e].push(t)}addEventListenerDebounced(e,t,n){this.debouncedListeners[e]=this.debouncedListeners[e]||{};const r=this.debouncedListeners[e];if(!r[t]){const o=e=>{r[t]&&clearTimeout(r[t].timeoutId),r[t].timeoutId=setTimeout(()=>{t.call(this,e)},n)};r[t]={original:t,handle:o,timeoutId:null},this.addEventListener(e,o)}}removeEventListenerDebounced(e,t){if(this.debouncedListeners[e]?.[t]){const n=this.debouncedListeners[e][t];this.removeEventListener(e,n.handle),clearTimeout(n.timeoutId),delete this.debouncedListeners[e][t]}}removeEventListener(e,t){if(!this.listeners[e])return;const n=this.listeners[e],r=n.length;for(let e=0;e<r;e++)if(n[e]===t)return void n.splice(e,1)}dispatchEvent(e){if(!this.listeners[e.type])return!e.defaultPrevented;const t=this.listeners[e.type].slice(),n=t.length;for(let r=0;r<n;r++)try{t[r].call(this,e)}catch(t){console.error(`error in event listener of type:  ${e.type}`,t)}return!e.defaultPrevented}};function S(e=_,t,n=null){if(!t)throw new Error("Event type was not defined");const r=new CustomEvent(t,{detail:n,cancelable:!0});return e?.dispatchEvent(r)}function w(e){const t=e.indexOf(":");return e.substring(t+1)}var D;!function(e){e.ERROR_EVENT="CORNERSTONE_ERROR",e.CACHE_SIZE_EXCEEDED="CACHE_SIZE_EXCEEDED",e.IMAGE_LOAD_ERROR="IMAGE_LOAD_ERROR",e.CAMERA_MODIFIED="CORNERSTONE_CAMERA_MODIFIED",e.CAMERA_RESET="CORNERSTONE_CAMERA_RESET",e.VOI_MODIFIED="CORNERSTONE_VOI_MODIFIED",e.PRESET_MODIFIED="CORNERSTONE_VIEWPORT_RENDERING_PRESET_MODIFIED",e.DISPLAY_AREA_MODIFIED="CORNERSTONE_DISPLAY_AREA_MODIFIED",e.ELEMENT_DISABLED="CORNERSTONE_ELEMENT_DISABLED",e.ELEMENT_ENABLED="CORNERSTONE_ELEMENT_ENABLED",e.IMAGE_RENDERED="CORNERSTONE_IMAGE_RENDERED",e.IMAGE_VOLUME_MODIFIED="CORNERSTONE_IMAGE_VOLUME_MODIFIED",e.IMAGE_VOLUME_LOADING_COMPLETED="CORNERSTONE_IMAGE_VOLUME_LOADING_COMPLETED",e.IMAGE_LOADED="CORNERSTONE_IMAGE_LOADED",e.IMAGE_RETRIEVAL_STAGE="CORNERSTONE_IMAGE_RETRIEVAL_STAGE",e.IMAGE_LOAD_FAILED="CORNERSTONE_IMAGE_LOAD_FAILED",e.VOLUME_VIEWPORT_NEW_VOLUME="CORNERSTONE_VOLUME_VIEWPORT_NEW_VOLUME",e.VOLUME_LOADED="CORNERSTONE_VOLUME_LOADED",e.VOLUME_LOADED_FAILED="CORNERSTONE_VOLUME_LOADED_FAILED",e.IMAGE_CACHE_IMAGE_ADDED="CORNERSTONE_IMAGE_CACHE_IMAGE_ADDED",e.IMAGE_CACHE_IMAGE_REMOVED="CORNERSTONE_IMAGE_CACHE_IMAGE_REMOVED",e.VOLUME_CACHE_VOLUME_ADDED="CORNERSTONE_VOLUME_CACHE_VOLUME_ADDED",e.VOLUME_CACHE_VOLUME_REMOVED="CORNERSTONE_VOLUME_CACHE_VOLUME_REMOVED",e.STACK_NEW_IMAGE="CORNERSTONE_STACK_NEW_IMAGE",e.VOLUME_NEW_IMAGE="CORNERSTONE_VOLUME_NEW_IMAGE",e.PRE_STACK_NEW_IMAGE="CORNERSTONE_PRE_STACK_NEW_IMAGE",e.IMAGE_SPACING_CALIBRATED="CORNERSTONE_IMAGE_SPACING_CALIBRATED",e.VIEWPORT_NEW_IMAGE_SET="CORNERSTONE_VIEWPORT_NEW_IMAGE_SET",e.STACK_VIEWPORT_SCROLL="CORNERSTONE_STACK_VIEWPORT_SCROLL",e.STACK_SCROLL_OUT_OF_BOUNDS="STACK_SCROLL_OUT_OF_BOUNDS",e.GEOMETRY_CACHE_GEOMETRY_ADDED="CORNERSTONE_GEOMETRY_CACHE_GEOMETRY_ADDED",e.GEOMETRY_CACHE_GEOMETRY_REMOVED="CORNERSTONE_GEOMETRY_CACHE_GEOMETRY_REMOVED",e.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS="VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS",e.VOLUME_VIEWPORT_SCROLL="VOLUME_VIEWPORT_SCROLL",e.CLIPPING_PLANES_UPDATED="CORNERSTONE_CLIPPING_PLANES_UPDATED",e.WEB_WORKER_PROGRESS="CORNERSTONE_WEB_WORKER_PROGRESS",e.COLORMAP_MODIFIED="CORNERSTONE_COLORMAP_MODIFIED",e.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED="DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED",e.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED="DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED",e.DYNAMIC_VOLUME_DIMENSION_GROUP_LOADED="DYNAMIC_VOLUME_DIMENSION_GROUP_LOADED",e.DYNAMIC_VOLUME_TIME_POINT_LOADED="DYNAMIC_VOLUME_TIME_POINT_LOADED",e.GEOMETRY_LOADED="GEOMETRY_LOADED",e.GEOMETRY_LOAD_PROGRESS="GEOMETRY_LOAD_PROGRESS",e.GEOMETRY_LOADED_FAILED="GEOMETRY_LOADED_FAILED",e.ACTORS_CHANGED="CORNERSTONE_ACTORS_CHANGED"}(D||(D={}));const M=D;var T;!function(e){e[e.FAR_REPLICATE=1]="FAR_REPLICATE",e[e.ADJACENT_REPLICATE=3]="ADJACENT_REPLICATE",e[e.SUBRESOLUTION=6]="SUBRESOLUTION",e[e.LOSSY=7]="LOSSY",e[e.FULL_RESOLUTION=8]="FULL_RESOLUTION"}(T||(T={}));const L=T;function N(e){let t=2166136261;for(let n=0;n<e.length;n++)t^=e.charCodeAt(n),t+=(t<<1)+(t<<4)+(t<<7)+(t<<8)+(t<<24);return(t>>>0).toString(36)}const P=new class{constructor(){this._imageCache=new Map,this._volumeCache=new Map,this._imageIdsToVolumeIdCache=new Map,this._referencedImageIdToImageIdCache=new Map,this._geometryCache=new Map,this._imageCacheSize=0,this._maxCacheSize=3221225472,this._geometryCacheSize=0,this.setMaxCacheSize=e=>{if(!e||"number"!=typeof e){const e=`New max cacheSize ${this._maxCacheSize} should be defined and should be a number.`;throw new Error(e)}this._maxCacheSize=e},this.isCacheable=e=>this.getBytesAvailable()+Array.from(this._imageCache.values()).reduce((e,t)=>t.sharedCacheKey?e:e+t.sizeInBytes,0)>=e,this.getMaxCacheSize=()=>this._maxCacheSize,this.getCacheSize=()=>this._imageCacheSize,this._decacheImage=(e,t=!1)=>{const n=this._imageCache.get(e);if(!n)return;if(n.sharedCacheKey&&!t)throw new Error("Cannot decache an image with a shared cache key. You need to manually decache the volume first.");const{imageLoadObject:r}=n;n.image?.referencedImageId&&this._referencedImageIdToImageIdCache.delete(n.image.referencedImageId),r?.cancelFn&&r.cancelFn(),r?.decache&&r.decache(),this._imageCache.delete(e)},this._decacheVolume=e=>{const t=this._volumeCache.get(e);if(!t)return;const{volumeLoadObject:n,volume:r}=t;r&&(r.cancelLoading&&r.cancelLoading(),r.imageData&&r.imageData.delete(),n.cancelFn&&n.cancelFn(),r.imageIds&&r.imageIds.forEach(t=>{const n=this._imageCache.get(t);n&&n.sharedCacheKey===e&&(n.sharedCacheKey=void 0)}),this._volumeCache.delete(e))},this.purgeCache=()=>{const e=this._imageCache.keys();for(this.purgeVolumeCache();;){const{value:t,done:n}=e.next();if(n)break;this.removeImageLoadObject(t,{force:!0}),S(_,M.IMAGE_CACHE_IMAGE_REMOVED,{imageId:t})}},this.purgeVolumeCache=()=>{const e=this._volumeCache.keys();for(;;){const{value:t,done:n}=e.next();if(n)break;this.removeVolumeLoadObject(t),S(_,M.VOLUME_CACHE_VOLUME_REMOVED,{volumeId:t})}},this.getVolumeLoadObject=e=>{if(void 0===e)throw new Error("getVolumeLoadObject: volumeId must not be undefined");const t=this._volumeCache.get(e);if(t)return t.timeStamp=Date.now(),t.volumeLoadObject},this.putGeometryLoadObject=(e,t)=>{if(void 0===e)throw new Error("putGeometryLoadObject: geometryId must not be undefined");if(void 0===t.promise)throw new Error("putGeometryLoadObject: geometryLoadObject.promise must not be undefined");if(this._geometryCache.has(e))throw new Error("putGeometryLoadObject: geometryId already present in geometryCache");if(t.cancelFn&&"function"!=typeof t.cancelFn)throw new Error("putGeometryLoadObject: geometryLoadObject.cancel must be a function");const n={loaded:!1,geometryId:e,geometryLoadObject:t,timeStamp:Date.now(),sizeInBytes:0};return this._geometryCache.set(e,n),t.promise.then(t=>{try{this._putGeometryCommon(e,t,n)}catch(t){throw console.debug(`Error in _putGeometryCommon for geometry ${e}:`,t),t}}).catch(t=>{throw console.debug(`Error caching geometry ${e}:`,t),this._geometryCache.delete(e),t})},this.getGeometry=e=>{if(void 0===e)throw new Error("getGeometry: geometryId must not be undefined");const t=this._geometryCache.get(e);if(t)return t.timeStamp=Date.now(),t.geometry},this.removeGeometryLoadObject=e=>{if(void 0===e)throw new Error("removeGeometryLoadObject: geometryId must not be undefined");const t=this._geometryCache.get(e);if(!t)throw new Error("removeGeometryLoadObject: geometryId was not present in geometryCache");this.decrementGeometryCacheSize(t.sizeInBytes);const n={geometry:t,geometryId:e};S(_,M.GEOMETRY_CACHE_GEOMETRY_REMOVED,n),this._decacheGeometry(e)},this._decacheGeometry=e=>{const t=this._geometryCache.get(e);if(!t)return;const{geometryLoadObject:n}=t;n.cancelFn&&n.cancelFn(),n.decache&&n.decache(),this._geometryCache.delete(e)},this.incrementGeometryCacheSize=e=>{this._geometryCacheSize+=e},this.decrementGeometryCacheSize=e=>{this._geometryCacheSize-=e},this.getImageByReferencedImageId=e=>{const t=this._referencedImageIdToImageIdCache.get(e);if(t)return this._imageCache.get(t)?.image},this.getImage=(e,t=L.FAR_REPLICATE)=>{if(void 0===e)throw new Error("getImage: imageId must not be undefined");const n=this._imageCache.get(e);if(n&&(n.timeStamp=Date.now(),!(n.image?.imageQualityStatus<t)))return n.image},this.getVolume=(e,t=!1)=>{if(void 0===e)throw new Error("getVolume: volumeId must not be undefined");const n=this._volumeCache.get(e);return n?(n.timeStamp=Date.now(),n.volume):t?[...this._volumeCache.values()].find(t=>t.volumeId.includes(e))?.volume:void 0},this.getVolumes=()=>Array.from(this._volumeCache.values()).map(e=>e.volume),this.filterVolumesByReferenceId=e=>this.getVolumes().filter(t=>t.referencedVolumeId===e),this.removeImageLoadObject=(e,{force:t=!1}={})=>{if(void 0===e)throw new Error("removeImageLoadObject: imageId must not be undefined");const n=this._imageCache.get(e);if(!n)throw new Error("removeImageLoadObject: imageId was not present in imageCache");this._decacheImage(e,t),this.incrementImageCacheSize(-n.sizeInBytes);const r={image:n,imageId:e};S(_,M.IMAGE_CACHE_IMAGE_REMOVED,r)},this.removeVolumeLoadObject=e=>{if(void 0===e)throw new Error("removeVolumeLoadObject: volumeId must not be undefined");const t=this._volumeCache.get(e);if(!t)throw new Error("removeVolumeLoadObject: volumeId was not present in volumeCache");const n={volume:t,volumeId:e};S(_,M.VOLUME_CACHE_VOLUME_REMOVED,n),this._decacheVolume(e)},this.incrementImageCacheSize=e=>{this._imageCacheSize+=e},this.decrementImageCacheSize=e=>{this._imageCacheSize-=e},this.getGeometryLoadObject=e=>{if(void 0===e)throw new Error("getGeometryLoadObject: geometryId must not be undefined");const t=this._geometryCache.get(e);if(t)return t.timeStamp=Date.now(),t.geometryLoadObject}}generateVolumeId(e){const t=e.map(w).sort();let n=2166136261;for(const e of t){const t=N(e);for(let e=0;e<t.length;e++)n^=t.charCodeAt(e),n+=(n<<1)+(n<<4)+(n<<7)+(n<<8)+(n<<24)}return`volume-${(n>>>0).toString(36)}`}getImageIdsForVolumeId(e){return Array.from(this._imageIdsToVolumeIdCache.entries()).filter(([t,n])=>n===e).map(([e])=>e)}getBytesAvailable(){return this.getMaxCacheSize()-this.getCacheSize()}decacheIfNecessaryUntilBytesAvailable(e,t){let n=this.getBytesAvailable();if(n>=e)return n;const r=Array.from(this._imageCache.values()).filter(e=>!e.sharedCacheKey);r.sort(function(e,t){return e.timeStamp>t.timeStamp?1:e.timeStamp<t.timeStamp?-1:0});const o=r.map(e=>e.imageId);let a=o;t&&(a=o.filter(e=>!t.includes(e)));for(const t of a)if(this.removeImageLoadObject(t),S(_,M.IMAGE_CACHE_IMAGE_REMOVED,{imageId:t}),n=this.getBytesAvailable(),n>=e)return n;for(const t of o)if(this.removeImageLoadObject(t),S(_,M.IMAGE_CACHE_IMAGE_REMOVED,{imageId:t}),n=this.getBytesAvailable(),n>=e)return n}_putImageCommon(e,t,n){if(!this._imageCache.has(e))return void console.warn("The image was purged from the cache before it completed loading.");if(!t)return void console.warn("Image is undefined");if(void 0===t.sizeInBytes||Number.isNaN(t.sizeInBytes))throw new Error("_putImageCommon: image.sizeInBytes must not be undefined");if(void 0===t.sizeInBytes.toFixed)throw new Error("_putImageCommon: image.sizeInBytes is not a number");if(!this.isCacheable(t.sizeInBytes))throw new Error(M.CACHE_SIZE_EXCEEDED);this.decacheIfNecessaryUntilBytesAvailable(t.sizeInBytes),n.loaded=!0,n.image=t,n.sizeInBytes=t.sizeInBytes,this.incrementImageCacheSize(n.sizeInBytes);const r={image:n};t.referencedImageId&&this._referencedImageIdToImageIdCache.set(t.referencedImageId,e),S(_,M.IMAGE_CACHE_IMAGE_ADDED,r),n.sharedCacheKey=t.sharedCacheKey}async putImageLoadObject(e,t){if(void 0===e)throw console.error("putImageLoadObject: imageId must not be undefined"),new Error("putImageLoadObject: imageId must not be undefined");if(void 0===t.promise)throw console.error("putImageLoadObject: imageLoadObject.promise must not be undefined"),new Error("putImageLoadObject: imageLoadObject.promise must not be undefined");const n=this._imageCache.get(e);if(n?.imageLoadObject)throw console.warn(`putImageLoadObject: imageId ${e} already in cache`),new Error("putImageLoadObject: imageId already in cache");if(t.cancelFn&&"function"!=typeof t.cancelFn)throw console.error("putImageLoadObject: imageLoadObject.cancel must be a function"),new Error("putImageLoadObject: imageLoadObject.cancel must be a function");const r={...n,loaded:!1,imageId:e,sharedCacheKey:void 0,imageLoadObject:t,timeStamp:Date.now(),sizeInBytes:0};return this._imageCache.set(e,r),this._imageCache.set(e,r),t.promise.then(t=>{try{this._putImageCommon(e,t,r)}catch(t){throw console.debug(`Error in _putImageCommon for image ${e}:`,t),t}}).catch(t=>{throw console.debug(`Error caching image ${e}:`,t),this._imageCache.delete(e),t})}putImageSync(e,t){if(void 0===e)throw new Error("putImageSync: imageId must not be undefined");if(this._imageCache.has(e))throw new Error("putImageSync: imageId already in cache");const n={loaded:!1,imageId:e,sharedCacheKey:void 0,imageLoadObject:{promise:Promise.resolve(t)},timeStamp:Date.now(),sizeInBytes:0};this._imageCache.set(e,n);try{this._putImageCommon(e,t,n)}catch(t){throw this._imageCache.delete(e),t}}getImageLoadObject(e){if(void 0===e)throw new Error("getImageLoadObject: imageId must not be undefined");const t=this._imageCache.get(e);if(t)return t.timeStamp=Date.now(),t.imageLoadObject}isLoaded(e){const t=this._imageCache.get(e);return!!t&&t.loaded}getVolumeContainingImageId(e){const t=Array.from(this._volumeCache.keys()),n=w(e);for(const e of t){const t=this._volumeCache.get(e);if(!t)return;const{volume:r}=t;if(!r.imageIds.length)return;const o=r.getImageURIIndex(n);if(o>-1)return{volume:r,imageIdIndex:o}}}getCachedImageBasedOnImageURI(e){const t=w(e),n=Array.from(this._imageCache.keys()).find(e=>w(e)===t);if(n)return this._imageCache.get(n)}_putVolumeCommon(e,t,n){if(!this._volumeCache.get(e))return void console.warn("The volume was purged from the cache before it completed loading.");n.loaded=!0,n.volume=t,t.imageIds?.forEach(t=>{const n=this._imageCache.get(t);n&&(n.sharedCacheKey=e)});const r={volume:n};S(_,M.VOLUME_CACHE_VOLUME_ADDED,r)}putVolumeSync(e,t){if(void 0===e)throw new Error("putVolumeSync: volumeId must not be undefined");if(this._volumeCache.has(e))throw new Error("putVolumeSync: volumeId already in cache");const n={loaded:!1,volumeId:e,volumeLoadObject:{promise:Promise.resolve(t)},timeStamp:Date.now(),sizeInBytes:0};this._volumeCache.set(e,n);try{this._putVolumeCommon(e,t,n)}catch(t){throw this._volumeCache.delete(e),t}}async putVolumeLoadObject(e,t){if(void 0===e)throw new Error("putVolumeLoadObject: volumeId must not be undefined");if(void 0===t.promise)throw new Error("putVolumeLoadObject: volumeLoadObject.promise must not be undefined");if(this._volumeCache.has(e))throw new Error(`putVolumeLoadObject: volumeId:${e} already in cache`);if(t.cancelFn&&"function"!=typeof t.cancelFn)throw new Error("putVolumeLoadObject: volumeLoadObject.cancel must be a function");const n={loaded:!1,volumeId:e,volumeLoadObject:t,timeStamp:Date.now(),sizeInBytes:0};return this._volumeCache.set(e,n),t.promise.then(t=>{try{this._putVolumeCommon(e,t,n)}catch(t){throw console.error(`Error in _putVolumeCommon for volume ${e}:`,t),this._volumeCache.delete(e),t}}).catch(t=>{throw this._volumeCache.delete(e),t})}_putGeometryCommon(e,t,n){if(!this._geometryCache.get(e))return void console.warn("The geometry was purged from the cache before it completed loading.");if(!t)return void console.warn("Geometry is undefined");if(void 0===t.sizeInBytes||Number.isNaN(t.sizeInBytes))throw new Error("_putGeometryCommon: geometry.sizeInBytes must not be undefined");if(void 0===t.sizeInBytes.toFixed)throw new Error("_putGeometryCommon: geometry.sizeInBytes is not a number");if(!this.isCacheable(t.sizeInBytes))throw new Error(M.CACHE_SIZE_EXCEEDED);this.decacheIfNecessaryUntilBytesAvailable(t.sizeInBytes),n.loaded=!0,n.geometry=t,n.sizeInBytes=t.sizeInBytes,this.incrementGeometryCacheSize(n.sizeInBytes);const r={geometry:n};S(_,M.GEOMETRY_CACHE_GEOMETRY_ADDED,r)}putGeometrySync(e,t){if(void 0===e)throw new Error("putGeometrySync: geometryId must not be undefined");if(this._geometryCache.has(e))throw new Error("putGeometrySync: geometryId already in cache");const n={loaded:!1,geometryId:e,geometryLoadObject:{promise:Promise.resolve(t)},timeStamp:Date.now(),sizeInBytes:0};this._geometryCache.set(e,n);try{this._putGeometryCommon(e,t,n)}catch(t){throw this._geometryCache.delete(e),t}}setPartialImage(e,t){const n=this._imageCache.get(e);n?n.loaded?(n.loaded=!1,n.imageLoadObject=null,this.incrementImageCacheSize(-n.sizeInBytes),n.sizeInBytes=0,n.image=t||n.image):n.image=t||n.image:t&&this._imageCache.set(e,{image:t,imageId:e,loaded:!1,timeStamp:Date.now(),sizeInBytes:0})}getImageQuality(e){const t=this._imageCache.get(e)?.image;return t?t.imageQualityStatus||L.FULL_RESOLUTION:void 0}},k=[[0,-1,0],[0,1,0],[0,0,-1],[0,0,1]],R=[[0,-1,0],[0,1,0]],V=[[0,-1,0],[0,1,0],[0,0,-1]],j=[[0,-1,0],[0,1,0],[0,0,1]];class U{static copyMap(e,t){for(const[n,r]of t.rows)e.rows.set(n,structuredClone(r))}constructor(e,t,n=1){this.rows=new Map,this.height=1,this.width=1,this.depth=1,this.jMultiple=1,this.kMultiple=1,this.numComps=1,this.pixelDataConstructor=Uint8Array,this.updateScalarData=function(e){e.fill(0),this.forEach((t,n,r)=>{const{start:o,end:a,value:i}=n;for(let n=o;n<a;n++)e[t+n]=i})},this.get=e=>{const t=e%this.jMultiple,n=(e-t)/this.jMultiple,r=this.getRLE(t,n);return r?.value??this.defaultValue},this.getRun=(e,t)=>{const n=e+t*this.height;return this.rows.get(n)},this.set=(e,t)=>{if(void 0===t)return;const n=e%this.width,r=(e-n)/this.width,o=this.rows.get(r);if(!o)return void this.rows.set(r,[{start:n,end:n+1,value:t}]);const a=this.findIndex(o,n),i=o[a],s=o[a-1];if(!i)return s&&s.value===t&&s.end===n?void s.end++:void(o[a]={start:n,end:n+1,value:t});const{start:l,end:c,value:u}=i;if(t===u&&n>=l)return;const d={start:n,end:n+1,value:t},m=n>l,g=m?a+1:a,f=m?i:s;let h=m?o[a+1]:i;if(f?.value===t&&f?.end===n)return f.end++,void(h?.value===t&&h.start===n+1?(f.end=h.end,o.splice(a,1)):h?.start===n&&(h.start++,h.start===h.end&&(o.splice(a,1),h=o[a],h?.start===n+1&&h.value===t&&(f.end=h.end,o.splice(a,1)))));if(h?.value===t&&h.start===n+1)return h.start--,void(f?.end>n&&(f.end=n,f.end===f.start&&o.splice(a,1)));if(h?.start===n&&h.end===n+1){h.value=t;const e=o[a+1];return void(e?.start==n+1&&e.value===t&&(o.splice(a+1,1),h.end=e.end))}n===h?.start&&h.start++,m&&c>n+1?o.splice(g,0,d,{start:n+1,end:f.end,value:f.value}):o.splice(g,0,d),f?.end>n&&(f.end=n)},this.width=e,this.height=t,this.depth=n,this.jMultiple=e,this.kMultiple=this.jMultiple*t}static{this.getScalarData=function(e=Uint8ClampedArray){const t=new e(this.frameSize);return this.map.updateScalarData(t),t}}toIJK(e){const t=e%this.jMultiple;return[t,(e-t)/this.jMultiple%this.height,Math.floor(e/this.kMultiple)]}toIndex([e,t,n]){return e+n*this.kMultiple+t*this.jMultiple}getRLE(e,t,n=0){const r=this.rows.get(t+n*this.height);if(!r)return;const o=r[this.findIndex(r,e)];return e>=o?.start?o:void 0}has(e){const t=e%this.jMultiple,n=(e-t)/this.jMultiple,r=this.getRLE(t,n);return void 0!==r?.value}delete(e){const t=e%this.width,n=(e-t)/this.width,r=this.rows.get(n);if(!r)return;const o=this.findIndex(r,t),a=r[o];if(!a||a.start>t)return;if(a.end===t+1)return a.end--,void(a.start>=a.end&&(r.splice(o,1),r.length||this.rows.delete(n)));if(a.start===t)return void a.start++;const i={value:a.value,start:t+1,end:a.end};a.end=t,r.splice(o+1,0,i)}findIndex(e,t){for(let n=0;n<e.length;n++){const{end:r}=e[n];if(t<r)return n}return e.length}forEach(e,t){const n=t?.rowModified;for(const[t,r]of this.rows){const o=n?[...r]:r;for(const n of o)e(t*this.width,n,r)}}forEachRow(e){for(const[t,n]of this.rows)e(t*this.width,n)}clear(){this.rows.clear()}keys(){return[...this.rows.keys()]}getPixelData(e=0,t){t?t.fill(0):t=new this.pixelDataConstructor(this.width*this.height*this.numComps);const{width:n,height:r,numComps:o}=this;for(let a=0;a<r;a++){const r=this.getRun(a,e);if(r)if(1===o)for(const e of r){const r=a*n,{start:o,end:i,value:s}=e;for(let e=o;e<i;e++)t[r+e]=s}else for(const e of r){const r=a*n*o,{start:i,end:s,value:l}=e;for(let e=i;e<s;e+=o)for(let n=0;n<o;n++)t[r+e+n]=l[n]}}return t}floodFill(e,t,n,r,o){const a=this.getRLE(e,t,n);if(!a)throw new Error(`Initial point ${e},${t},${n} isn't in the RLE`);const i=[[a,t,n]],s=a.value;if(s===r)throw new Error(`source (${s}) and destination (${r}) are identical`);return this.flood(i,s,r,o)}flood(e,t,n,r){let o=0;const{planar:a=!0,diagonals:i=!0,singlePlane:s=!1}=r||{},l={planar:a,diagonals:i,singlePlane:s};for(;e.length;){const r=e.pop(),[a]=r;if(a.value!==t)continue;a.value=n,o+=a.end-a.start;const i=this.findAdjacents(r,l).filter(e=>e&&e[0].value===t);e.push(...i)}return o}fillFrom(e,t){for(let n=t[2][0];n<=t[2][1];n++)for(let r=t[1][0];r<=t[1][1];r++){let o,a;for(let i=t[0][0];i<=t[0][1];i++){const t=e(i,r,n);void 0!==t?(a||(a=[],this.rows.set(r+n*this.height,a)),o&&o.value!==t&&(o=void 0),o||(o={start:i,end:i,value:t},a.push(o)),o.end++):o=void 0}}}findAdjacents(e,{diagonals:t=!0,planar:n=!0,singlePlane:r=!1}){const[o,a,i,s]=e,{start:l,end:c}=o,u=l>0&&this.getRLE(l-1,a,i),d=c<this.width&&this.getRLE(c,a,i),m=t?[l>0?l-1:l,c<this.width?c+1:c]:[l,c],g=[];u&&g.push([u,a,i]),d&&g.push([d,a,i]);for(const e of s||(r?R:k)){const[,t,o]=e,l=t+a,c=o+i;if(l<0||l>=this.height)continue;if(c<0||c>=this.depth)continue;const u=this.getRun(l,c);if(u)for(const e of u){const t=s||r&&R||n&&o>0&&j||n&&o<0&&V||k;e.end<=m[0]||e.start>=m[1]||g.push([e,l,c,t])}}return g}}function z(e,t,n){return Math.abs(e-t)<=n}function G(e){return"number"==typeof e}function F(e){return e&&"object"==typeof e&&"length"in e&&"number"==typeof e.length&&e.length>0&&"number"==typeof e[0]}function B(e,t,n=1e-5){return typeof e==typeof t&&null!==e&&null!==t&&(G(e)&&G(t)?z(e,t,n):!(!F(e)||!F(t))&&function(e,t,n=1e-5){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(!z(e[r],t[r],n))return!1;return!0}(e,t,n))}var $="undefined"!=typeof Float32Array?Float32Array:Array;function K(){var e=new $(3);return $!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function W(e,t,n){var r=new $(3);return r[0]=e,r[1]=t,r[2]=n,r}function H(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}function Y(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}function J(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}function X(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function q(e,t,n){var r=t[0],o=t[1],a=t[2],i=n[3]*r+n[7]*o+n[11]*a+n[15];return i=i||1,e[0]=(n[0]*r+n[4]*o+n[8]*a+n[12])/i,e[1]=(n[1]*r+n[5]*o+n[9]*a+n[13])/i,e[2]=(n[2]*r+n[6]*o+n[10]*a+n[14])/i,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var Q=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e},Z=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],o=t[2]-e[2];return n*n+r*r+o*o};K();class ee{get id(){return this._id}constructor(e,t){this.modifiedSlices=new Set,this.boundsIJK=[[1/0,-1/0],[1/0,-1/0],[1/0,-1/0]],this.scalarData=null,this._sliceDataCache=null,this.getAtIJK=(e,t,n)=>{const r=this.toIndex([e,t,n]);return this._get(r)},this.setAtIJK=(e,t,n,r)=>{const o=this.toIndex([e,t,n]),a=this._set(o,r);return!1!==a&&(this.modifiedSlices.add(n),ee.addBounds(this.boundsIJK,[e,t,n])),a},this.getAtIJKPoint=([e,t,n])=>this.getAtIJK(e,t,n),this.setAtIJKPoint=([e,t,n],r)=>{this.setAtIJK(e,t,n,r)},this.getAtIndex=e=>this._get(e),this.setAtIndex=(e,t)=>{const n=this._set(e,t);if(!1!==n){const t=this.toIJK(e);this.modifiedSlices.add(t[2]),ee.addBounds(this.boundsIJK,t)}return n},this.getMiddleSliceData=()=>{const e=Math.floor(this.dimensions[2]/2);return this.getSliceData({sliceIndex:e,slicePlane:2})},this.forEach=(e,t={})=>{const n=t.boundsIJK||this.getBoundsIJK(),r=t.isInObject||this.isInObject||(()=>!0),o=t.returnPoints||!1,a=t.imageData,i=Math.min(n[0][0],n[0][1]),s=Math.max(n[0][0],n[0][1]),l=Math.min(n[1][0],n[1][1]),c=Math.max(n[1][0],n[1][1]),u=Math.min(n[2][0],n[2][1]),d=Math.max(n[2][0],n[2][1]),m=[];if(a)return function({voxelManager:e,bounds:t,imageData:n,pointInShapeFn:r,callback:o,returnPoints:a}){const[[i,s],[l,c],[u,d]]=t,m=function(e){const t=K(),n=e.getDimensions(),r=x.create3(n[0]),o=x.create3(n[1]),a=x.create3(n[2]),i=e.getDirection(),s=i.slice(0,3),l=i.slice(3,6),c=i.slice(6,9),u=e.getSpacing(),[d,m,g]=u,f=e.indexToWorld([0,0,0]),h=W(s[0]*d,s[1]*d,s[2]*d),p=W(l[0]*m,l[1]*m,l[2]*m),y=W(c[0]*g,c[1]*g,c[2]*g),b=K();for(let e=0;e<n[0];e++)r.push(H(b,f,Y(b,h,e)));for(let e=0;e<n[1];e++)o.push(Y(b,p,e));for(let e=0;e<n[2];e++)a.push(Y(b,y,e));const v=r.getTypedArray(),I=o.getTypedArray(),E=a.getTypedArray();return(e,n=t)=>{const[r,o,a]=e,i=3*r,s=3*o,l=3*a;return n[0]=v[i]+I[s]+E[l],n[1]=v[i+1]+I[s+1]+E[l+1],n[2]=v[i+2]+I[s+2]+E[l+2],n}}(n),g=[0,0,0],f=[];for(let t=u;t<=d;t++){g[2]=t;for(let t=l;t<=c;t++){g[1]=t;for(let t=i;t<=s;t++){g[0]=t;const n=m(g);if(r(n,g)){const t=e.toIndex(g),r=e.getAtIndex(t);a&&f.push({value:r,index:t,pointIJK:[...g],pointLPS:n.slice()}),o?.({value:r,index:t,pointIJK:g,pointLPS:n})}}}}return f}({voxelManager:this,imageData:t.imageData,bounds:[[i,s],[l,c],[u,d]],pointInShapeFn:r,callback:e,returnPoints:o});if(this.map){if(this.map instanceof U)return this.rleForEach(e,t);for(const t of this.map.keys()){const n=this.toIJK(t);if(!r(null,n))continue;const a=this._get(t);o&&m.push({value:a,index:t,pointIJK:n,pointLPS:null}),e({value:a,index:t,pointIJK:n,pointLPS:null})}return m}for(let t=u;t<=d;t++){const n=t*this.frameSize;for(let a=l;a<=c;a++)for(let l=i,c=n+a*this.width+l;l<=s;l++,c++){const n=this.getAtIndex(c),i=[l,a,t];r(null,i)&&(o&&m.push({value:n,index:c,pointIJK:i,pointLPS:null}),e({value:n,index:c,pointIJK:[l,a,t],pointLPS:null}))}}return m},this.getSliceData=({sliceIndex:e,slicePlane:t})=>{const[n,r,o]=this.dimensions,a=n*r,i=e*a;let s;const l=this.getConstructor();if("function"!=typeof l)return new Uint8Array(0);let c;switch(t){case 0:s=r*o,c=new l(s);for(let t=0;t<r;t++)for(let r=0;r<o;r++){const i=e+t*n+r*a;this.setSliceDataValue(c,t*o+r,this._get(i))}break;case 1:s=n*o,c=new l(s);for(let t=0;t<n;t++)for(let r=0;r<o;r++){const o=t+e*n+r*a;this.setSliceDataValue(c,t+r*n,this._get(o))}break;case 2:s=n*r,c=new l(s);for(let e=0;e<s;e++)this.setSliceDataValue(c,e,this._get(i+e));break;default:throw new Error("Oblique plane - todo - implement as ortho normal vector")}return c},this.dimensions=e,this.width=e[0],this.frameSize=this.width*e[1],this._get=t._get,this._set=t._set,this._id=t._id||"",this._getConstructor=t._getConstructor,this.numberOfComponents=this.numberOfComponents||1,this.scalarData=t.scalarData,this._getScalarData=t._getScalarData,this._updateScalarData=t._updateScalarData}getMinMax(){let e,t;return this.forEach(({value:n})=>{const r=Array.isArray(n);if(void 0===e&&(e=r?[...n]:n,t=r?[...n]:n),r)for(let r=0;r<n.length;r++)e[r]=Math.min(e[r],n[r]),t[r]=Math.max(t[r],n[r]);else e=Math.min(e,n),t=Math.max(t,n)},{boundsIJK:this.getDefaultBounds()}),{min:e,max:t}}toIJK(e){return[e%this.width,Math.floor(e%this.frameSize/this.width),Math.floor(e/this.frameSize)]}toIndex(e){return e[0]+e[1]*this.width+e[2]*this.frameSize}getDefaultBounds(){return this.dimensions.map(e=>[0,e-1])}getBoundsIJK(){return this.boundsIJK[0][0]<this.dimensions[0]?this.boundsIJK:this.getDefaultBounds()}rleForEach(e,t){const n=t?.boundsIJK||this.getBoundsIJK(),{isWithinObject:r}=t||{},o=this.map;if(o){o.defaultValue=void 0;for(let t=n[2][0];t<=n[2][1];t++)for(let a=n[1][0];a<=n[1][1];a++){const n=o.getRun(a,t);if(n)for(const o of n){const{start:n,end:i,value:s}=o,l=this.toIndex([0,a,t]);for(let o=n;o<i;o++){const n={value:s,index:l+o,pointIJK:[o,a,t]};!1!==r?.(n)&&e(n)}}}}else console.warn("No map found, you need to use a map voxel manager to use rleForEach")}getScalarData(e=!1){if(this.scalarData)return this._updateScalarData?.(this.scalarData),this.scalarData;if(this._getScalarData){const t=this._getScalarData();return e&&console.log("Not transient, should store value",t),t}throw new Error("No scalar data available")}setScalarData(e){this.scalarData=e}getScalarDataLength(){if(this.scalarData)return this.scalarData.length;if(this._getScalarDataLength)return this._getScalarDataLength();throw new Error("No scalar data available")}get sizeInBytes(){return this.getScalarDataLength()*this.bytePerVoxel}get bytePerVoxel(){return this.scalarData?this.scalarData.BYTES_PER_ELEMENT:this._get(0).BYTES_PER_ELEMENT}clearBounds(){this.boundsIJK.map(e=>{e[0]=1/0,e[1]=-1/0})}clear(){this.map?.clear(),this.clearBounds(),this.modifiedSlices.clear(),this.points?.clear()}getConstructor(){return this.scalarData?this.scalarData.constructor:this._getConstructor?this._getConstructor():(console.warn("No scalar data available or can be used to get the constructor"),Float32Array)}getArrayOfModifiedSlices(){return Array.from(this.modifiedSlices)}resetModifiedSlices(){this.modifiedSlices.clear()}setBounds(e){this.boundsIJK=e}static addBounds(e,t){e||(e=[[1/0,-1/0],[1/0,-1/0],[1/0,-1/0]]),e[0][0]=Math.min(t[0],e[0][0]),e[0][1]=Math.max(t[0],e[0][1]),e[1][0]=Math.min(t[1],e[1][0]),e[1][1]=Math.max(t[1],e[1][1]),e[2][0]=Math.min(t[2],e[2][0]),e[2][1]=Math.max(t[2],e[2][1])}addPoint(e){const t=Array.isArray(e)?e[0]+this.width*e[1]+this.frameSize*e[2]:e;this.points||(this.points=new Set),this.points.add(t)}getPoints(){return this.points?[...this.points].map(e=>this.toIJK(e)):[]}setSliceDataValue(e,t,n){if(Array.isArray(n))for(let r=0;r<n.length;r++)e[t*n.length+r]=this.toNumber(n[r]);else e[t]=this.toNumber(n)}toNumber(e){return"number"==typeof e?e:Array.isArray(e)&&e[0]||0}static _createRGBScalarVolumeVoxelManager({dimensions:e,scalarData:t,numberOfComponents:n=3,id:r}){const o=new ee(e,{_get:e=>(e*=n,[t[e++],t[e++],t[e++]]),_id:r||"_createRGBScalarVolumeVoxelManager",_set:(e,n)=>{const r=!B(t[e*=3],n);return t[e++]=n[0],t[e++]=n[1],t[e++]=n[2],r},numberOfComponents:n,scalarData:t});return o.clear=()=>{t.fill(0)},o}static createImageVolumeVoxelManager({dimensions:e,imageIds:t,numberOfComponents:n=1,id:r}){const o=e[0]*e[1];function a(n){const r=Math.floor(n/o);if(r<0||r>=e[2])return{};const a=t[r];if(!a)return console.warn(`ImageId not found for sliceIndex: ${r}`),{pixelData:null,pixelIndex:null};const i=P.getImage(a);return i?{voxelManager:i.voxelManager,pixelIndex:n%o}:(console.warn(`Image not found for imageId: ${a}`),{pixelData:null,pixelIndex:null})}const i=new ee(e,{_get:function(e){const{voxelManager:t,pixelIndex:n}=a(e);return t&&null!==n?t.getAtIndex(n):null},_set:function(e,t){const{voxelManager:n,pixelIndex:r}=a(e);if(!n||null===r)return!1;const o=!B(t,n.getAtIndex(r));return o?(n.setAtIndex(r,t),!0):o},numberOfComponents:n,_getConstructor:()=>{const{voxelManager:e,pixelIndex:t}=a(0);return e&&null!==t?e.getConstructor():null},_id:r||"createImageVolumeVoxelManager"});return i.getMiddleSliceData=()=>{const t=Math.floor(e[2]/2);return i.getSliceData({sliceIndex:t,slicePlane:2})},i.clear=()=>{for(const e of t)P.getImage(e).voxelManager.clear()},i.getRange=()=>{let e=1/0,n=-1/0;for(const r of t){const t=P.getImage(r);t&&(t.minPixelValue<e&&(e=t.minPixelValue),t.maxPixelValue>n&&(n=t.maxPixelValue))}return e===1/0&&n===-1/0?[0,0]:[e,n]},i._getScalarDataLength=()=>{const{voxelManager:t,pixelIndex:n}=a(0);return t&&null!==n?t.getScalarDataLength()*e[2]:0},i.getCompleteScalarDataArray=()=>{const t=i._getConstructor();if(!t)return new Uint8Array(0);const r=new t(i.getScalarDataLength()),o=e[0]*e[1]*n;for(let t=0;t<e[2];t++){const{voxelManager:e,pixelIndex:i}=a(t*o/n);if(e&&null!==i){const a=t*o,i=e.getScalarData();if(1===n)r.set(i,a);else for(let e=0;e<i.length;e+=n)for(let t=0;t<n;t++)r[a+e+t]=i[e+t]}}return r},i.setCompleteScalarDataArray=r=>{const o=e[0]*e[1]*n,s=i._getConstructor();let l=1/0,c=-1/0;for(let i=0;i<e[2];i++){const{voxelManager:e}=a(i*o/n);if(e&&s){const n=i*o,a=n+o,u=new s(o);if(u.set(r.subarray(n,a)),e.scalarData)e.scalarData.set(u),e.modifiedSlices.add(i);else for(let t=0;t<o;t++)e.setAtIndex(t,u[t]);for(let e=0;e<u.length;e++){const t=u[e];l=Math.min(l,t),c=Math.max(c,t)}const d=t[i],m=P.getImage(d);m&&(m.minPixelValue=l,m.maxPixelValue=c)}}for(let t=0;t<e[2];t++)i.modifiedSlices.add(t);i.boundsIJK=[[0,e[0]-1],[0,e[1]-1],[0,e[2]-1]]},i}static createScalarVolumeVoxelManager({dimensions:e,scalarData:t,numberOfComponents:n,id:r}){if(3!==e.length)throw new Error("Dimensions must be provided as [number, number, number] for [width, height, depth]");if(!n&&((n=t.length/e[0]/e[1]/e[2])>4||n<1||2===n))throw new Error(`Number of components ${n} must be 1, 3 or 4`);return n>1?ee._createRGBScalarVolumeVoxelManager({dimensions:e,scalarData:t,numberOfComponents:n,id:r}):ee._createNumberVolumeVoxelManager({dimensions:e,scalarData:t,id:r})}static createScalarDynamicVolumeVoxelManager({imageIdGroups:e,dimensions:t,dimensionGroupNumber:n=1,timePoint:r=0,numberOfComponents:o=1,id:a}){let i=0;if(void 0!==n?i=n-1:void 0!==r&&(console.warn("Warning: timePoint parameter is deprecated. Please use dimensionGroupNumber instead. timePoint is zero-based while dimensionGroupNumber starts at 1."),i=r),!o){const n=P.getImage(e[0][0]);if(!n)throw new Error("Unable to determine number of components: No image found");if((o=n.getPixelData().length/(t[0]*t[1]))>4||o<1||2===o)throw new Error(`Number of components ${o} must be 1, 3 or 4`)}const s=e.map(e=>ee.createImageVolumeVoxelManager({dimensions:t,imageIds:e,numberOfComponents:o,id:a})),l=new ee(t,{_get:e=>s[i]._get(e),_set:(e,t)=>s[i]._set(e,t),numberOfComponents:o,_id:a||"createScalarDynamicVolumeVoxelManager"});return l.getScalarDataLength=()=>s[i].getScalarDataLength(),l.getConstructor=()=>s[i].getConstructor(),l.getRange=()=>s[i].getRange(),l.getMiddleSliceData=()=>s[i].getMiddleSliceData(),l.setTimePoint=e=>{console.warn("Warning: setTimePoint is deprecated. Please use setDimensionGroupNumber instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1."),l.setDimensionGroupNumber(e+1)},l.setDimensionGroupNumber=e=>{i=e-1,l._get=e=>s[i]._get(e),l._set=(e,t)=>s[i]._set(e,t)},l.getAtIndexAndTimePoint=(e,t)=>(console.warn("Warning: getAtIndexAndTimePoint is deprecated. Please use getAtIndexAndDimensionGroup instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1."),l.getAtIndexAndDimensionGroup(e,t+1)),l.getAtIndexAndDimensionGroup=(e,t)=>s[t-1]._get(e),l.getTimePointScalarData=e=>(console.warn("Warning: getTimePointScalarData is deprecated. Please use getDimensionGroupScalarData instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1."),l.getDimensionGroupScalarData(e+1)),l.getDimensionGroupScalarData=e=>s[e-1].getCompleteScalarDataArray(),l.getCurrentTimePointScalarData=()=>(console.warn("Warning: getCurrentTimePointScalarData is deprecated. Please use getCurrentDimensionGroupScalarData instead."),l.getCurrentDimensionGroupScalarData()),l.getCurrentDimensionGroupScalarData=()=>s[i].getCompleteScalarDataArray(),l.getCurrentTimePoint=()=>(console.warn("Warning: getCurrentTimePoint is deprecated. Please use getCurrentDimensionGroupNumber instead. Note that timePoint is zero-based while dimensionGroupNumber starts at 1."),i),l.getCurrentDimensionGroupNumber=()=>i+1,l}static createImageVoxelManager({width:e,height:t,scalarData:n,numberOfComponents:r=1,id:o}){const a=[e,t,1];if(!r&&((r=n.length/e/t)>4||r<1||2===r))throw new Error(`Number of components ${r} must be 1, 3 or 4`);return r>1?ee._createRGBScalarVolumeVoxelManager({dimensions:a,scalarData:n,numberOfComponents:r,id:o}):ee._createNumberVolumeVoxelManager({dimensions:a,scalarData:n,id:o})}static _createNumberVolumeVoxelManager({dimensions:e,scalarData:t,id:n}){const r=new ee(e,{_get:e=>t[e],_set:(e,n)=>{const r=t[e]!==n;return t[e]=n,r},_getConstructor:()=>t.constructor,_id:n||"_createNumberVolumeVoxelManager"});return r.scalarData=t,r.clear=()=>{r.scalarData.fill(0)},r.getMiddleSliceData=()=>{const t=Math.floor(e[2]/2);return r.getSliceData({sliceIndex:t,slicePlane:2})},r}static createMapVoxelManager({dimension:e,id:t}){const n=new Map,r=new ee(e,{_get:n.get.bind(n),_set:(e,t)=>n.set(e,t)&&!0,_id:t||"createMapVoxelManager"});return r.map=n,r}static createHistoryVoxelManager(e,t){const n=new Map,{dimensions:r}=e,o=new ee(r,{_get:e=>n.get(e),_set:function(e,t){if(n.has(e))t===n.get(e)&&n.delete(e);else{const r=this.sourceVoxelManager.getAtIndex(e);if(r===t)return!1;n.set(e,r)}this.sourceVoxelManager.setAtIndex(e,t)},_id:t||"createHistoryVoxelManager"});return o.map=n,o.scalarData=e.scalarData,o.sourceVoxelManager=e,o}static createRLEHistoryVoxelManager(e,t){const{dimensions:n}=e,r=new U(n[0],n[1],n[2]),o=new ee(n,{_get:e=>r.get(e),_set:function(e,t){const n=r.get(e);if(void 0===n){const n=this.sourceVoxelManager.getAtIndex(e);if(n===t||void 0===n&&0===t||null===t)return!1;r.set(e,n??0)}else t!==n&&null!==t||(r.delete(e),t=n);this.sourceVoxelManager.setAtIndex(e,t)},_getScalarData:U.getScalarData,_updateScalarData:e=>(r.updateScalarData(e),e),_id:t||"createRLEHistoryVoxelManager"});return o.map=r,o.sourceVoxelManager=e,o}static createLazyVoxelManager({dimensions:e,planeFactory:t,id:n}){const r=new Map,[o,a]=e,i=o*a,s=new ee(e,{_get:e=>r.get(Math.floor(e/i))[e%i],_set:(e,n)=>{const s=Math.floor(e/i);let l=r.get(s);return l||(l=t(o,a),r.set(s,l)),l[e%i]=n,!0},_id:n||"createLazyVoxelManager"});return s.map=r,s}static createRLEVolumeVoxelManager({dimensions:e,id:t}){const[n,r,o]=e,a=new U(n,r,o),i=new ee(e,{_get:e=>a.get(e),_set:(e,t)=>(a.set(e,t),!0),_getScalarData:U.getScalarData,_updateScalarData:e=>(a.updateScalarData(e),e),_id:t||"createRLEVolumeVoxelManager"});return i.map=a,i.getPixelData=a.getPixelData.bind(a),i}static createRLEImageVoxelManager({dimensions:e,id:t}){const[n,r]=e;return ee.createRLEVolumeVoxelManager({dimensions:[n,r,1],id:t})}static addInstanceToImage(e){const{width:t,height:n}=e,r=e.voxelManager.getScalarData();r.length>=t*n?e.voxelManager=ee.createScalarVolumeVoxelManager({dimensions:[t,n,1],scalarData:r}):(e.voxelManager=ee.createRLEVolumeVoxelManager({dimensions:[t,n,1]}),e.getPixelData=e.voxelManager.getPixelData,e.sizeInBytes=5120)}}class te{}class ne{constructor(e){this.storePointData=e.storePointData}getStatistics(){console.debug("InstanceCalculator getStatistics called")}}const{NC:re}=r;function oe(e){return{max:[-1/0],min:[1/0],sum:[0],count:0,maxIJK:null,maxLPS:null,minIJK:null,minLPS:null,runMean:[0],m2:[0],m3:[0],m4:[0],allValues:[[]],pointsInShape:e?re.create3(1024):null,sumLPS:[0,0,0]}}function ae(e,t,n=null,r=null){Array.isArray(t)&&t.length>1&&1===e.max.length&&(e.max.push(e.max[0],e.max[0]),e.min.push(e.min[0],e.min[0]),e.sum.push(e.sum[0],e.sum[0]),e.runMean.push(0,0),e.m2.push(e.m2[0],e.m2[0]),e.m3.push(e.m3[0],e.m3[0]),e.m4.push(e.m4[0],e.m4[0]),e.allValues.push([],[])),e?.pointsInShape&&n&&e.pointsInShape.push(n);const o=Array.isArray(t)?t:[t];e.count+=1,n&&(e.sumLPS[0]+=n[0],e.sumLPS[1]+=n[1],e.sumLPS[2]+=n[2]),e.max.forEach((t,a)=>{const i=o[a];e.allValues[a].push(i);const s=e.count,l=i-e.runMean[a],c=l/s,u=l*c*(s-1);e.sum[a]+=i,e.runMean[a]+=c,e.m4[a]+=u*c*c*(s*s-3*s+3)+6*c*c*e.m2[a]-4*c*e.m3[a],e.m3[a]+=u*c*(s-2)-3*c*e.m2[a],e.m2[a]+=u,i<e.min[a]&&(e.min[a]=i,0===a&&(e.minIJK=r?[...r]:null,e.minLPS=n?[...n]:null)),i>e.max[a]&&(e.max[a]=i,0===a&&(e.maxIJK=r?[...r]:null,e.maxLPS=n?[...n]:null))})}function ie(e,t){const n=e.sum.map(t=>t/e.count),r=e.m2.map(t=>Math.sqrt(t/e.count)),o=e.sumLPS.map(t=>t/e.count),a=e.m3.map((t,n)=>{const r=e.m2[n]/e.count;return 0===r?0:t/(e.count*Math.pow(r,1.5))}),i=e.m4.map((t,n)=>{const r=e.m2[n]/e.count;return 0===r?0:t/(e.count*r*r)-3}),s=e.allValues.map(e=>function(e){if(0===e.length)return 0;const t=[...e].sort((e,t)=>e-t),n=Math.floor(t.length/2);return t.length%2==0?(t[n-1]+t[n])/2:t[n]}(e)),l={max:{name:"max",label:"Max Pixel",value:1===e.max.length?e.max[0]:e.max,unit:t,pointIJK:e.maxIJK?[...e.maxIJK]:null,pointLPS:e.maxLPS?[...e.maxLPS]:null},min:{name:"min",label:"Min Pixel",value:1===e.min.length?e.min[0]:e.min,unit:t,pointIJK:e.minIJK?[...e.minIJK]:null,pointLPS:e.minLPS?[...e.minLPS]:null},mean:{name:"mean",label:"Mean Pixel",value:1===n.length?n[0]:n,unit:t},stdDev:{name:"stdDev",label:"Standard Deviation",value:1===r.length?r[0]:r,unit:t},count:{name:"count",label:"Voxel Count",value:e.count,unit:null},median:{name:"median",label:"Median",value:1===s.length?s[0]:s,unit:t},skewness:{name:"skewness",label:"Skewness",value:1===a.length?a[0]:a,unit:null},kurtosis:{name:"kurtosis",label:"Kurtosis",value:1===i.length?i[0]:i,unit:null},maxLPS:{name:"maxLPS",label:"Max LPS",value:e.maxLPS?Array.from(e.maxLPS):null,unit:null},minLPS:{name:"minLPS",label:"Min LPS",value:e.minLPS?Array.from(e.minLPS):null,unit:null},pointsInShape:e.pointsInShape,center:{name:"center",label:"Center",value:o?[...o]:null,unit:null},array:[]};l.array.push(l.min,l.max,l.mean,l.stdDev,l.median,l.skewness,l.kurtosis,l.count,l.maxLPS,l.minLPS),l.center.value&&l.array.push(l.center);const c=oe(null!==e.pointsInShape);return e.max=c.max,e.min=c.min,e.sum=c.sum,e.count=c.count,e.maxIJK=c.maxIJK,e.maxLPS=c.maxLPS,e.minIJK=c.minIJK,e.minLPS=c.minLPS,e.runMean=c.runMean,e.m2=c.m2,e.m3=c.m3,e.m4=c.m4,e.allValues=c.allValues,e.pointsInShape=c.pointsInShape,e.sumLPS=c.sumLPS,l}class se extends te{static{this.state=oe(!0)}static statsInit(e){e.storePointData||(this.state.pointsInShape=null),this.state=oe(e.storePointData)}static{this.statsCallback=({value:e,pointLPS:t=null,pointIJK:n=null})=>{ae(this.state,e,t,n)}}static{this.getStatistics=e=>ie(this.state,e?.unit)}}class le extends ne{constructor(e){super(e),this.state=oe(e.storePointData)}statsInit(e){this.state=oe(e.storePointData)}statsCallback(e){ae(this.state,e.value,e.pointLPS,e.pointIJK)}getStatistics(e){return ie(this.state,e?.unit)}}var ce;!function(e){e.NOT_APPLICABLE="",e.ERMF="ERMF",e.USER="User",e.PROJECTION="Proj",e.REGION="Region",e.ERROR="Error",e.UNCALIBRATED="Uncalibrated",e.CALIBRATED="Calibrated",e.UNKNOWN="Unknown"}(ce||(ce={}));const ue=ce,{ov:de}=o,me="px",ge="voxels",fe=[1,2,3,4],he=["3,3","4,7"],pe={0:"px",1:"percent",2:"dB",3:"cm",4:"seconds",5:"hertz",6:"dB/seconds",7:"cm/sec",8:"cm²",9:"cm²/s",12:"degrees"},ye="²";function be(e,t){const{value:n}=t,{maxIJKs:r}=e,o=r.length;if("number"!=typeof n||o>=10&&n<r[0].value)return;const a={value:t.value,pointLPS:t.pointLPS?[t.pointLPS[0],t.pointLPS[1],t.pointLPS[2]]:void 0,pointIJK:t.pointIJK?[t.pointIJK[0],t.pointIJK[1],t.pointIJK[2]]:void 0};if(!o||n>=r[o-1].value)r.push(a);else for(let e=0;e<o;e++)if(n<=r[e].value){r.splice(e,0,a);break}o>=10&&r.splice(0,1)}function ve(e,t,n){const{spacing:r,calibration:o}=n,{volumeUnit:a}=((e,t)=>{const{calibration:n,hasPixelSpacing:r}=e;let o=r?"mm":me;const a=r?"mm³":ge;let i=o+ye,s=1,l="";if(!n||!n.type&&!n.sequenceOfUltrasoundRegions)return{unit:o,areaUnit:i,scale:s,volumeUnit:a};if(n.type===de.UNCALIBRATED)return{unit:me,areaUnit:me+ye,scale:s,volumeUnit:ge};if(n.sequenceOfUltrasoundRegions){let e,r;if(Array.isArray(t)&&2===t.length)[e,r]=t;else if("function"==typeof t){const n=t();e=n[0],r=n[1]}let c=n.sequenceOfUltrasoundRegions.filter(t=>e[0]>=t.regionLocationMinX0&&e[0]<=t.regionLocationMaxX1&&e[1]>=t.regionLocationMinY0&&e[1]<=t.regionLocationMaxY1&&r[0]>=t.regionLocationMinX0&&r[0]<=t.regionLocationMaxX1&&r[1]>=t.regionLocationMinY0&&r[1]<=t.regionLocationMaxY1);if(!c?.length)return{unit:o,areaUnit:i,scale:s,volumeUnit:a};if(c=c.filter(e=>fe.includes(e.regionDataType)&&he.includes(`${e.physicalUnitsXDirection},${e.physicalUnitsYDirection}`)),!c.length)return{unit:me,areaUnit:me+ye,scale:s,volumeUnit:ge};const u=c[0],d=Math.abs(u.physicalDeltaX);if(!B(d,Math.abs(u.physicalDeltaY),.001))return{unit:me,areaUnit:me+ye,scale:s,volumeUnit:ge};s=1/d,l="US Region",o=pe[u.physicalUnitsXDirection]||"unknown",i=o+ye}else n.scale&&(s=n.scale);return[de.ERMF,de.USER,de.ERROR,de.PROJECTION,de.CALIBRATED,de.UNKNOWN].includes(n?.type)&&(l=n.type),{unit:o+(l?` ${l}`:""),areaUnit:i+(l?` ${l}`:""),scale:s,volumeUnit:a+(l?` ${l}`:"")}})({calibration:o,hasPixelSpacing:!0},[]),i=r?r[0]*r[1]*r[2]:1;return t.volume={value:Array.isArray(t.count.value)?t.count.value.map(e=>e*i):t.count.value*i,unit:a,name:"volume",label:"Volume"},t.maxIJKs=e.maxIJKs.filter(e=>void 0!==e.pointIJK),t.array.push(t.volume),e.maxIJKs=[],t}class Ie extends se{static{this.volumetricState={maxIJKs:[]}}static statsInit(e){super.statsInit(e),this.volumetricState={maxIJKs:[]}}static statsCallback(e){super.statsCallback(e),be(this.volumetricState,e)}static getStatistics(e){const t={...e,unit:e?.unit||"none",calibration:e?.calibration,hasPixelSpacing:e?.hasPixelSpacing},n=super.getStatistics(t);return ve(this.volumetricState,n,t)}}class Ee extends le{constructor(e){super(e),this.volumetricState={maxIJKs:[]}}statsInit(e){super.statsInit(e),this.volumetricState={maxIJKs:[]}}statsCallback(e){super.statsCallback(e),be(this.volumetricState,e)}getStatistics(e){const t={...e,unit:e?.unit||"none",calibration:e?.calibration,hasPixelSpacing:e?.hasPixelSpacing},n=super.getStatistics(t);return ve(this.volumetricState,n,t)}}class Ce{static{this.calculators=new Map}static{this.indices=[]}static{this.mode="collective"}static statsInit(e){const{storePointData:t,indices:n,mode:r}=e;this.mode=r,this.indices=n,this.calculators.clear(),"individual"===this.mode?n.forEach(e=>{this.calculators.set(e,new Ee({storePointData:t}))}):this.calculators.set(n,new Ee({storePointData:t}))}static statsCallback(e){const{segmentIndex:t,...n}=e;if(!t)throw new Error("Segment index is required for stats calculation");const r="individual"===this.mode?this.calculators.get(t):this.calculators.get(this.indices);if(!r)throw new Error(`No calculator found for segment ${t}`);r.statsCallback(n)}static getStatistics(e){if("individual"===this.mode){const t={};return this.calculators.forEach((n,r)=>{t[r]=n.getStatistics(e)}),t}return this.calculators.get(this.indices).getStatistics(e)}}var Oe=n(2017),Ae=n.n(Oe),xe=n(170);const _e=n.n(xe)()(),Se={vtkObject:()=>null};function we(e){if(null==e)return e;if(e.isA)return e;if(!e.vtkClass)return _e.console&&_e.console.error&&_e.console.error("Invalid VTK object"),null;const t=Se[e.vtkClass];if(!t)return _e.console&&_e.console.error&&_e.console.error(`No vtk class found for Object of type ${e.vtkClass}`),null;const n={...e};Object.keys(n).forEach(e=>{n[e]&&"object"==typeof n[e]&&n[e].vtkClass&&(n[e]=we(n[e]))});const r=t(n);return r&&r.modified&&r.modified(),r}we.register=function(e,t){Se[e]=t};class De extends Array{push(){for(let e=0;e<arguments.length;e++)this.includes(arguments[e])||super.push(arguments[e]);return this.length}}let Me=0;const Te=Symbol("void"),Le={};function Ne(){}["log","debug","info","warn","error","time","timeEnd","group","groupEnd"].forEach(e=>{Le[e]=Ne}),_e.console=console.hasOwnProperty("log")?console:Le;const Pe={debug:Ne,error:_e.console.error||Ne,info:_e.console.info||Ne,log:_e.console.log||Ne,warn:_e.console.warn||Ne};function ke(e,t){Pe[e]&&(Pe[e]=t||Ne)}function Re(){Pe.log(...arguments)}function Ve(){Pe.info(...arguments)}function je(){Pe.debug(...arguments)}function Ue(){Pe.error(...arguments)}function ze(){Pe.warn(...arguments)}const Ge={};function Fe(e){Ge[e]||(Pe.error(e),Ge[e]=!0)}const Be=Object.create(null);Be.Float32Array=Float32Array,Be.Float64Array=Float64Array,Be.Uint8Array=Uint8Array,Be.Int8Array=Int8Array,Be.Uint16Array=Uint16Array,Be.Int16Array=Int16Array,Be.Uint32Array=Uint32Array,Be.Int32Array=Int32Array,Be.Uint8ClampedArray=Uint8ClampedArray;try{Be.BigInt64Array=BigInt64Array,Be.BigUint64Array=BigUint64Array}catch{}function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return new(Be[e]||Float64Array)(...n)}function Ke(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return(Be[e]||Float64Array).from(...n)}function We(e){return e.charAt(0).toUpperCase()+e.slice(1)}function He(e){return We("_"===e[0]?e.slice(1):e)}function Ye(e){return e.charAt(0).toLowerCase()+e.slice(1)}function Je(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e3;const r=["TB","GB","MB","KB"];let o=Number(e),a="B";for(;o>n;)o/=n,a=r.pop();return`${o.toFixed(t)} ${a}`}function Xe(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:" ";const n=[];let r=e;for(;r>1e3;)n.push(("000"+r%1e3).slice(-3)),r=Math.floor(r/1e3);return r>0&&n.push(r),n.reverse(),n.join(t)}function qe(e){Object.keys(e).forEach(t=>{Array.isArray(e[t])&&(e[t]=[].concat(e[t]))})}function Qe(e){return e&&e.isA?e.getState():e}function Ze(e){setTimeout(e,0)}function et(e,t){const n=performance.now();e.finally(()=>{const e=performance.now()-n;t(e)})}function tt(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};qe(t);const n=[];if(Number.isInteger(t.mtime)||(t.mtime=++Me),"classHierarchy"in t){if(!(t.classHierarchy instanceof De)){const e=new De;for(let n=0;n<t.classHierarchy.length;n++)e.push(t.classHierarchy[n]);t.classHierarchy=e}}else t.classHierarchy=new De("vtkObject");function r(e){n[e]=null}return e.isDeleted=()=>!!t.deleted,e.modified=r=>{t.deleted?Ue("instance deleted - cannot call any method"):r&&r<e.getMTime()||(t.mtime=++Me,n.forEach(t=>t&&t(e)))},e.onModified=e=>{if(t.deleted)return Ue("instance deleted - cannot call any method"),null;const o=n.length;return n.push(e),function(e){return Object.freeze({unsubscribe:function(){r(e)}})}(o)},e.getMTime=()=>t.mtime,e.isA=e=>{let n=t.classHierarchy.length;for(;n--;)if(t.classHierarchy[n]===e)return!0;return!1},e.getClassName=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return t.classHierarchy[t.classHierarchy.length-1-e]},e.set=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!1;return Object.keys(n).forEach(i=>{const s=o?null:e[`set${We(i)}`];s&&Array.isArray(n[i])&&s.length>1?a=s(...n[i])||a:s?a=s(n[i])||a:(-1!==["mtime"].indexOf(i)||r||ze(`Warning: Set value to model directly ${i}, ${n[i]}`),a=t[i]!==n[i]||a,t[i]=n[i])}),a},e.get=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];if(!n.length)return t;const o={};return n.forEach(e=>{o[e]=t[e]}),o},e.getReferenceByName=e=>t[e],e.delete=()=>{Object.keys(t).forEach(e=>delete t[e]),n.forEach((e,t)=>r(t)),t.deleted=!0},e.getState=()=>{if(t.deleted)return null;const n={...t,vtkClass:e.getClassName()};Object.keys(n).forEach(e=>{var t;null===n[e]||void 0===n[e]||"_"===e[0]?delete n[e]:n[e].isA?n[e]=n[e].getState():Array.isArray(n[e])?n[e]=n[e].map(Qe):(t=n[e],Object.values(Be).some(e=>t instanceof e)&&(n[e]=Array.from(n[e])))});const r={};return Object.keys(n).sort().forEach(e=>{r[e]=n[e]}),r.mtime&&delete r.mtime,r},e.shallowCopy=function(n){let r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n.getClassName()!==e.getClassName())throw new Error(`Cannot ShallowCopy ${n.getClassName()} into ${e.getClassName()}`);const o=n.get(),a=Object.keys(t).sort();Object.keys(o).sort().forEach(e=>{const n=a.indexOf(e);-1===n?r&&je(`add ${e} in shallowCopy`):a.splice(n,1),t[e]=o[e]}),a.length&&r&&je(`Untouched keys: ${a.join(", ")}`),e.modified()},e.toJSON=function(){return e.getState()},e}const nt={object:(e,t,n)=>function(){return{...t[n.name]}}};function rt(e,t,n){n.forEach(n=>{if("object"==typeof n){const r=nt[n.type];e[`get${He(n.name)}`]=r?r(e,t,n):()=>t[n.name]}else e[`get${He(n)}`]=()=>t[n]})}const ot={enum(e,t,n){const r=`_on${He(n.name)}Changed`;return o=>{if("string"==typeof o){if(void 0!==n.enum[o])return t[n.name]!==n.enum[o]&&(t[n.name]=n.enum[o],e.modified(),!0);throw Ue(`Set Enum with invalid argument ${n}, ${o}`),new RangeError("Set Enum with invalid string argument")}if("number"==typeof o){if(t[n.name]!==o){if(-1!==Object.keys(n.enum).map(e=>n.enum[e]).indexOf(o)){const a=t[n.name];return t[n.name]=o,t[r]?.(e,t,o,a),e.modified(),!0}throw Ue(`Set Enum outside numeric range ${n}, ${o}`),new RangeError("Set Enum outside numeric range")}return!1}throw Ue(`Set Enum with invalid argument (String/Number) ${n}, ${o}`),new TypeError("Set Enum with invalid argument (String/Number)")}},object(e,t,n){1===n.params?.length&&ze('Setter of type "object" with a single "param" field is not supported');const r=`_on${He(n.name)}Changed`;return function(){for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];let s;if(s=a.length>1&&n.params?.length?n.params.reduce((e,t,n)=>Object.assign(e,{[t]:a[n]}),{}):a[0],!Ae()(t[n.name],s)){const o=t[n.name];return t[n.name]=s,t[r]?.(e,t,s,o),e.modified(),!0}return!1}}};function at(e){if("object"==typeof e){const t=ot[e.type];if(t)return(n,r)=>t(n,r,e);throw Ue(`No setter for field ${e}`),new TypeError("No setter for field")}return function(t,n){const r=`_on${He(e)}Changed`;return function(o){if(n.deleted)return Ue("instance deleted - cannot call any method"),!1;if(n[e]!==o){const a=n[e.name];return n[e]=o,n[r]?.(t,n,o,a),t.modified(),!0}return!1}}}function it(e,t,n){n.forEach(n=>{"object"==typeof n?e[`set${He(n.name)}`]=at(n)(e,t):e[`set${He(n)}`]=at(n)(e,t)})}function st(e,t,n){rt(e,t,n),it(e,t,n)}function lt(e,t,n){n.forEach(n=>{e[`get${He(n)}`]=()=>t[n]?Array.from(t[n]):t[n],e[`get${He(n)}ByReference`]=()=>t[n]})}function ct(e,t,n,r){let o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0;n.forEach(n=>{if(t[n]&&r&&t[n].length!==r)throw new RangeError(`Invalid initial number of values for array (${n})`);const a=`_on${He(n)}Changed`;e[`set${He(n)}`]=function(){if(t.deleted)return Ue("instance deleted - cannot call any method"),!1;for(var i=arguments.length,s=new Array(i),l=0;l<i;l++)s[l]=arguments[l];let c,u=s,d=!1;if(1===u.length&&(null==u[0]||u[0].length>=0)&&(u=u[0],d=!0),null==u)c=t[n]!==u;else{if(r&&u.length!==r){if(!(u.length<r&&void 0!==o))throw new RangeError(`Invalid number of values for array setter (${n})`);for(u=Array.from(u),d=!1;u.length<r;)u.push(o)}c=null==t[n]||t[n].length!==u.length;for(let e=0;!c&&e<u.length;++e)c=t[n][e]!==u[e];c&&d&&(u=Array.from(u))}if(c){const r=t[n.name];t[n]=u,t[a]?.(e,t,u,r),e.modified()}return c},e[`set${He(n)}From`]=e=>{const r=t[n];e.forEach((e,t)=>{r[t]=e})}})}function ut(e,t,n,r){let o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0;lt(e,t,n),ct(e,t,n,r,o)}function dt(e,t,n){for(let e=0;e<n.length;e++){const r=n[e];void 0!==t[r]&&(t[`_${r}`]=t[r],delete t[r])}}function mt(e,t,n,r){function o(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;t.deleted?Ue("instance deleted - cannot call any method"):r>=t.numberOfInputs?Ue(`algorithm ${e.getClassName()} only has ${t.numberOfInputs} input ports. To add more input ports, use addInputData()`):(t.inputData[r]!==n||t.inputConnection[r])&&(t.inputData[r]=n,t.inputConnection[r]=null,e.modified&&e.modified())}function a(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(t.deleted)Ue("instance deleted - cannot call any method");else{if(r>=t.numberOfInputs){let n=`algorithm ${e.getClassName()} only has `;return n+=`${t.numberOfInputs}`,n+=" input ports. To add more input ports, use addInputConnection()",void Ue(n)}t.inputData[r]=null,t.inputConnection[r]=n}}function i(){let e=t.numberOfInputs;for(;e&&!t.inputData[e-1]&&!t.inputConnection[e-1];)e--;return e===t.numberOfInputs&&t.numberOfInputs++,e}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return t.deleted?(Ue("instance deleted - cannot call any method"),null):(e.shouldUpdate()&&e.update(),t.output[n])}if(t.inputData?t.inputData=t.inputData.map(we):t.inputData=[],t.inputConnection?t.inputConnection=t.inputConnection.map(we):t.inputConnection=[],t.output?t.output=t.output.map(we):t.output=[],t.inputArrayToProcess?t.inputArrayToProcess=t.inputArrayToProcess.map(we):t.inputArrayToProcess=[],t.numberOfInputs=n,e.shouldUpdate=()=>{const n=e.getMTime();let o=1/0,a=r;for(;a--;){if(!t.output[a]||t.output[a].isDeleted())return!0;const e=t.output[a].getMTime();if(e<n)return!0;e<o&&(o=e)}for(a=t.numberOfInputs;a--;)if(t.inputConnection[a]?.filter.shouldUpdate()||e.getInputData(a)?.getMTime()>o)return!0;return!1},t.numberOfInputs){let n=t.numberOfInputs;for(;n--;)t.inputData.push(null),t.inputConnection.push(null);e.setInputData=o,e.setInputConnection=a,e.addInputData=function(e){t.deleted?Ue("instance deleted - cannot call any method"):o(e,i())},e.addInputConnection=function(e){t.deleted?Ue("instance deleted - cannot call any method"):a(e,i())},e.getInputData=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return t.inputConnection[e]&&(t.inputData[e]=t.inputConnection[e]()),t.inputData[e]},e.getInputConnection=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return t.inputConnection[e]}}r&&(e.getOutputData=s,e.getOutputPort=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const n=()=>s(t);return n.filter=e,n}),e.update=()=>{const n=[];if(t.numberOfInputs){let r=0;for(;r<t.numberOfInputs;)n[r]=e.getInputData(r),r++}e.shouldUpdate()&&e.requestData&&e.requestData(n,t.output)},e.getNumberOfInputPorts=()=>t.numberOfInputs,e.getNumberOfOutputPorts=()=>r||t.output.length,e.getInputArrayToProcess=e=>{const n=t.inputArrayToProcess[e],r=t.inputData[e];return n&&r?r[`get${n.fieldAssociation}`]().getArray(n.arrayName):null},e.setInputArrayToProcess=function(e,n,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Scalars";for(;t.inputArrayToProcess.length<e;)t.inputArrayToProcess.push(null);t.inputArrayToProcess[e]={arrayName:n,fieldAssociation:r,attributeType:o}}}const gt=Symbol("Event abort");function ft(e,t,n){const r=[],o=e.delete;let a=1;function i(e){for(let t=0;t<r.length;++t){const[n]=r[t];if(n===e)return void r.splice(t,1)}}e[`invoke${He(n)}`]=function(){if(t.deleted)return void Ue("instance deleted - cannot call any method");const n=r.slice();for(let t=0;t<n.length;++t){const[,r,o]=n[t];if(r)if(o<0)setTimeout(()=>r.apply(e,arguments),1-o);else if(r.apply(e,arguments)===gt)break}},e[`on${He(n)}`]=function(e){let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!e.apply)return console.error(`Invalid callback for event ${n}`),null;if(t.deleted)return Ue("instance deleted - cannot call any method"),null;const s=a++;return r.push([s,e,o]),r.sort((e,t)=>t[2]-e[2]),function(e){return Object.freeze({unsubscribe:function(){i(e)}})}(s)},e.delete=()=>{o(),r.forEach(e=>{let[t]=e;return i(t)})}}function ht(e,t){const n=function(){const t={};return e(t,{},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}),Object.freeze(t)};return t&&we.register(t,n),n}function pt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.filter(e=>!!e).map(e=>e(...n))}}function yt(e){return e&&e.isA&&e.isA("vtkObject")}function bt(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];if(yt(e)){if(r.indexOf(e)>=0)return n;r.push(e);const o=t(e);void 0!==o&&n.push(o);const a=e.get();Object.keys(a).forEach(e=>{const o=a[e];Array.isArray(o)?o.forEach(e=>{bt(e,t,n,r)}):bt(o,t,n,r)})}return n}function vt(e,t,n){var r=this;let o;const a=function(){for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];const l=r,c=n&&!o;clearTimeout(o),o=setTimeout(()=>{o=null,n||e.apply(l,i)},t),c&&e.apply(l,i)};return a.cancel=()=>clearTimeout(o),a}function It(e,t){let n=!1,r=null;function o(){n=!1,null!==r&&(a(...r),r=null)}function a(){for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];n?r=i:(n=!0,e(...i),setTimeout(o,t))}return a}function Et(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t.keystore=Object.assign(t.keystore||{},n),e.setKey=(e,n)=>{t.keystore[e]=n},e.getKey=e=>t.keystore[e],e.getAllKeys=()=>Object.keys(t.keystore),e.deleteKey=e=>delete t.keystore[e],e.clearKeystore=()=>e.getAllKeys().forEach(e=>delete t.keystore[e])}let Ct=1;const Ot="__root__";function At(e,t){Et(e,t);const n=e.delete;t.proxyId=""+Ct++,t.ui=JSON.parse(JSON.stringify(t.ui||[])),rt(e,t,["proxyId","proxyGroup","proxyName"]),st(e,t,["proxyManager"]);const r={},o={};function a(e,t){o[t]||(o[t]=[]);const n=o[t];for(let t=0;t<e.length;t++)n.push(e[t].name),r[e[t].name]=e[t],e[t].children&&e[t].children.length&&a(e[t].children,e[t].name)}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ot;const r=[],a=t.proxyId,s=function(){return o[arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ot]}(n)||[];for(let t=0;t<s.length;t++){const n=s[t],o=e[`get${He(n)}`],l={id:a,name:n,value:o?o():void 0},c=i(n);c.length&&(l.children=c),r.push(l)}return r}a(t.ui,Ot),e.updateUI=n=>{t.ui=JSON.parse(JSON.stringify(n||[])),Object.keys(r).forEach(e=>delete r[e]),Object.keys(o).forEach(e=>delete o[e]),a(t.ui,Ot),e.modified()},e.updateProxyProperty=(e,t)=>{const n=r[e];n?Object.assign(n,t):r[e]={...t}},e.activate=()=>{if(t.proxyManager){const n=`setActive${He(e.getProxyGroup().slice(0,-1))}`;t.proxyManager[n]&&t.proxyManager[n](e)}},t.propertyLinkSubscribers={},e.registerPropertyLinkForGC=(e,n)=>{n in t.propertyLinkSubscribers||(t.propertyLinkSubscribers[n]=[]),t.propertyLinkSubscribers[n].push(e)},e.gcPropertyLinks=n=>{const r=t.propertyLinkSubscribers[n]||[];for(;r.length;)r.pop().unbind(e)},t.propertyLinkMap={},e.getPropertyLink=function(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t.propertyLinkMap[e])return t.propertyLinkMap[e];let r=null;const o=[];let a=0,i=!1;function s(n){let s=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(i)return null;const l=[];let c=null;for(a=o.length;a--;){const e=o[a];e.instance===n?c=e:l.push(e)}if(!c)return null;const u=c.instance[`get${He(c.propertyName)}`]();if(!function(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}return!1}(u,r)||s){for(r=u,i=!0;l.length;){const e=l.pop();e.instance.set({[e.propertyName]:r})}i=!1}return t.propertyLinkMap[e].persistent&&(t.propertyLinkMap[e].value=u),u}function l(e,t){const n=[];for(a=o.length;a--;){const r=o[a];r.instance!==e||r.propertyName!==t&&void 0!==t||(r.subscription.unsubscribe(),n.push(a))}for(;n.length;)o.splice(n.pop(),1)}const c={bind:function(n,r){let a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const i=n.onModified(s),c=o[0];return o.push({instance:n,propertyName:r,subscription:i}),a&&(t.propertyLinkMap[e].persistent&&void 0!==t.propertyLinkMap[e].value?n.set({[r]:t.propertyLinkMap[e].value}):c&&s(c.instance,!0)),{unsubscribe:()=>l(n,r)}},unbind:l,unsubscribe:function(){for(;o.length;)o.pop().subscription.unsubscribe()},persistent:n};return t.propertyLinkMap[e]=c,c},e.listPropertyNames=()=>i().map(e=>e.name),e.getPropertyByName=e=>i().find(t=>t.name===e),e.getPropertyDomainByName=e=>(r[e]||{}).domain,e.getProxySection=()=>({id:t.proxyId,name:t.proxyGroup,ui:t.ui,properties:i()}),e.delete=()=>{const r=Object.keys(t.propertyLinkMap);let o=r.length;for(;o--;)t.propertyLinkMap[r[o]].unsubscribe();Object.keys(t.propertyLinkSubscribers).forEach(e.gcPropertyLinks),n()},e.getState=()=>null,Ze(function(){if(t.links)for(let n=0;n<t.links.length;n++){const{link:r,property:o,persistent:a,updateOnBind:i,type:s}=t.links[n];if("application"===s){const n=t.proxyManager.getPropertyLink(r,a);e.registerPropertyLinkForGC(n,"application"),n.bind(e,o,i)}}})}function xt(e,t,n){const r=e.delete,o=[],a=Object.keys(n);let i=a.length;for(;i--;){const r=a[i],{modelKey:s,property:l,modified:c=!0}=n[r],u=He(l),d=He(r);e[`get${d}`]=t[s][`get${u}`],e[`set${d}`]=t[s][`set${u}`],c&&o.push(t[s].onModified(e.modified))}e.delete=()=>{for(;o.length;)o.pop().unsubscribe();r()}}function _t(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};function o(e){const n=Object.keys(e);let r=n.length;for(;r--;){const o=n[r];t[o].set(e[o])}}t.this=e;const a=Object.keys(r);let i=a.length;for(;i--;){const s=a[i];t[s]=r[s];const l=n[s];e[`set${He(s)}`]=n=>{n!==t[s]&&(t[s]=n,o(l[n]),e.modified())}}a.length&&rt(e,t,a)}function St(e){let t=0,n=0,r=0,o=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),r=10*t,o=10*n,"deltaY"in e&&(o=e.deltaY),"deltaX"in e&&(r=e.deltaX),(r||o)&&e.deltaMode&&(1===e.deltaMode?(r*=40,o*=40):(r*=800,o*=800)),r&&!t&&(t=r<1?-1:1),o&&!n&&(n=o<1?-1:1),{spinX:t,spinY:n||t,pixelX:r,pixelY:o||r}}var wt={algo:mt,capitalize:We,chain:pt,debounce:vt,enumToString:function(e,t){return Object.keys(e).find(n=>e[n]===t)},event:ft,EVENT_ABORT:gt,formatBytesToProperUnit:Je,formatNumbersWithThousandSeparator:Xe,get:rt,getArray:lt,getCurrentGlobalMTime:function(){return Me},getStateArrayMapFunc:Qe,isVtkObject:yt,keystore:Et,measurePromiseExecution:et,moveToProtected:dt,newInstance:ht,newTypedArray:$e,newTypedArrayFrom:Ke,normalizeWheel:St,obj:tt,proxy:At,proxyPropertyMapping:xt,proxyPropertyState:_t,safeArrays:qe,set:it,setArray:ct,setGet:st,setGetArray:ut,setImmediate:Ze,setLoggerFunction:ke,throttle:It,traverseInstanceTree:bt,TYPED_ARRAYS:Be,uncapitalize:Ye,VOID:Te,vtkDebugMacro:je,vtkErrorMacro:Ue,vtkInfoMacro:Ve,vtkLogMacro:Re,vtkOnceErrorMacro:Fe,vtkWarningMacro:ze,objectSetterMap:ot},Dt=Object.freeze({__proto__:null,VOID:Te,setLoggerFunction:ke,vtkLogMacro:Re,vtkInfoMacro:Ve,vtkDebugMacro:je,vtkErrorMacro:Ue,vtkWarningMacro:ze,vtkOnceErrorMacro:Fe,TYPED_ARRAYS:Be,newTypedArray:$e,newTypedArrayFrom:Ke,capitalize:We,_capitalize:He,uncapitalize:Ye,formatBytesToProperUnit:Je,formatNumbersWithThousandSeparator:Xe,setImmediateVTK:Ze,measurePromiseExecution:et,obj:tt,get:rt,set:it,setGet:st,getArray:lt,setArray:ct,setGetArray:ut,moveToProtected:dt,algo:mt,EVENT_ABORT:gt,event:ft,newInstance:ht,chain:pt,isVtkObject:yt,traverseInstanceTree:bt,debounce:vt,throttle:It,keystore:Et,proxy:At,proxyPropertyMapping:xt,proxyPropertyState:_t,normalizeWheel:St,default:wt});const Mt={VOID:"",CHAR:"Int8Array",SIGNED_CHAR:"Int8Array",UNSIGNED_CHAR:"Uint8Array",UNSIGNED_CHAR_CLAMPED:"Uint8ClampedArray",SHORT:"Int16Array",UNSIGNED_SHORT:"Uint16Array",INT:"Int32Array",UNSIGNED_INT:"Uint32Array",FLOAT:"Float32Array",DOUBLE:"Float64Array"};var Tt={DefaultDataType:Mt.FLOAT,DataTypeByteSize:{Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},VtkDataTypes:Mt};n(7391);const{vtkErrorMacro:Lt,vtkWarningMacro:Nt}=wt;function Pt(e){return()=>Lt(`vtkMath::${e} - NOT IMPLEMENTED`)}function kt(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3;const t=Array(e);for(let n=0;n<e;++n)t[n]=0;return t}const{round:Rt,floor:Vt,ceil:jt,min:Ut,max:zt}=Math;function Gt(e,t,n){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}function Ft(e,t,n,r){return r[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r}function Bt(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function $t(e,t,n){const r=e[1]*t[2]-e[2]*t[1],o=e[2]*t[0]-e[0]*t[2],a=e[0]*t[1]-e[1]*t[0];return n[0]=r,n[1]=o,n[2]=a,n}function Kt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;switch(t){case 1:return Math.abs(e);case 2:return Math.sqrt(e[0]*e[0]+e[1]*e[1]);case 3:return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);default:{let n=0;for(let r=0;r<t;r++)n+=e[r]*e[r];return Math.sqrt(n)}}}function Wt(e,t){return(e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1])+(e[2]-t[2])*(e[2]-t[2])}function Ht(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 2===t.length?t[0][0]*t[1][1]-t[1][0]*t[0][1]:4===t.length?t[0]*t[3]-t[1]*t[2]:Number.NaN}function Yt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!`${e}`.includes("e"))return+`${Math.round(`${e}e+${t}`)}e-${t}`;const n=`${e}`.split("e");let r="";return+n[1]+t>0&&(r="+"),+`${Math.round(`${+n[0]}e${r}${+n[1]+t}`)}e-${t}`}function Jt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[0,0,0],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return t[0]=Yt(e[0],n),t[1]=Yt(e[1],n),t[2]=Yt(e[2],n),t}function Xt(e,t,n){if(2===n){const n=kt(2),r=Ht(e[0],e[1],e[2],e[3]);return 0===r?0:(n[0]=(e[3]*t[0]-e[1]*t[1])/r,n[1]=(-e[2]*t[0]+e[0]*t[1])/r,t[0]=n[0],t[1]=n[1],1)}if(1===n)return 0===e[0]?0:(t[0]/=e[0],1);const r=kt(n);return 0===function(e,t,n){let r,o,a,i,s,l,c,u=0;const d=kt(n);for(r=0;r<n;r++){for(i=0,o=0;o<n;o++)(c=Math.abs(e[r*n+o]))>i&&(i=c);if(0===i)return Nt("Unable to factor linear system"),0;d[r]=1/i}for(o=0;o<n;o++){for(r=0;r<o;r++){for(s=e[r*n+o],a=0;a<r;a++)s-=e[r*n+a]*e[a*n+o];e[r*n+o]=s}for(i=0,r=o;r<n;r++){for(s=e[r*n+o],a=0;a<o;a++)s-=e[r*n+a]*e[a*n+o];e[r*n+o]=s,(l=d[r]*Math.abs(s))>=i&&(i=l,u=r)}if(o!==u){for(a=0;a<n;a++)l=e[u*n+a],e[u*n+a]=e[o*n+a],e[o*n+a]=l;d[u]=d[o]}if(t[o]=u,Math.abs(e[o*n+o])<=1e-12)return Nt("Unable to factor linear system"),0;if(o!==n-1)for(l=1/e[o*n+o],r=o+1;r<n;r++)e[r*n+o]*=l}return 1}(e,r,n)?0:(function(e,t,n,r){let o,a,i,s,l;for(i=-1,o=0;o<r;o++){if(s=t[o],l=n[s],n[s]=n[o],i>=0)for(a=i;a<=o-1;a++)l-=e[o*r+a]*n[a];else 0!==l&&(i=o);n[o]=l}for(o=r-1;o>=0;o--){for(l=n[o],a=o+1;a<r;a++)l-=e[o*r+a]*n[a];n[o]=l/e[o*r+o]}}(e,r,t,n),1)}function qt(e,t,n){return e<t?t:e>n?n:e}function Qt(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0,0,0];return r[0]=qt(e[0],t[0],n[0]),r[1]=qt(e[1],t[1],n[1]),r[2]=qt(e[2],t[2],n[2]),r}Pt("ceilLog2"),Pt("factorial"),Pt("gaussian"),Pt("GetScalarTypeFittingRange"),Pt("GetAdjustedScalarRange");const{isFinite:Zt,isNaN:en}=Number,{vtkErrorMacro:tn}=Dt,{DefaultDataType:nn}=Tt;function rn(e,t,n){const r=e.length;let o,a,i=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(a=t;a<r;a+=n)if(!Number.isNaN(e[a])){i=e[a],s=i;break}for(;a<r;a+=n)o=e[a],o<i?i=o:o>s&&(s=o);return{min:i,max:s}}function on(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(t<0&&n>1){const t=e.length/n,r=new Float64Array(t);for(let o=0,a=0;o<t;++o){for(let t=a+n;a<t;++a)r[o]+=e[a]*e[a];r[o]**=.5}return rn(r,0,1)}return rn(e,t<0?0:t,n)}function an(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=e||[];for(;n.length<=t;)n.push(null);return n}function sn(e){return Object.prototype.toString.call(e).slice(8,-1)}const ln={computeRange:on,createRangeHelper:function(){let e=Number.MAX_VALUE,t=-Number.MAX_VALUE,n=0,r=0;return{add(o){e>o&&(e=o),t<o&&(t=o),n++,r+=o},get:()=>({min:e,max:t,count:n,sum:r,mean:r/n}),getRange:()=>({min:e,max:t})}},fastComputeRange:rn,getDataType:sn,getMaxNorm:function(e){const t=e.getNumberOfComponents();let n=0;const r=new Array(t);for(let o=0;o<e.getNumberOfTuples();++o){e.getTuple(o,r);const a=Kt(r,t);a>n&&(n=a)}return n}},cn={name:"",numberOfComponents:1,dataType:nn,rangeTuple:[0,0]};function un(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(Object.assign(t,cn,n),Array.isArray(n.values)&&void 0===n.dataType&&console.warn("vtkDataArray.newInstance: no dataType provided, converting to Float32Array"),!t.empty&&!t.values&&!t.size)throw new TypeError("Cannot create vtkDataArray object without: size > 0, values");if(t.values?Array.isArray(t.values)&&(t.values=Ke(t.dataType,t.values)):t.values=$e(t.dataType,t.size),t.values&&(t.size=t.size??t.values.length,t.dataType=sn(t.values)),tt(e,t),it(e,t,["name","numberOfComponents"]),t.size%t.numberOfComponents!==0)throw new RangeError("model.size is not a multiple of model.numberOfComponents");!function(e,t){function n(n){if(n<0)return!1;const r=e.getNumberOfComponents(),o=t.values.length/(r>0?r:1);if(n===o)return!0;if(n>o){const e=t.values;return t.values=$e(t.dataType,(n+o)*r),t.values.set(e),!0}return t.size>n*r&&(t.size=n*r,e.dataChange()),!0}t.classHierarchy.push("vtkDataArray"),e.dataChange=()=>{t.ranges=null,e.modified()},e.resize=r=>{n(r);const o=r*e.getNumberOfComponents();return t.size!==o&&(t.size=o,e.dataChange(),!0)},e.initialize=()=>{e.resize(0)},e.getElementComponentSize=()=>t.values.BYTES_PER_ELEMENT,e.getComponent=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t.values[e*t.numberOfComponents+n]},e.setComponent=(n,r,o)=>{o!==t.values[n*t.numberOfComponents+r]&&(t.values[n*t.numberOfComponents+r]=o,e.dataChange())},e.getValue=n=>{const r=n/t.numberOfComponents,o=n%t.numberOfComponents;return e.getComponent(r,o)},e.setValue=(n,r)=>{const o=n/t.numberOfComponents,a=n%t.numberOfComponents;e.setComponent(o,a,r)},e.getData=()=>t.size===t.values.length?t.values:t.values.subarray(0,t.size),e.getRange=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,r=n;r<0&&(r=1===t.numberOfComponents?0:t.numberOfComponents);let o=null;return t.ranges||(t.ranges=an(t.ranges,t.numberOfComponents)),o=t.ranges[r],o?(t.rangeTuple[0]=o.min,t.rangeTuple[1]=o.max,t.rangeTuple):(o=on(e.getData(),n,t.numberOfComponents),t.ranges[r]=o,t.rangeTuple[0]=o.min,t.rangeTuple[1]=o.max,t.rangeTuple)},e.setRange=(e,n)=>{t.ranges||(t.ranges=an(t.ranges,t.numberOfComponents));const r={min:e.min,max:e.max};return t.ranges[n]=r,t.rangeTuple[0]=r.min,t.rangeTuple[1]=r.max,t.rangeTuple},e.getRanges=function(){if(arguments.length>0&&void 0!==arguments[0]&&!arguments[0])return structuredClone(t.ranges);const n=[];for(let r=0;r<t.numberOfComponents;r++){const[t,o]=e.getRange(r),a={min:t,max:o};n.push(a)}if(t.numberOfComponents>1){const[t,r]=e.getRange(-1),o={min:t,max:r};n.push(o)}return n},e.setTuple=(e,n)=>{const r=e*t.numberOfComponents;for(let e=0;e<t.numberOfComponents;e++)t.values[r+e]=n[e]},e.setTuples=(e,n)=>{let r=e*t.numberOfComponents;const o=Math.min(n.length,t.size-r);for(let e=0;e<o;)t.values[r++]=n[e++]},e.insertTuple=(r,o)=>(t.size<=r*t.numberOfComponents&&(t.size=(r+1)*t.numberOfComponents,n(r+1)),e.setTuple(r,o),r),e.insertTuples=(r,o)=>{const a=r+o.length/t.numberOfComponents;return t.size<a*t.numberOfComponents&&(t.size=a*t.numberOfComponents,n(a)),e.setTuples(r,o),a},e.insertNextTuple=n=>{const r=t.size/t.numberOfComponents;return e.insertTuple(r,n)},e.insertNextTuples=n=>{const r=t.size/t.numberOfComponents;return e.insertTuples(r,n)},e.findTuple=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-6;for(let r=0;r<t.size;r+=t.numberOfComponents)if(Math.abs(e[0]-t.values[r])<=n){let o=!0;for(let a=1;a<t.numberOfComponents;++a)if(Math.abs(e[a]-t.values[r+a])>n){o=!1;break}if(o)return r/t.numberOfComponents}return-1},e.getTuple=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const r=t.numberOfComponents||1,o=e*r;switch(r){case 4:n[3]=t.values[o+3];case 3:n[2]=t.values[o+2];case 2:n[1]=t.values[o+1];case 1:n[0]=t.values[o];break;default:for(let e=r-1;e>=0;--e)n[e]=t.values[o+e]}return n},e.getTuples=(n,r)=>{const o=(n??0)*t.numberOfComponents,a=(r??e.getNumberOfTuples())*t.numberOfComponents,i=e.getData().subarray(o,a);return i.length>0?i:null},e.getTupleLocation=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1)*t.numberOfComponents},e.getNumberOfComponents=()=>t.numberOfComponents,e.getNumberOfValues=()=>t.size,e.getNumberOfTuples=()=>t.size/t.numberOfComponents,e.getDataType=()=>t.dataType,e.newClone=()=>dn({empty:!0,name:t.name,dataType:t.dataType,numberOfComponents:t.numberOfComponents}),e.getName=()=>(t.name||(e.modified(),t.name=`vtkDataArray${e.getMTime()}`),t.name),e.setData=(n,r)=>{t.values=n,t.size=n.length,t.dataType=sn(n),r&&(t.numberOfComponents=r),t.size%t.numberOfComponents!==0&&(t.numberOfComponents=1),e.dataChange()},e.getState=()=>{if(t.deleted)return null;const n={...t,vtkClass:e.getClassName()};n.values=Array.from(n.values),delete n.buffer,Object.keys(n).forEach(e=>{n[e]||delete n[e]});const r={};return Object.keys(n).sort().forEach(e=>{r[e]=n[e]}),r.mtime&&delete r.mtime,r},e.deepCopy=n=>{const r=e.getDataType(),o=t.values;e.shallowCopy(n),t.ranges=structuredClone(n.getRanges()),o?.length>=n.getNumberOfValues()&&r===n.getDataType()?(o.set(n.getData()),t.values=o,e.dataChange()):e.setData(n.getData().slice())},e.interpolateTuple=(n,r,o,a,i,s)=>{const l=t.numberOfComponents||1;l===r.getNumberOfComponents()&&l===a.getNumberOfComponents()||tn("numberOfComponents must match");const c=r.getTuple(o),u=a.getTuple(i),d=[];switch(d.length=l,l){case 4:d[3]=c[3]+(u[3]-c[3])*s;case 3:d[2]=c[2]+(u[2]-c[2])*s;case 2:d[1]=c[1]+(u[1]-c[1])*s;case 1:d[0]=c[0]+(u[0]-c[0])*s;break;default:for(let e=0;e<l;e++)d[e]=c[e]+(u[e]-c[e])*s}return e.insertTuple(n,d)}}(e,t)}const dn=ht(un,"vtkDataArray");var mn={newInstance:dn,extend:un,...ln,...Tt};function gn(e){let t=0;return e.filter((e,n)=>n===t&&(t+=e+1,!0))}function fn(e){let t=0;for(let n=0;n<e.length;)n+=e[n]+1,t++;return t}const hn={extractCellSizes:gn,getNumberOfCells:fn};function pn(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};mn.extend(e,t,function(e){return{empty:!0,numberOfComponents:1,dataType:Mt.UNSIGNED_INT,...e}}(n)),function(e,t){t.classHierarchy.push("vtkCellArray");const n={...e};e.getNumberOfCells=n=>void 0===t.numberOfCells||n?(t.cellSizes?t.numberOfCells=t.cellSizes.length:t.numberOfCells=fn(e.getData()),t.numberOfCells):t.numberOfCells,e.getCellSizes=n=>void 0===t.cellSizes||n?(t.cellSizes=gn(e.getData()),t.cellSizes):t.cellSizes,e.resize=r=>{const o=e.getNumberOfTuples();n.resize(r);const a=e.getNumberOfTuples();a<o&&(0===a?(t.numberOfCells=0,t.cellSizes=[]):(t.numberOfCells=void 0,t.cellSizes=void 0))},e.setData=e=>{n.setData(e,1),t.numberOfCells=void 0,t.cellSizes=void 0},e.getCell=e=>{let n=e;const r=t.values[n++];return t.values.subarray(n,n+r)},e.insertNextCell=n=>{const r=e.getNumberOfCells();return e.insertNextTuples([n.length,...n]),++t.numberOfCells,null!=t.cellSizes&&t.cellSizes.push(n.length),r}}(e,t)}var yn={newInstance:wt.newInstance(pn,"vtkCellArray"),extend:pn,...hn};const{vtkErrorMacro:bn}=wt,vn=[1,-1,1,-1,1,-1],In={empty:!0,numberOfComponents:3,dataType:Mt.FLOAT,bounds:[1,-1,1,-1,1,-1]};function En(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,In,n),mn.extend(e,t,n),function(e,t){t.classHierarchy.push("vtkPoints"),e.getNumberOfPoints=e.getNumberOfTuples,e.setNumberOfPoints=function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;e.getNumberOfPoints()!==n&&(t.size=n*r,t.values=wt.newTypedArray(t.dataType,t.size),e.setNumberOfComponents(r),e.modified())},e.setPoint=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.setTuple(t,r)},e.getPoint=e.getTuple,e.findPoint=e.findTuple,e.insertNextPoint=(t,n,r)=>e.insertNextTuple([t,n,r]),e.getBounds=()=>{if(3===e.getNumberOfComponents()){const n=e.getRange(0);t.bounds[0]=n[0],t.bounds[1]=n[1];const r=e.getRange(1);t.bounds[2]=r[0],t.bounds[3]=r[1];const o=e.getRange(2);return t.bounds[4]=o[0],t.bounds[5]=o[1],t.bounds}if(2!==e.getNumberOfComponents())return bn(`getBounds called on an array with components of\n        ${e.getNumberOfComponents()}`),vn;const n=e.getRange(0);t.bounds[0]=n[0],t.bounds[1]=n[1];const r=e.getRange(1);return t.bounds[2]=r[0],t.bounds[3]=r[1],t.bounds[4]=0,t.bounds[5]=0,t.bounds},e.computeBounds=e.getBounds,e.setNumberOfComponents(t.numberOfComponents<2?3:t.numberOfComponents)}(e,t)}var Cn={newInstance:wt.newInstance(En,"vtkPoints"),extend:En};const On={bounds:[-1,-1,-1,-1,-1,-1],pointsIds:[]};function An(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,On,n),wt.obj(e,t),t.points||(t.points=Cn.newInstance()),wt.get(e,t,["points","pointsIds"]),function(e,t){t.classHierarchy.push("vtkCell"),e.initialize=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(n){t.pointsIds=n;let r=t.points.getData();r.length!==3*t.pointsIds.length&&(r=wt.newTypedArray(e.getDataType(),3*t.pointsIds.length));const o=e.getData();t.pointsIds.forEach((e,t)=>{let n=3*e,a=3*t;r[a]=o[n],r[++a]=o[++n],r[++a]=o[++n]}),t.points.setData(r)}else{t.points=e,t.pointsIds=new Array(e.getNumberOfPoints());for(let n=e.getNumberOfPoints()-1;n>=0;--n)t.pointsIds[n]=n}},e.getBounds=()=>{const e=t.points.getNumberOfPoints(),n=[];if(e){t.points.getPoint(0,n),t.bounds[0]=n[0],t.bounds[1]=n[0],t.bounds[2]=n[1],t.bounds[3]=n[1],t.bounds[4]=n[2],t.bounds[5]=n[2];for(let r=1;r<e;r++)t.points.getPoint(r,n),t.bounds[0]=n[0]<t.bounds[0]?n[0]:t.bounds[0],t.bounds[1]=n[0]>t.bounds[1]?n[0]:t.bounds[1],t.bounds[2]=n[1]<t.bounds[2]?n[1]:t.bounds[2],t.bounds[3]=n[1]>t.bounds[3]?n[1]:t.bounds[3],t.bounds[4]=n[2]<t.bounds[4]?n[2]:t.bounds[4],t.bounds[5]=n[2]>t.bounds[5]?n[2]:t.bounds[5]}else(r=t.bounds)[0]=1,r[1]=-1,r[2]=1,r[3]=-1,r[4]=1,r[5]=-1;var r;return t.bounds},e.getLength2=()=>{e.getBounds();let n=0,r=0;for(let e=0;e<3;e++)r=t.bounds[2*e+1]-t.bounds[2*e],n+=r*r;return n},e.getParametricDistance=e=>{let t,n=0;for(let r=0;r<3;r++)t=e[r]<0?-e[r]:e[r]>1?e[r]-1:0,t>n&&(n=t);return n},e.getNumberOfPoints=()=>t.points.getNumberOfPoints(),e.deepCopy=e=>{e.initialize(t.points,t.pointsIds)},e.getCellDimension=()=>{},e.intersectWithLine=(e,t,n,r,o,a,i)=>{},e.evaluatePosition=(e,t,n,r,o,a)=>{wt.vtkErrorMacro("vtkCell.evaluatePosition is not implemented.")}}(e,t)}var xn={newInstance:wt.newInstance(An,"vtkCell"),extend:An};const _n={array:null,maxId:0,extend:0};function Sn(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,_n,n),wt.obj(e,t),function(e,t){t.classHierarchy.push("vtkCellLinks"),e.buildLinks=n=>{const r=n.getPoints().getNumberOfPoints(),o=n.getNumberOfCells(),a=new Uint32Array(r);if(n.isA("vtkPolyData")){for(let t=0;t<o;++t){const{cellPointIds:r}=n.getCellPoints(t);r.forEach(t=>{e.incrementLinkCount(t)})}e.allocateLinks(r),t.maxId=r-1;for(let t=0;t<o;++t){const{cellPointIds:r}=n.getCellPoints(t);r.forEach(n=>{e.insertCellReference(n,a[n]++,t)})}}else{for(let t=0;t<o;t++)xn.newInstance().getPointsIds().forEach(t=>{e.incrementLinkCount(t)});e.allocateLinks(r),t.maxId=r-1;for(let t=0;t<o;++t)xn.newInstance().getPointsIds().forEach(n=>{e.insertCellReference(n,a[n]++,t)})}},e.allocate=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3;t.array=Array(e).fill().map(()=>({ncells:0,cells:null})),t.extend=n,t.maxId=-1},e.initialize=()=>{t.array=null},e.getLink=e=>t.array[e],e.getNcells=e=>t.array[e].ncells,e.getCells=e=>t.array[e].cells,e.insertNextPoint=e=>{t.array.push({ncells:e,cells:Array(e)}),++t.maxId},e.insertNextCellReference=(e,n)=>{t.array[e].cells[t.array[e].ncells++]=n},e.deletePoint=e=>{t.array[e].ncells=0,t.array[e].cells=null},e.removeCellReference=(e,n)=>{t.array[n].cells=t.array[n].cells.filter(t=>t!==e),t.array[n].ncells=t.array[n].cells.length},e.addCellReference=(e,n)=>{t.array[n].cells[t.array[n].ncells++]=e},e.resizeCellList=(e,n)=>{t.array[e].cells.length=n},e.squeeze=()=>{!function(e,t){let n=t;for(t>=e.array.length&&(n+=e.array.length);n>e.array.length;)e.array.push({ncells:0,cells:null});e.array.length=n}(t,t.maxId+1)},e.reset=()=>{t.maxId=-1},e.deepCopy=e=>{t.array=[...e.array],t.extend=e.extend,t.maxId=e.maxId},e.incrementLinkCount=e=>{++t.array[e].ncells},e.allocateLinks=e=>{for(let n=0;n<e;++n)t.array[n].cells=new Array(t.array[n].ncells)},e.insertCellReference=(e,n,r)=>{t.array[e].cells[n]=r}}(e,t)}var wn={newInstance:wt.newInstance(Sn,"vtkCellLinks"),extend:Sn};const Dn=0,Mn=1,Tn=2,Ln=3,Nn=4,Pn=5,kn=6,Rn=7,Vn=9,jn=21,Un=41,zn=42,Gn=["vtkEmptyCell","vtkVertex","vtkPolyVertex","vtkLine","vtkPolyLine","vtkTriangle","vtkTriangleStrip","vtkPolygon","vtkPixel","vtkQuad","vtkTetra","vtkVoxel","vtkHexahedron","vtkWedge","vtkPyramid","vtkPentagonalPrism","vtkHexagonalPrism","UnknownClass","UnknownClass","UnknownClass","UnknownClass","vtkQuadraticEdge","vtkQuadraticTriangle","vtkQuadraticQuad","vtkQuadraticTetra","vtkQuadraticHexahedron","vtkQuadraticWedge","vtkQuadraticPyramid","vtkBiQuadraticQuad","vtkTriQuadraticHexahedron","vtkQuadraticLinearQuad","vtkQuadraticLinearWedge","vtkBiQuadraticQuadraticWedge","vtkBiQuadraticQuadraticHexahedron","vtkBiQuadraticTriangle","vtkCubicLine","vtkQuadraticPolygon","UnknownClass","UnknownClass","UnknownClass","UnknownClass","vtkConvexPointSet","UnknownClass","UnknownClass","UnknownClass","UnknownClass","UnknownClass","UnknownClass","UnknownClass","UnknownClass","UnknownClass","vtkParametricCurve","vtkParametricSurface","vtkParametricTriSurface","vtkParametricQuadSurface","vtkParametricTetraRegion","vtkParametricHexRegion","UnknownClass","UnknownClass","UnknownClass","vtkHigherOrderEdge","vtkHigherOrderTriangle","vtkHigherOrderQuad","vtkHigherOrderPolygon","vtkHigherOrderTetrahedron","vtkHigherOrderWedge","vtkHigherOrderPyramid","vtkHigherOrderHexahedron"],Fn={getClassNameFromTypeId:function(e){return e<Gn.length?Gn[e]:"UnknownClass"},getTypeIdFromClassName:function(e){return Gn.findIndex(e)},isLinear:function(e){return e<jn||e===Un||e===zn},hasSubCells:function(e){return e===kn||e===Nn||e===Tn}},Bn={size:0,maxId:-1,extend:1e3};function $n(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,Bn,n),wt.obj(e,t),wt.get(e,t,["size","maxId","extend"]),wt.getArray(e,t,["typeArray","locationArray"]),function(e,t){t.classHierarchy.push("vtkCellTypes"),e.allocate=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:512,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3;t.size=e>0?e:1,t.extend=n>0?n:1,t.maxId=-1,t.typeArray=new Uint8Array(e),t.locationArray=new Uint32Array(e)},e.insertCell=(e,n,r)=>{t.typeArray[e]=n,t.locationArray[e]=r,e>t.maxId&&(t.maxId=e)},e.insertNextCell=(n,r)=>(e.insertCell(++t.maxId,n,r),t.maxId),e.setCellTypes=(e,n,r)=>{t.size=e,t.typeArray=n,t.locationArray=r,t.maxId=e-1},e.getCellLocation=e=>t.locationArray[e],e.deleteCell=e=>{t.typeArray[e]=Dn},e.getNumberOfTypes=()=>t.maxId+1,e.isType=t=>{const n=e.getNumberOfTypes();for(let r=0;r<n;++r)if(t===e.getCellType(r))return!0;return!1},e.insertNextType=t=>e.insertNextCell(t,-1),e.getCellType=e=>t.typeArray[e],e.reset=()=>{t.maxId=-1},e.deepCopy=n=>{e.allocate(n.getSize(),n.getExtend()),t.typeArray.set(n.getTypeArray()),t.locationArray.set(n.getLocationArray()),t.maxId=n.getMaxId()}}(e,t)}var Kn={newInstance:wt.newInstance($n,"vtkCellTypes"),extend:$n,...Fn},Wn={IntersectionState:{NO_INTERSECTION:0,YES_INTERSECTION:1,ON_LINE:2}};function Hn(){var e=new $(4);return $!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}!function(){var e;e=new $(4),$!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0)}();var Yn;K(),W(1,0,0),W(0,1,0),Hn(),Hn(),Yn=new $(9),$!=Float32Array&&(Yn[1]=0,Yn[2]=0,Yn[3]=0,Yn[5]=0,Yn[6]=0,Yn[7]=0),Yn[0]=1,Yn[4]=1,Yn[8]=1;const{IntersectionState:Jn}=Wn;function Xn(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const o={t:Number.MIN_VALUE,distance:0},a=[];let i;a[0]=n[0]-t[0],a[1]=n[1]-t[1],a[2]=n[2]-t[2];const s=a[0]*(e[0]-t[0])+a[1]*(e[1]-t[1])+a[2]*(e[2]-t[2]),l=Bt(a,a);let c=1e-5*s;return 0!==l&&(o.t=s/l),c<0&&(c=-c),-c<l&&l<c||l<=0||o.t<0?i=t:o.t>1?i=n:(i=a,a[0]=t[0]+o.t*a[0],a[1]=t[1]+o.t*a[1],a[2]=t[2]+o.t*a[2]),r&&(r[0]=i[0],r[1]=i[1],r[2]=i[2]),o.distance=Wt(i,e),o}function qn(e,t,n,r,o,a){const i=[],s=[],l=[];o[0]=0,a[0]=0,Gt(t,e,i),Gt(r,n,s),Gt(n,e,l);const c=[Bt(i,i),-Bt(i,s),-Bt(i,s),Bt(s,s)],u=[];if(u[0]=Bt(i,l),u[1]=-Bt(s,l),0===Xt(c,u,2)){let i=Number.MAX_VALUE;const s=[e,t,n,r],l=[n,n,e,e],c=[r,r,t,t];let u;a[0],a[0],o[0],o[0],o[0],o[0],a[0],a[0];for(let e=0;e<4;e++)u=Xn(s[e],l[e],c[e]),u.distance<i&&(i=u.distance,u.t);return Jn.ON_LINE}return o[0]=u[0],a[0]=u[1],o[0]>=0&&o[0]<=1&&a[0]>=0&&a[0]<=1?Jn.YES_INTERSECTION:Jn.NO_INTERSECTION}const Qn={distanceToLine:Xn,intersection:qn},Zn={orientations:null};function er(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,Zn,n),xn.extend(e,t,n),wt.setGet(e,t,["orientations"]),function(e,t){t.classHierarchy.push("vtkLine"),e.getCellDimension=()=>1,e.intersectWithLine=(e,n,r,o,a)=>{const i={intersect:0,t:Number.MAX_VALUE,subId:0,betweenPoints:null};a[1]=0,a[2]=0;const s=[],l=[],c=[];t.points.getPoint(0,l),t.points.getPoint(1,c);const u=[],d=[],m=qn(e,n,l,c,u,d);var g;if(i.t=u[0],i.betweenPoints=(g=i.t)>=0&&g<=1,a[0]=d[0],m===Jn.YES_INTERSECTION){for(let t=0;t<3;t++)o[t]=l[t]+a[0]*(c[t]-l[t]),s[t]=e[t]+i.t*(n[t]-e[t]);if(Wt(o,s)<=r*r)return i.intersect=1,i}else{let t;if(i.t<0)return t=Xn(e,l,c,o),t.distance<=r*r?(i.t=0,i.intersect=1,i.betweenPoints=!0,i):i;if(i.t>1)return t=Xn(n,l,c,o),t.distance<=r*r?(i.t=1,i.intersect=1,i.betweenPoints=!0,i):i;if(a[0]<0)return a[0]=0,t=Xn(l,e,n,o),i.t=t.t,t.distance<=r*r?(i.intersect=1,i):i;if(a[0]>1)return a[0]=1,t=Xn(c,e,n,o),i.t=t.t,t.distance<=r*r?(i.intersect=1,i):i}return i},e.evaluateLocation=(e,n,r)=>{const o=[],a=[];t.points.getPoint(0,o),t.points.getPoint(1,a);for(let t=0;t<3;t++)n[t]=o[t]+e[0]*(a[t]-o[t]);r[0]=1-e[0],r[1]=e[0]},e.evaluateOrientation=(e,n,r)=>!!t.orientations&&(function(e,t,n,r){var o,a,i,s,l,c=t[0],u=t[1],d=t[2],m=t[3],g=n[0],f=n[1],h=n[2],p=n[3];(a=c*g+u*f+d*h+m*p)<0&&(a=-a,g=-g,f=-f,h=-h,p=-p),1-a>1e-6?(o=Math.acos(a),i=Math.sin(o),s=Math.sin((1-r)*o)/i,l=Math.sin(r*o)/i):(s=1-r,l=r),e[0]=s*c+l*g,e[1]=s*u+l*f,e[2]=s*d+l*h,e[3]=s*m+l*p}(n,t.orientations[0],t.orientations[1],e[0]),r[0]=1-e[0],r[1]=e[0],!0)}(e,t)}var tr={newInstance:wt.newInstance(er,"vtkLine"),extend:er,...Qn,...Wn};const{vtkErrorMacro:nr,vtkWarningMacro:rr}=wt,or={arrays:[],copyFieldFlags:[],doCopyAllOn:!0,doCopyAllOff:!1};function ar(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,or,n),wt.obj(e,t),function(e,t){t.classHierarchy.push("vtkFieldData");const n=e.getState;t.arrays&&(t.arrays=t.arrays.map(e=>({data:we(e.data)}))),e.initialize=()=>{e.initializeFields(),e.copyAllOn(),e.clearFieldFlags()},e.initializeFields=()=>{t.arrays=[],t.copyFieldFlags={},e.modified()},e.copyStructure=n=>{e.initializeFields(),t.copyFieldFlags=n.getCopyFieldFlags().map(e=>e),t.arrays=n.arrays().map(e=>({array:e}))},e.getNumberOfArrays=()=>t.arrays.length,e.getNumberOfActiveArrays=()=>t.arrays.length,e.addArray=n=>{const r=n.getName(),{array:o,index:a}=e.getArrayWithIndex(r);return null!=o?(t.arrays[a]={data:n},a):(t.arrays=[].concat(t.arrays,{data:n}),t.arrays.length-1)},e.removeAllArrays=()=>{t.arrays=[]},e.removeArray=n=>{const r=t.arrays.findIndex(e=>e.data.getName()===n);return e.removeArrayByIndex(r)},e.removeArrayByIndex=e=>-1!==e&&e<t.arrays.length&&(t.arrays.splice(e,1),!0),e.getArrays=()=>t.arrays.map(e=>e.data),e.getArray=t=>"number"==typeof t?e.getArrayByIndex(t):e.getArrayByName(t),e.getArrayByName=e=>t.arrays.reduce((t,n,r)=>n.data.getName()===e?n.data:t,null),e.getArrayWithIndex=e=>{const n=t.arrays.findIndex(t=>t.data.getName()===e);return{array:-1!==n?t.arrays[n].data:null,index:n}},e.getArrayByIndex=e=>e>=0&&e<t.arrays.length?t.arrays[e].data:null,e.hasArray=t=>e.getArrayWithIndex(t).index>=0,e.getArrayName=e=>{const n=t.arrays[e];return n?n.data.getName():""},e.getCopyFieldFlags=()=>t.copyFieldFlags,e.getFlag=e=>t.copyFieldFlags[e],e.passData=function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;n.getArrays().forEach(a=>{const i=e.getFlag(a.getName());if(!1!==i&&(!t.doCopyAllOff||!0===i)&&a){let t=e.getArrayByName(a.getName());if(t)if(a.getNumberOfComponents()===t.getNumberOfComponents())if(r>-1&&r<a.getNumberOfTuples()){const e=o>-1?o:r;t.insertTuple(e,a.getTuple(r))}else t.insertTuples(0,a.getTuples());else nr("Unhandled case in passData");else if(r<0||r>a.getNumberOfTuples())e.addArray(a),n.getAttributes(a).forEach(t=>{e.setAttribute(a,t)});else{const i=a.getNumberOfComponents();let s=a.getNumberOfValues();const l=o>-1?o:r;s<=l*i&&(s=(l+1)*i),t=mn.newInstance({name:a.getName(),dataType:a.getDataType(),numberOfComponents:i,values:wt.newTypedArray(a.getDataType(),s),size:0}),t.insertTuple(l,a.getTuple(r)),e.addArray(t),n.getAttributes(a).forEach(n=>{e.setAttribute(t,n)})}}})},e.interpolateData=function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;n.getArrays().forEach(s=>{const l=e.getFlag(s.getName());if(!1!==l&&(!t.doCopyAllOff||!0===l)&&s){let t=e.getArrayByName(s.getName());if(t)if(s.getNumberOfComponents()===t.getNumberOfComponents())if(r>-1&&r<s.getNumberOfTuples()){const e=a>-1?a:r;t.interpolateTuple(e,s,r,s,o,i),rr("Unexpected case in interpolateData")}else t.insertTuples(s.getTuples());else nr("Unhandled case in interpolateData");else if(r<0||o<0||r>s.getNumberOfTuples())e.addArray(s),n.getAttributes(s).forEach(t=>{e.setAttribute(s,t)});else{const l=s.getNumberOfComponents();let c=s.getNumberOfValues();const u=a>-1?a:r;c<=u*l&&(c=(u+1)*l),t=mn.newInstance({name:s.getName(),dataType:s.getDataType(),numberOfComponents:l,values:wt.newTypedArray(s.getDataType(),c),size:0}),t.interpolateTuple(u,s,r,s,o,i),e.addArray(t),n.getAttributes(s).forEach(n=>{e.setAttribute(t,n)})}}})},e.copyFieldOn=e=>{t.copyFieldFlags[e]=!0},e.copyFieldOff=e=>{t.copyFieldFlags[e]=!1},e.copyAllOn=()=>{t.doCopyAllOn&&!t.doCopyAllOff||(t.doCopyAllOn=!0,t.doCopyAllOff=!1,e.modified())},e.copyAllOff=()=>{!t.doCopyAllOn&&t.doCopyAllOff||(t.doCopyAllOn=!1,t.doCopyAllOff=!0,e.modified())},e.clearFieldFlags=()=>{t.copyFieldFlags={}},e.deepCopy=e=>{t.arrays=e.getArrays().map(e=>{const t=e.newClone();return t.deepCopy(e),{data:t}})},e.copyFlags=e=>e.getCopyFieldFlags().map(e=>e),e.reset=()=>t.arrays.forEach(e=>e.data.reset()),e.getMTime=()=>t.arrays.reduce((e,t)=>t.data.getMTime()>e?t.data.getMTime():e,t.mtime),e.getNumberOfComponents=()=>t.arrays.reduce((e,t)=>e+t.data.getNumberOfComponents(),0),e.getNumberOfTuples=()=>t.arrays.length>0?t.arrays[0].getNumberOfTuples():0,e.getState=()=>{const e=n();return e&&(e.arrays=t.arrays.map(e=>({data:e.data.getState()}))),e}}(e,t)}var ir={newInstance:wt.newInstance(ar,"vtkFieldData"),extend:ar},sr={AttributeCopyOperations:{COPYTUPLE:0,INTERPOLATE:1,PASSDATA:2,ALLCOPY:3},AttributeLimitTypes:{MAX:0,EXACT:1,NOLIMIT:2},AttributeTypes:{SCALARS:0,VECTORS:1,NORMALS:2,TCOORDS:3,TENSORS:4,GLOBALIDS:5,PEDIGREEIDS:6,EDGEFLAG:7,NUM_ATTRIBUTES:8},CellGhostTypes:{DUPLICATECELL:1,HIGHCONNECTIVITYCELL:2,LOWCONNECTIVITYCELL:4,REFINEDCELL:8,EXTERIORCELL:16,HIDDENCELL:32},DesiredOutputPrecision:{DEFAULT:0,SINGLE:1,DOUBLE:2},PointGhostTypes:{DUPLICATEPOINT:1,HIDDENPOINT:2},ghostArrayName:"vtkGhostType"};const{AttributeTypes:lr,AttributeCopyOperations:cr}=sr,{vtkWarningMacro:ur}=wt,dr={activeScalars:-1,activeVectors:-1,activeTensors:-1,activeNormals:-1,activeTCoords:-1,activeGlobalIds:-1,activePedigreeIds:-1};function mr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,dr,n),ir.extend(e,t,n),wt.setGet(e,t,["activeScalars","activeNormals","activeTCoords","activeVectors","activeTensors","activeGlobalIds","activePedigreeIds"]),t.arrays||(t.arrays={}),function(e,t){const n=["Scalars","Vectors","Normals","TCoords","Tensors","GlobalIds","PedigreeIds"];function r(e){let t=n.find(t=>lr[t.toUpperCase()]===e||"number"!=typeof e&&t.toLowerCase()===e.toLowerCase());return void 0===t&&(t=null),t}t.classHierarchy.push("vtkDataSetAttributes");const o={...e};e.checkNumberOfComponents=e=>!0,e.setAttribute=(n,o)=>{const a=r(o);if(n&&"PEDIGREEIDS"===a.toUpperCase()&&!n.isA("vtkDataArray"))return ur(`Cannot set attribute ${a}. The attribute must be a vtkDataArray.`),-1;if(n&&!e.checkNumberOfComponents(n,a))return ur(`Cannot set attribute ${a}. Incorrect number of components.`),-1;let i=t[`active${a}`];if(i>=0&&i<t.arrays.length){if(t.arrays[i]===n)return i;e.removeArrayByIndex(i)}return n?(i=e.addArray(n),t[`active${a}`]=i):t[`active${a}`]=-1,e.modified(),t[`active${a}`]},e.getAttributes=t=>n.filter(n=>e[`get${n}`]()===t),e.setActiveAttributeByName=(t,n)=>e.setActiveAttributeByIndex(e.getArrayWithIndex(t).index,n),e.setActiveAttributeByIndex=(n,o)=>{const a=r(o);if(n>=0&&n<t.arrays.length){if("PEDIGREEIDS"!==a.toUpperCase()){const t=e.getArrayByIndex(n);if(!t.isA("vtkDataArray"))return ur(`Cannot set attribute ${a}. Only vtkDataArray subclasses can be set as active attributes.`),-1;if(!e.checkNumberOfComponents(t,a))return ur(`Cannot set attribute ${a}. Incorrect number of components.`),-1}return t[`active${a}`]=n,e.modified(),n}return-1===n&&(t[`active${a}`]=n,e.modified()),-1},e.getActiveAttribute=t=>{const n=r(t);return e[`get${n}`]()},e.removeAllArrays=()=>{n.forEach(e=>{t[`active${e}`]=-1}),o.removeAllArrays()},e.removeArrayByIndex=e=>(-1!==e&&n.forEach(n=>{e===t[`active${n}`]?t[`active${n}`]=-1:e<t[`active${n}`]&&(t[`active${n}`]-=1)}),o.removeArrayByIndex(e)),n.forEach(n=>{const r=`active${n}`;e[`get${n}`]=()=>e.getArrayByIndex(t[r]),e[`set${n}`]=t=>e.setAttribute(t,n),e[`setActive${n}`]=t=>e.setActiveAttributeByIndex(e.getArrayWithIndex(t).index,n),e[`copy${n}Off`]=()=>{const e=n.toUpperCase();t.copyAttributeFlags[cr.PASSDATA][lr[e]]=!1},e[`copy${n}On`]=()=>{const e=n.toUpperCase();t.copyAttributeFlags[cr.PASSDATA][lr[e]]=!0}}),e.initializeAttributeCopyFlags=()=>{t.copyAttributeFlags=[],Object.keys(cr).filter(e=>"ALLCOPY"!==e).forEach(e=>{t.copyAttributeFlags[cr[e]]=Object.keys(lr).filter(e=>"NUM_ATTRIBUTES"!==e).reduce((e,t)=>(e[lr[t]]=!0,e),[])}),t.copyAttributeFlags[cr.COPYTUPLE][lr.GLOBALIDS]=!1,t.copyAttributeFlags[cr.INTERPOLATE][lr.GLOBALIDS]=!1,t.copyAttributeFlags[cr.COPYTUPLE][lr.PEDIGREEIDS]=!1},e.initialize=wt.chain(e.initialize,e.initializeAttributeCopyFlags),t.dataArrays&&Object.keys(t.dataArrays).length&&Object.keys(t.dataArrays).forEach(n=>{t.dataArrays[n].ref||"vtkDataArray"!==t.dataArrays[n].type||e.addArray(mn.newInstance(t.dataArrays[n]))});const a=e.shallowCopy;e.shallowCopy=(e,n)=>{a(e,n),t.arrays=e.getArrays().map(e=>{const t=e.newClone();return t.shallowCopy(e,n),{data:t}})},e.initializeAttributeCopyFlags()}(e,t)}var gr={newInstance:wt.newInstance(mr,"vtkDataSetAttributes"),extend:mr,...sr};const fr=["pointData","cellData","fieldData"],hr={};function pr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,hr,n),wt.obj(e,t),wt.setGet(e,t,fr),function(e,t){t.classHierarchy.push("vtkDataSet"),fr.forEach(e=>{t[e]?t[e]=we(t[e]):t[e]=gr.newInstance()});const n=e.shallowCopy;e.shallowCopy=function(e){n(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]),fr.forEach(n=>{t[n]=gr.newInstance(),t[n].shallowCopy(e.getReferenceByName(n))})}}(e,t)}var yr={newInstance:wt.newInstance(pr,"vtkDataSet"),extend:pr,FieldDataTypes:{UNIFORM:0,DATA_OBJECT_FIELD:0,COORDINATE:1,POINT_DATA:1,POINT:2,POINT_FIELD_DATA:2,CELL:3,CELL_FIELD_DATA:3,VERTEX:4,VERTEX_FIELD_DATA:4,EDGE:5,EDGE_FIELD_DATA:5,ROW:6,ROW_DATA:6},FieldAssociations:{FIELD_ASSOCIATION_POINTS:0,FIELD_ASSOCIATION_CELLS:1,FIELD_ASSOCIATION_NONE:2,FIELD_ASSOCIATION_POINTS_THEN_CELLS:3,FIELD_ASSOCIATION_VERTICES:4,FIELD_ASSOCIATION_EDGES:5,FIELD_ASSOCIATION_ROWS:6,NUMBER_OF_ASSOCIATIONS:7}};const br={};function vr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,br,n),yr.extend(e,t,n),wt.setGet(e,t,["points"]),function(e,t){t.classHierarchy.push("vtkPointSet"),t.points?t.points=we(t.points):t.points=Cn.newInstance(),e.getNumberOfPoints=()=>t.points.getNumberOfPoints(),e.getBounds=()=>t.points.getBounds(),e.computeBounds=()=>{e.getBounds()};const n=e.shallowCopy;e.shallowCopy=function(e){n(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]),t.points=Cn.newInstance(),t.points.shallowCopy(e.getPoints())}}(e,t)}var Ir={newInstance:wt.newInstance(vr,"vtkPointSet"),extend:vr};const Er={};function Cr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,Er,n),wt.obj(e,t),wt.setGet(e,t,["transform"]),function(e,t){t.classHierarchy.push("vtkImplicitFunction"),e.functionValue=n=>{if(!t.transform)return e.evaluateFunction(n);const r=[];return t.transform.transformPoint(n,r),e.evaluateFunction(r)},e.evaluateFunction=e=>{wt.vtkErrorMacro("not implemented")}}(e,t)}var Or={newInstance:wt.newInstance(Cr,"vtkImplicitFunction"),extend:Cr};const Ar=1e-6,xr="coincide",_r="disjoint";function Sr(e,t,n){const r=n[0]*(e[0]-t[0])+n[1]*(e[1]-t[1])+n[2]*(e[2]-t[2]);return Math.abs(r)}function wr(e,t,n,r){const o=[];Gt(e,t,o);const a=Bt(n,o);r[0]=e[0]-a*n[0],r[1]=e[1]-a*n[1],r[2]=e[2]-a*n[2]}function Dr(e,t,n){const r=Bt(e,t);let o=Bt(t,t);return 0===o&&(o=1),n[0]=e[0]-r*t[0]/o,n[1]=e[1]-r*t[1]/o,n[2]=e[2]-r*t[2]/o,n}function Mr(e,t,n,r){const o=[];Gt(e,t,o);const a=Bt(n,o),i=Bt(n,n);0!==i?(r[0]=e[0]-a*n[0]/i,r[1]=e[1]-a*n[1]/i,r[2]=e[2]-a*n[2]/i):(r[0]=e[0],r[1]=e[1],r[2]=e[2])}function Tr(e,t,n,r){const o={intersection:!1,betweenPoints:!1,t:Number.MAX_VALUE,x:[]},a=[],i=[];Gt(t,e,a),Gt(n,e,i);const s=Bt(r,i),l=Bt(r,a);let c,u;return c=l<0?-l:l,u=s<0?-s*Ar:s*Ar,c<=u||(o.t=s/l,o.x[0]=e[0]+o.t*a[0],o.x[1]=e[1]+o.t*a[1],o.x[2]=e[2]+o.t*a[2],o.intersection=!0,o.betweenPoints=o.t>=0&&o.t<=1),o}function Lr(e,t,n,r){const o={intersection:!1,l0:[],l1:[],error:null},a=[];$t(t,r,a);const i=a.map(e=>Math.abs(e));if(i[0]+i[1]+i[2]<Ar){const r=[];return Gt(e,n,r),0===Bt(t,r)?o.error=xr:o.error=_r,o}let s;s=i[0]>i[1]&&i[0]>i[2]?"x":i[1]>i[2]?"y":"z";const l=[],c=-Bt(t,e),u=-Bt(r,n);switch(s){case"x":l[0]=0,l[1]=(u*t[2]-c*r[2])/a[0],l[2]=(c*r[1]-u*t[1])/a[0];break;case"y":l[0]=(c*r[2]-u*t[2])/a[1],l[1]=0,l[2]=(u*t[0]-c*r[0])/a[1];break;case"z":l[0]=(u*t[1]-c*r[1])/a[2],l[1]=(c*r[0]-u*t[0])/a[2],l[2]=0}return o.l0=l,function(e,t,n){n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2]}(l,a,o.l1),o.intersection=!0,o}const Nr={evaluate:function(e,t,n){return e[0]*(n[0]-t[0])+e[1]*(n[1]-t[1])+e[2]*(n[2]-t[2])},distanceToPlane:Sr,projectPoint:wr,projectVector:Dr,generalizedProjectPoint:Mr,intersectWithLine:Tr,intersectWithPlane:Lr,DISJOINT:_r,COINCIDE:xr},Pr={normal:[0,0,1],origin:[0,0,0]};function kr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,Pr,n),Or.extend(e,t,n),wt.setGetArray(e,t,["normal","origin"],3),function(e,t){t.classHierarchy.push("vtkPlane"),e.distanceToPlane=e=>Sr(e,t.origin,t.normal),e.projectPoint=(e,n)=>{wr(e,t.origin,t.normal,n)},e.projectVector=(e,n)=>Dr(e,t.normal,n),e.push=e=>{if(0!==e)for(let n=0;n<3;n++)t.origin[n]+=e*t.normal[n]},e.generalizedProjectPoint=(e,n)=>{Mr(e,t.origin,t.normal,n)},e.evaluateFunction=(e,n,r)=>Array.isArray(e)?t.normal[0]*(e[0]-t.origin[0])+t.normal[1]*(e[1]-t.origin[1])+t.normal[2]*(e[2]-t.origin[2]):t.normal[0]*(e-t.origin[0])+t.normal[1]*(n-t.origin[1])+t.normal[2]*(r-t.origin[2]),e.evaluateGradient=e=>[t.normal[0],t.normal[1],t.normal[2]],e.intersectWithLine=(e,n)=>Tr(e,n,t.origin,t.normal),e.intersectWithPlane=(e,n)=>Lr(e,n,t.origin,t.normal)}(e,t)}var Rr={newInstance:wt.newInstance(kr,"vtkPlane"),extend:kr,...Nr};function Vr(e,t,n,r){const o=n[0]-t[0],a=n[1]-t[1],i=n[2]-t[2],s=e[0]-t[0],l=e[1]-t[1],c=e[2]-t[2];r[0]=a*c-i*l,r[1]=i*s-o*c,r[2]=o*l-a*s}function jr(e,t,n,r){Vr(e,t,n,r);const o=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);0!==o&&(r[0]/=o,r[1]/=o,r[2]/=o)}const Ur={computeNormalDirection:Vr,computeNormal:jr,intersectWithTriangle:function(e,t,n,r,o,a){let i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:1e-6,s=!1;const l=[],c=[],u=[],d=[],m=[];jr(e,t,n,d),jr(r,o,a,m);const g=-Bt(d,e),f=-Bt(m,r),h=[Bt(m,e)+f,Bt(m,t)+f,Bt(m,n)+f];if(h[0]*h[1]>i&&h[0]*h[2]>i)return{intersect:!1,coplanar:s,pt1:l,pt2:c,surfaceId:u};const p=[Bt(d,r)+g,Bt(d,o)+g,Bt(d,a)+g];if(p[0]*p[1]>i&&p[0]*p[2]>i)return{intersect:!1,coplanar:s,pt1:l,pt2:c,surfaceId:u};if(Math.abs(d[0]-m[0])<1e-9&&Math.abs(d[1]-m[1])<1e-9&&Math.abs(d[2]-m[2])<1e-9&&Math.abs(g-f)<1e-9)return s=!0,{intersect:!1,coplanar:s,pt1:l,pt2:c,surfaceId:u};const y=[e,t,n],b=[r,o,a],v=Bt(d,m),I=(g-f*v)/(v*v-1),E=(f-g*v)/(v*v-1),C=[I*d[0]+E*m[0],I*d[1]+E*m[1],I*d[2]+E*m[2]],O=$t(d,m,[]);!function(e){const t=Kt(e);0!==t&&(e[0]/=t,e[1]/=t,e[2]/=t)}(O);let A=0,x=0;const _=[],S=[];let w,D,M=50,T=50;for(let t=0;t<3;t++){const n=t,o=(t+1)%3,a=Rr.intersectWithLine(y[n],y[o],r,m);a.intersection&&a.t>0-i&&a.t<1+i&&(a.t<1+i&&a.t>1-i&&(M=A),_[A++]=Bt(a.x,O)-Bt(C,O));const s=Rr.intersectWithLine(b[n],b[o],e,d);s.intersection&&s.t>0-i&&s.t<1+i&&(s.t<1+i&&s.t>1-i&&(T=x),S[x++]=Bt(s.x,O)-Bt(C,O))}if(A>2){A--;const e=_[2];_[2]=_[M],_[M]=e}if(x>2){x--;const e=S[2];S[2]=S[T],S[T]=e}if(2!==A||2!==x)return{intersect:!1,coplanar:s,pt1:l,pt2:c,surfaceId:u};if(Number.isNaN(_[0])||Number.isNaN(_[1])||Number.isNaN(S[0])||Number.isNaN(S[1]))return{intersect:!1,coplanar:s,pt1:l,pt2:c,surfaceId:u};if(_[0]>_[1]){const e=_[1];_[1]=_[0],_[0]=e}if(S[0]>S[1]){const e=S[1];S[1]=S[0],S[0]=e}return _[1]<S[0]||S[1]<_[0]?{intersect:!1,coplanar:s,pt1:l,pt2:c,surfaceId:u}:(_[0]<S[0]?_[1]<S[1]?(u[0]=2,u[1]=1,w=S[0],D=_[1]):(u[0]=2,u[1]=2,w=S[0],D=S[1]):_[1]<S[1]?(u[0]=1,u[1]=1,w=_[0],D=_[1]):(u[0]=1,u[1]=2,w=_[0],D=S[1]),Ft(C,O,w,l),Ft(C,O,D,c),{intersect:!0,coplanar:s,pt1:l,pt2:c,surfaceId:u})}},zr={};function Gr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,zr,n),xn.extend(e,t,n),function(e,t){t.classHierarchy.push("vtkTriangle"),e.getCellDimension=()=>2,e.intersectWithLine=(n,r,o,a,i)=>{const s={subId:0,t:Number.MAX_VALUE,intersect:0,betweenPoints:!1};i[2]=0;const l=[],c=o*o,u=[],d=[],m=[];t.points.getPoint(0,u),t.points.getPoint(1,d),t.points.getPoint(2,m);const g=[],f=[];if(jr(u,d,m,g),0!==g[0]||0!==g[1]||0!==g[2]){const t=Rr.intersectWithLine(n,r,u,g);if(s.betweenPoints=t.betweenPoints,s.t=t.t,a[0]=t.x[0],a[1]=t.x[1],a[2]=t.x[2],!t.intersection)return i[0]=0,i[1]=0,s.intersect=0,s;const o=e.evaluatePosition(a,l,i,f);if(o.evaluation>=0)return o.dist2<=c?(s.intersect=1,s):(s.intersect=o.evaluation,s)}const h=Wt(u,d),p=Wt(d,m),y=Wt(m,u);t.line||(t.line=tr.newInstance()),h>p&&h>y?(t.line.getPoints().setPoint(0,u),t.line.getPoints().setPoint(1,d)):p>y&&p>h?(t.line.getPoints().setPoint(0,d),t.line.getPoints().setPoint(1,m)):(t.line.getPoints().setPoint(0,m),t.line.getPoints().setPoint(1,u));const b=t.line.intersectWithLine(n,r,o,a,i);if(s.betweenPoints=b.betweenPoints,s.t=b.t,b.intersect){const e=[],t=[],n=[];for(let r=0;r<3;r++)e[r]=u[r]-m[r],t[r]=d[r]-m[r],n[r]=a[r]-m[r];return i[0]=Bt(n,e)/y,i[1]=Bt(n,t)/p,s.intersect=1,s}return i[0]=0,i[1]=0,s.intersect=0,s},e.evaluatePosition=(e,n,r,o)=>{const a={subId:0,dist2:0,evaluation:-1};let i,s;const l=[],c=[],u=[],d=[];let m;const g=[],f=[],h=[];let p=0,y=0;const b=[];let v,I,E,C=[];const O=[],A=[],x=[];a.subId=0,r[2]=0,t.points.getPoint(1,l),t.points.getPoint(2,c),t.points.getPoint(0,u),Vr(l,c,u,d),Rr.generalizedProjectPoint(e,l,d,x);let _=0;for(i=0;i<3;i++)m=d[i]<0?-d[i]:d[i],m>_&&(_=m,y=i);for(s=0,i=0;i<3;i++)i!==y&&(b[s++]=i);for(i=0;i<2;i++)g[i]=x[b[i]]-u[b[i]],f[i]=l[b[i]]-u[b[i]],h[i]=c[b[i]]-u[b[i]];if(p=Ht(f,h),0===p)return r[0]=0,r[1]=0,a.evaluation=-1,a;if(r[0]=Ht(g,h)/p,r[1]=Ht(f,g)/p,o[0]=1-(r[0]+r[1]),o[1]=r[0],o[2]=r[1],o[0]>=0&&o[0]<=1&&o[1]>=0&&o[1]<=1&&o[2]>=0&&o[2]<=1)n&&(a.dist2=Wt(x,e),n[0]=x[0],n[1]=x[1],n[2]=x[2]),a.evaluation=1;else{let t;if(n)if(o[1]<0&&o[2]<0)for(v=Wt(e,u),I=tr.distanceToLine(e,l,u,t,O),E=tr.distanceToLine(e,u,c,t,A),v<I?(a.dist2=v,C=u):(a.dist2=I,C=O),E<a.dist2&&(a.dist2=E,C=A),i=0;i<3;i++)n[i]=C[i];else if(o[2]<0&&o[0]<0)for(v=Wt(e,l),I=tr.distanceToLine(e,l,u,t,O),E=tr.distanceToLine(e,l,c,t,A),v<I?(a.dist2=v,C=l):(a.dist2=I,C=O),E<a.dist2&&(a.dist2=E,C=A),i=0;i<3;i++)n[i]=C[i];else if(o[1]<0&&o[0]<0)for(v=Wt(e,c),I=tr.distanceToLine(e,c,u,t,O),E=tr.distanceToLine(e,l,c,t,A),v<I?(a.dist2=v,C=c):(a.dist2=I,C=O),E<a.dist2&&(a.dist2=E,C=A),i=0;i<3;i++)n[i]=C[i];else if(o[0]<0){const t=tr.distanceToLine(e,l,c,n);a.dist2=t.distance}else if(o[1]<0){const t=tr.distanceToLine(e,c,u,n);a.dist2=t.distance}else if(o[2]<0){const t=tr.distanceToLine(e,l,u,n);a.dist2=t.distance}a.evaluation=0}return a},e.evaluateLocation=(e,n,r)=>{const o=[],a=[],i=[];t.points.getPoint(0,o),t.points.getPoint(1,a),t.points.getPoint(2,i);const s=1-e[0]-e[1];for(let t=0;t<3;t++)n[t]=o[t]*s+a[t]*e[0]+i[t]*e[1];r[0]=s,r[1]=e[0],r[2]=e[1]},e.getParametricDistance=e=>{let t,n=0;const r=[];r[0]=e[0],r[1]=e[1],r[2]=1-e[0]-e[1];for(let e=0;e<3;e++)t=r[e]<0?-r[e]:r[e]>1?r[e]-1:0,t>n&&(n=t);return n}}(e,t)}var Fr={newInstance:wt.newInstance(Gr,"vtkTriangle"),extend:Gr,...Ur};const Br=["verts","lines","polys","strips"],{vtkWarningMacro:$r}=wt,Kr={[Ln]:tr,[Nn]:tr,[Pn]:Fr},Wr={};function Hr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,Wr,n),Ir.extend(e,t,n),wt.get(e,t,["cells","links"]),wt.setGet(e,t,["verts","lines","polys","strips"]),function(e,t){t.classHierarchy.push("vtkPolyData"),Br.forEach(n=>{var r;e[`getNumberOf${r=n,r.replace(/(?:^\w|[A-Z]|\b\w)/g,e=>e.toUpperCase()).replace(/\s+/g,"")}`]=()=>t[n].getNumberOfCells(),t[n]?t[n]=we(t[n]):t[n]=yn.newInstance()}),e.getNumberOfCells=()=>Br.reduce((e,n)=>e+t[n].getNumberOfCells(),0);const n=e.shallowCopy;e.shallowCopy=function(e){n(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]),Br.forEach(n=>{t[n]=yn.newInstance(),t[n].shallowCopy(e.getReferenceByName(n))})},e.buildCells=()=>{const n=e.getNumberOfVerts(),r=e.getNumberOfLines(),o=e.getNumberOfPolys(),a=e.getNumberOfStrips(),i=n+r+o+a,s=new Uint8Array(i);let l=s;const c=new Uint32Array(i);let u=c;if(n){let e=0;t.verts.getCellSizes().forEach((t,n)=>{u[n]=e,l[n]=t>1?Tn:Mn,e+=t+1}),u=u.subarray(n),l=l.subarray(n)}if(r){let e=0;t.lines.getCellSizes().forEach((t,n)=>{u[n]=e,l[n]=t>2?Nn:Ln,1===t&&$r("Building VTK_LINE ",n," with only one point, but VTK_LINE needs at least two points. Check the input."),e+=t+1}),u=u.subarray(r),l=l.subarray(r)}if(o){let e=0;t.polys.getCellSizes().forEach((t,n)=>{switch(u[n]=e,t){case 3:l[n]=Pn;break;case 4:l[n]=Vn;break;default:l[n]=Rn}t<3&&$r("Building VTK_TRIANGLE ",n," with less than three points, but VTK_TRIANGLE needs at least three points. Check the input."),e+=t+1}),u+=u.subarray(o),l+=l.subarray(o)}if(a){let e=0;l.fill(kn,0,a),t.strips.getCellSizes().forEach((t,n)=>{u[n]=e,e+=t+1})}t.cells=Kn.newInstance(),t.cells.setCellTypes(i,s,c)},e.buildLinks=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;void 0===t.cells&&e.buildCells(),t.links=wn.newInstance(),n>0?t.links.allocate(n):t.links.allocate(e.getPoints().getNumberOfPoints()),t.links.buildLinks(e)},e.getCellType=e=>t.cells.getCellType(e),e.getCellPoints=n=>{const r=e.getCellType(n);let o=null;switch(r){case Mn:case Tn:o=t.verts;break;case Ln:case Nn:o=t.lines;break;case Pn:case Vn:case Rn:o=t.polys;break;case kn:o=t.strips;break;default:return o=null,{type:0,cellPointIds:null}}const a=t.cells.getCellLocation(n);return{cellType:r,cellPointIds:o.getCell(a)}},e.getPointCells=e=>t.links.getCells(e),e.getCellEdgeNeighbors=(e,n,r)=>{const o=t.links.getLink(n),a=t.links.getLink(r);return o.cells.filter(t=>t!==e&&-1!==a.cells.indexOf(t))},e.getCell=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const r=e.getCellPoints(t),o=n||Kr[r.cellType].newInstance();return o.initialize(e.getPoints(),r.cellPointIds),o}}(e,t)}var Yr={newInstance:wt.newInstance(Hr,"vtkPolyData"),extend:Hr};class Jr{constructor(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.oriented=e,this.edgeMap=new Map}initialize(){this.edgeMap.clear()}computeEdgeKey(e,t){return this.oriented||e<t?e*t*.5*(e*t+1)+t:t*e*.5*(t*e+1)+e}insertUniqueEdge(e,t,n){const r=this.computeEdgeKey(e,t);let o=this.edgeMap.get(r);return o||(o={key:r,edgeId:this.edgeMap.size,value:n},this.edgeMap.set(r,o)),o}insertEdge(e,t,n){const r=this.computeEdgeKey(e,t),o={key:r,edgeId:this.edgeMap.size,value:n};return this.edgeMap.set(r,o),o}isInsertedEdge(e,t){const n=this.computeEdgeKey(e,t);return this.edgeMap.get(n)}static getEdgePointIds(e){const t=.5*(-1+Math.sqrt(8*e.key+1)),n=e.key-.5*(t+1)*t;return[n,t-n]}}var Xr=function(){return new Jr((arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).oriented)};const qr=[[-1,-1,-1,-1,-1],[0,3,-1,-1,-1],[1,0,-1,-1,-1],[1,3,-1,-1,-1],[2,1,-1,-1,-1],[0,3,2,1,-1],[2,0,-1,-1,-1],[2,3,-1,-1,-1],[3,2,-1,-1,-1],[0,2,-1,-1,-1],[1,0,3,2,-1],[1,2,-1,-1,-1],[3,1,-1,-1,-1],[0,1,-1,-1,-1],[3,0,-1,-1,-1],[-1,-1,-1,-1,-1]],Qr=[[0,1],[1,3],[2,3],[0,2]];var Zr=function(e){return qr[e]},eo=function(e){return Qr[e]};const{vtkErrorMacro:to,vtkDebugMacro:no}=wt;const ro={contourValues:[],slicingMode:2,slice:0,mergePoints:!1};function oo(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,ro,n),wt.obj(e,t),wt.algo(e,t,1,1),wt.setGet(e,t,["slicingMode","slice","mergePoints"]),wt.algo(e,t,1,1),function(e,t){t.classHierarchy.push("vtkImageMarchingSquares"),e.getContourValues=()=>t.contourValues,e.setContourValues=n=>{t.contourValues=n,e.modified()};const n=[],r=[],o=[],a=Xr();e.getPixelScalars=(e,t,o,a,i,s)=>{const[l,c,u]=e;n[0]=u*t[1]*t[0]+c*t[0]+l,n[1]=n[0]+a[i],n[2]=n[0]+a[s],n[3]=n[2]+a[i];for(let e=0;e<4;++e)r[e]=o[n[e]]},e.getPixelPoints=(e,t,n,r,a)=>{const i=e[r],s=e[a];o[0]=t[r]+i*n[r],o[1]=t[a]+s*n[a],o[2]=o[0]+n[r],o[3]=o[1],o[4]=o[0],o[5]=o[1]+n[a],o[6]=o[2],o[7]=o[5]},e.produceLines=(i,s,l,c,u,d,m,g,f,h,p)=>{const y=s[t.slicingMode],b=[1,2,8,4],v=[];let I;e.getPixelScalars(s,l,d,f,h,p);let E=0;for(let e=0;e<4;e++)r[e]>=i&&(E|=b[e]);const C=Zr(E);if(C[0]<0)return;e.getPixelPoints(s,c,u,h,p);const O=c[t.slicingMode]+y*u[t.slicingMode];for(let e=0;C[e]>=0;e+=2){g.push(2);for(let s=0;s<2;s++){const l=eo(C[e+s]);if(I=void 0,t.mergePoints&&(I=a.isInsertedEdge(n[l[0]],n[l[1]])?.value),void 0===I){const e=(i-r[l[0]])/(r[l[1]]-r[l[0]]),s=o.slice(2*l[0],2*(l[0]+1)),c=o.slice(2*l[1],2*(l[1]+1));v[h]=s[0]+e*(c[0]-s[0]),v[p]=s[1]+e*(c[1]-s[1]),v[t.slicingMode]=O,I=m.length/3,m.push(v[0],v[1],v[2]),t.mergePoints&&a.insertEdge(n[l[0]],n[l[1]],I)}g.push(I)}}},e.requestData=(n,r)=>{const o=n[0];if(!o)return void to("Invalid or missing input");if(null==t.slicingMode||t.slicingMode<0||t.slicingMode>2)return void to("Invalid or missing slicing mode");console.time("msquares");const i=o.getOrigin(),s=o.getSpacing(),l=o.getDimensions(),c=o.getExtent(),u=o.computeIncrements(c),d=o.getPointData().getScalars().getData(),[m,g]=function(){let e=0,n=1;return 1===t.slicingMode?(e=0,n=2):0===t.slicingMode&&(e=1,n=2),[e,n]}(),f=[],h=[];let p=Math.round(t.slice);p>=l[t.slicingMode]&&(p=0);const y=[0,0,0];y[t.slicingMode]=p;for(let n=0;n<t.contourValues.length;++n){for(let r=0;r<l[g]-1;++r){y[g]=r;for(let r=0;r<l[m]-1;++r)y[m]=r,e.produceLines(t.contourValues[n],y,l,i,s,d,f,h,u,m,g)}a.initialize()}const b=Yr.newInstance();b.getPoints().setData(new Float32Array(f),3),b.getLines().setData(new Uint32Array(h)),r[0]=b,no("Produced output"),console.timeEnd("msquares")}}(e,t)}var ao={newInstance:wt.newInstance(oo,"vtkImageMarchingSquares"),extend:oo};const io=[Number.MAX_VALUE,-Number.MAX_VALUE,Number.MAX_VALUE,-Number.MAX_VALUE,Number.MAX_VALUE,-Number.MAX_VALUE];function so(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}function lo(e){return e?.length>=6&&e[0]<=e[1]&&e[2]<=e[3]&&e[4]<=e[5]}function co(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function uo(e){return co(e,io)}function mo(e,t,n,r){const[o,a,i,s,l,c]=e;return e[0]=o<t?o:t,e[1]=a>t?a:t,e[2]=i<n?i:n,e[3]=s>n?s:n,e[4]=l<r?l:r,e[5]=c>r?c:r,e}function go(e,t){if(0===t.length)return e;if(Array.isArray(t[0]))for(let n=0;n<t.length;++n)mo(e,...t[n]);else for(let n=0;n<t.length;n+=3)mo(e,...t.slice(n,n+3));return e}function fo(e,t,n,r,o,a,i){const[s,l,c,u,d,m]=e;return void 0===i?(e[0]=Math.min(t[0],s),e[1]=Math.max(t[1],l),e[2]=Math.min(t[2],c),e[3]=Math.max(t[3],u),e[4]=Math.min(t[4],d),e[5]=Math.max(t[5],m)):(e[0]=Math.min(t,s),e[1]=Math.max(n,l),e[2]=Math.min(r,c),e[3]=Math.max(o,u),e[4]=Math.min(a,d),e[5]=Math.max(i,m)),e}function ho(e,t,n,r){const[o,a,i,s,l,c]=e;return e[0]=t,e[1]=t>a?t:a,e[2]=n,e[3]=n>s?n:s,e[4]=r,e[5]=r>c?r:c,o!==t||i!==n||l!==r}function po(e,t,n,r){const[o,a,i,s,l,c]=e;return e[0]=t<o?t:o,e[1]=t,e[2]=n<i?n:i,e[3]=n,e[4]=r<l?r:l,e[5]=r,a!==t||s!==n||c!==r}function yo(e,t){return e[0]-=t,e[1]+=t,e[2]-=t,e[3]+=t,e[4]-=t,e[5]+=t,e}function bo(e,t,n,r){return!!lo(e)&&(t>=0?(e[0]*=t,e[1]*=t):(e[0]=t*e[1],e[1]=t*e[0]),n>=0?(e[2]*=n,e[3]*=n):(e[2]=n*e[3],e[3]=n*e[2]),r>=0?(e[4]*=r,e[5]*=r):(e[4]=r*e[5],e[5]=r*e[4]),!0)}function vo(e){return[.5*(e[0]+e[1]),.5*(e[2]+e[3]),.5*(e[4]+e[5])]}function Io(e,t){return e[2*t+1]-e[2*t]}function Eo(e){return[Io(e,0),Io(e,1),Io(e,2)]}function Co(e){return e.slice(0,2)}function Oo(e){return e.slice(2,4)}function Ao(e){return e.slice(4,6)}function xo(e){const t=Eo(e);return t[0]>t[1]?t[0]>t[2]?t[0]:t[2]:t[1]>t[2]?t[1]:t[2]}function _o(e){if(lo(e)){const t=Eo(e);return Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2])}return null}function So(e){return[e[0],e[2],e[4]]}function wo(e){return[e[1],e[3],e[5]]}function Do(e,t){return e<=0&&t>=0||e>=0&&t<=0}function Mo(e,t){let n=0;for(let r=0;r<2;r++)for(let o=2;o<4;o++)for(let a=4;a<6;a++)t[n++]=[e[r],e[o],e[a]];return t}function To(e,t,n){return t[0]=e[0],t[1]=e[2],t[2]=e[4],n[0]=e[1],n[1]=e[3],n[2]=e[5],t}function Lo(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];const r=Mo(e,[]);for(let e=0;e<r.length;++e)q(r[e],r[e],t);return uo(n),go(n,r)}function No(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t[0]=.5*(e[1]-e[0]),t[1]=.5*(e[3]-e[2]),t[2]=.5*(e[5]-e[4]),t}function Po(e,t,n,r){const o=[].concat(io),a=e.getData();for(let e=0;e<a.length;e+=3){const i=[a[e],a[e+1],a[e+2]],s=Bt(i,t);o[0]=Math.min(s,o[0]),o[1]=Math.max(s,o[1]);const l=Bt(i,n);o[2]=Math.min(l,o[2]),o[3]=Math.max(l,o[3]);const c=Bt(i,r);o[4]=Math.min(c,o[4]),o[5]=Math.max(c,o[5])}return o}function ko(e,t,n,r,o){let a=!0;const i=[];let s=0;const l=[],c=[0,0,0];for(let n=0;n<3;n++)t[n]<e[2*n]?(i[n]=1,c[n]=e[2*n],a=!1):t[n]>e[2*n+1]?(i[n]=0,c[n]=e[2*n+1],a=!1):i[n]=2;if(a)return r[0]=t[0],r[1]=t[1],r[2]=t[2],o[0]=0,1;for(let e=0;e<3;e++)2!==i[e]&&0!==n[e]?l[e]=(c[e]-t[e])/n[e]:l[e]=-1;for(let e=0;e<3;e++)l[s]<l[e]&&(s=e);if(l[s]>1||l[s]<0)return 0;o[0]=l[s];for(let o=0;o<3;o++)if(s!==o){if(r[o]=t[o]+l[s]*n[o],r[o]<e[2*o]||r[o]>e[2*o+1])return 0}else r[o]=c[o];return 1}function Ro(e,t,n){const r=[];let o=0,a=1,i=1;for(let s=4;s<=5;++s){r[2]=e[s];for(let s=2;s<=3;++s){r[1]=e[s];for(let s=0;s<=1;++s)if(r[0]=e[s],o=Rr.evaluate(n,t,r),i&&(a=o>=0?1:-1,i=0),0===o||a>0&&o<0||a<0&&o>0)return 1}}return 0}function Vo(e,t){if(!lo(e)||!lo(t))return!1;const n=[0,0,0,0,0,0];let r;for(let o=0;o<3;o++)if(r=!1,t[2*o]>=e[2*o]&&t[2*o]<=e[2*o+1]?(r=!0,n[2*o]=t[2*o]):e[2*o]>=t[2*o]&&e[2*o]<=t[2*o+1]&&(r=!0,n[2*o]=e[2*o]),t[2*o+1]>=e[2*o]&&t[2*o+1]<=e[2*o+1]?(r=!0,n[2*o+1]=t[2*o+1]):e[2*o+1]>=t[2*o]&&e[2*o+1]<=t[2*o+1]&&(r=!0,n[2*o+1]=e[2*o+1]),!r)return!1;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],!0}function jo(e,t){if(!lo(e)||!lo(t))return!1;for(let n=0;n<3;n++)if(!(t[2*n]>=e[2*n]&&t[2*n]<=e[2*n+1]||e[2*n]>=t[2*n]&&e[2*n]<=t[2*n+1]||t[2*n+1]>=e[2*n]&&t[2*n+1]<=e[2*n+1]||e[2*n+1]>=t[2*n]&&e[2*n+1]<=t[2*n+1]))return!1;return!0}function Uo(e,t,n,r){return!(t<e[0]||t>e[1]||n<e[2]||n>e[3]||r<e[4]||r>e[5])}function zo(e,t,n){const r=[[0,1,2,3,4,5,6,7],[0,1,4,5,2,3,6,7],[0,2,4,6,1,3,5,7]],o=[0,0,0,0,0,0,0,0];let a=0;for(let r=0;r<2;r++)for(let i=2;i<4;i++)for(let s=4;s<6;s++){const l=[e[r],e[i],e[s]];o[a++]=Rr.evaluate(n,t,l)}let i=2;for(;i--&&!(Do(o[r[i][0]],o[r[i][4]])&&Do(o[r[i][1]],o[r[i][5]])&&Do(o[r[i][2]],o[r[i][6]])&&Do(o[r[i][3]],o[r[i][7]])););if(i<0)return!1;const s=Math.sign(n[i]),l=Math.abs((e[2*i+1]-e[2*i])*n[i]);let c=s>0?1:0;for(let e=0;e<4;e++){if(0===l)continue;const t=Math.abs(o[r[i][e]])/l;s>0&&t<c&&(c=t),s<0&&t>c&&(c=t)}const u=(1-c)*e[2*i]+c*e[2*i+1];return s>0?e[2*i]=u:e[2*i+1]=u,!0}class Go{constructor(e){this.bounds=e,this.bounds||(this.bounds=new Float64Array(io))}getBounds(){return this.bounds}equals(e){return so(this.bounds,e)}isValid(){return lo(this.bounds)}setBounds(e){return co(this.bounds,e)}reset(){return uo(this.bounds)}addPoint(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return mo(this.bounds,...t)}addPoints(e){return go(this.bounds,e)}addBounds(e,t,n,r,o,a){return fo(this.bounds,e,t,n,r,o,a)}setMinPoint(e,t,n){return ho(this.bounds,e,t,n)}setMaxPoint(e,t,n){return po(this.bounds,e,t,n)}inflate(e){return yo(this.bounds,e)}scale(e,t,n){return bo(this.bounds,e,t,n)}getCenter(){return vo(this.bounds)}getLength(e){return Io(this.bounds,e)}getLengths(){return Eo(this.bounds)}getMaxLength(){return xo(this.bounds)}getDiagonalLength(){return _o(this.bounds)}getMinPoint(){return So(this.bounds)}getMaxPoint(){return wo(this.bounds)}getXRange(){return Co(this.bounds)}getYRange(){return Oo(this.bounds)}getZRange(){return Ao(this.bounds)}getCorners(e){return Mo(this.bounds,e)}computeCornerPoints(e,t){return To(this.bounds,e,t)}computeLocalBounds(e,t,n){return Po(this.bounds,e,t,n)}transformBounds(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Lo(this.bounds,e,t)}computeScale3(e){return No(this.bounds,e)}cutWithPlane(e,t){return zo(this.bounds,e,t)}intersectBox(e,t,n,r){return ko(this.bounds,e,t,n,r)}intersectPlane(e,t){return Ro(this.bounds,e,t)}intersect(e){return Vo(this.bounds,e)}intersects(e){return jo(this.bounds,e)}containsPoint(e,t,n){return Uo(this.bounds,e,t,n)}contains(e){return jo(this.bounds,e)}}var Fo={newInstance:function(e){const t=e&&e.bounds;return new Go(t)},equals:so,isValid:lo,setBounds:co,reset:uo,addPoint:mo,addPoints:go,addBounds:fo,setMinPoint:ho,setMaxPoint:po,inflate:yo,scale:bo,scaleAboutCenter:function(e,t,n,r){if(!lo(e))return!1;const o=vo(e);return e[0]-=o[0],e[1]-=o[0],e[2]-=o[1],e[3]-=o[1],e[4]-=o[2],e[5]-=o[2],bo(e,t,n,r),e[0]+=o[0],e[1]+=o[0],e[2]+=o[1],e[3]+=o[1],e[4]+=o[2],e[5]+=o[2],!0},getCenter:vo,getLength:Io,getLengths:Eo,getMaxLength:xo,getDiagonalLength:_o,getMinPoint:So,getMaxPoint:wo,getXRange:Co,getYRange:Oo,getZRange:Ao,getCorners:Mo,computeCornerPoints:To,computeLocalBounds:Po,transformBounds:Lo,computeScale3:No,cutWithPlane:zo,intersectBox:ko,intersectPlane:Ro,intersect:Vo,intersects:jo,containsPoint:Uo,contains:function(e,t){return!!jo(e,t)&&!!Uo(e,...So(t))&&!!Uo(e,...wo(t))},INIT_BOUNDS:io};const Bo={UNCHANGED:0,SINGLE_POINT:1,X_LINE:2,Y_LINE:3,Z_LINE:4,XY_PLANE:5,YZ_PLANE:6,XZ_PLANE:7,XYZ_GRID:8,EMPTY:9};var $o={StructuredType:Bo};const{StructuredType:Ko}=$o;var Wo={getDataDescriptionFromExtent:function(e){let t=0;for(let n=0;n<3;++n)e[2*n]<e[2*n+1]&&t++;return e[0]>e[1]||e[2]>e[3]||e[4]>e[5]?Ko.EMPTY:3===t?Ko.XYZ_GRID:2===t?e[0]===e[1]?Ko.YZ_PLANE:e[2]===e[3]?Ko.XZ_PLANE:Ko.XY_PLANE:1===t?e[0]<e[1]?Ko.X_LINE:e[2]<e[3]?Ko.Y_LINE:Ko.Z_LINE:Ko.SINGLE_POINT},...$o};const{vtkErrorMacro:Ho}=wt,Yo={direction:null,indexToWorld:null,worldToIndex:null,spacing:[1,1,1],origin:[0,0,0],extent:[0,-1,0,-1,0,-1],dataDescription:Bo.EMPTY};function Jo(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.assign(t,Yo,n),yr.extend(e,t,n),t.direction?Array.isArray(t.direction)&&(t.direction=new Float64Array(t.direction.slice(0,9))):t.direction=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}(new Float64Array(9)),t.indexToWorld=new Float64Array(16),t.worldToIndex=new Float64Array(16),wt.get(e,t,["indexToWorld","worldToIndex"]),wt.setGetArray(e,t,["origin","spacing"],3),wt.setGetArray(e,t,["direction"],9),wt.getArray(e,t,["extent"],6),function(e,t){t.classHierarchy.push("vtkImageData"),e.setExtent=function(){if(t.deleted)return Ho("instance deleted - cannot call any method"),!1;for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];const a=1===r.length?r[0]:r;if(6!==a.length)return!1;const i=t.extent.some((e,t)=>e!==a[t]);return i&&(t.extent=a.slice(),t.dataDescription=Wo.getDataDescriptionFromExtent(t.extent),e.modified()),i},e.setDimensions=function(){let n,r,o;if(t.deleted)Ho("instance deleted - cannot call any method");else{if(1===arguments.length){const e=arguments.length<=0?void 0:arguments[0];n=e[0],r=e[1],o=e[2]}else{if(3!==arguments.length)return void Ho("Bad dimension specification");n=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],o=arguments.length<=2?void 0:arguments[2]}e.setExtent(0,n-1,0,r-1,0,o-1)}},e.getDimensions=()=>[t.extent[1]-t.extent[0]+1,t.extent[3]-t.extent[2]+1,t.extent[5]-t.extent[4]+1],e.getNumberOfCells=()=>{const t=e.getDimensions();let n=1;for(let e=0;e<3;e++){if(0===t[e])return 0;t[e]>1&&(n*=t[e]-1)}return n},e.getNumberOfPoints=()=>{const t=e.getDimensions();return t[0]*t[1]*t[2]},e.getPoint=n=>{const r=e.getDimensions();if(0===r[0]||0===r[1]||0===r[2])return Ho("Requesting a point from an empty image."),null;const o=new Float64Array(3);switch(t.dataDescription){case Bo.EMPTY:return null;case Bo.SINGLE_POINT:break;case Bo.X_LINE:o[0]=n;break;case Bo.Y_LINE:o[1]=n;break;case Bo.Z_LINE:o[2]=n;break;case Bo.XY_PLANE:o[0]=n%r[0],o[1]=n/r[0];break;case Bo.YZ_PLANE:o[1]=n%r[1],o[2]=n/r[1];break;case Bo.XZ_PLANE:o[0]=n%r[0],o[2]=n/r[0];break;case Bo.XYZ_GRID:o[0]=n%r[0],o[1]=n/r[0]%r[1],o[2]=n/(r[0]*r[1]);break;default:Ho("Invalid dataDescription")}const a=[0,0,0];return e.indexToWorld(o,a),a},e.getBounds=()=>e.extentToBounds(e.getSpatialExtent()),e.extentToBounds=e=>Fo.transformBounds(e,t.indexToWorld),e.getSpatialExtent=()=>Fo.inflate([...t.extent],.5),e.computeTransforms=()=>{!function(e,t){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1}(t.indexToWorld,t.origin),t.indexToWorld[0]=t.direction[0],t.indexToWorld[1]=t.direction[1],t.indexToWorld[2]=t.direction[2],t.indexToWorld[4]=t.direction[3],t.indexToWorld[5]=t.direction[4],t.indexToWorld[6]=t.direction[5],t.indexToWorld[8]=t.direction[6],t.indexToWorld[9]=t.direction[7],t.indexToWorld[10]=t.direction[8],function(e,t,n){var r=n[0],o=n[1],a=n[2];e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*o,e[5]=t[5]*o,e[6]=t[6]*o,e[7]=t[7]*o,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]}(t.indexToWorld,t.indexToWorld,t.spacing),function(e,t){var n=t[0],r=t[1],o=t[2],a=t[3],i=t[4],s=t[5],l=t[6],c=t[7],u=t[8],d=t[9],m=t[10],g=t[11],f=t[12],h=t[13],p=t[14],y=t[15],b=n*s-r*i,v=n*l-o*i,I=n*c-a*i,E=r*l-o*s,C=r*c-a*s,O=o*c-a*l,A=u*h-d*f,x=u*p-m*f,_=u*y-g*f,S=d*p-m*h,w=d*y-g*h,D=m*y-g*p,M=b*D-v*w+I*S+E*_-C*x+O*A;M&&(M=1/M,e[0]=(s*D-l*w+c*S)*M,e[1]=(o*w-r*D-a*S)*M,e[2]=(h*O-p*C+y*E)*M,e[3]=(m*C-d*O-g*E)*M,e[4]=(l*_-i*D-c*x)*M,e[5]=(n*D-o*_+a*x)*M,e[6]=(p*I-f*O-y*v)*M,e[7]=(u*O-m*I+g*v)*M,e[8]=(i*w-s*_+c*A)*M,e[9]=(r*_-n*w-a*A)*M,e[10]=(f*C-h*I+y*b)*M,e[11]=(d*I-u*C-g*b)*M,e[12]=(s*x-i*S-l*A)*M,e[13]=(n*S-r*x+o*A)*M,e[14]=(h*v-f*E-p*b)*M,e[15]=(u*E-d*v+m*b)*M)}(t.worldToIndex,t.indexToWorld)},e.indexToWorld=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return q(n,e,t.indexToWorld),n},e.indexToWorldVec3=e.indexToWorld,e.worldToIndex=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return q(n,e,t.worldToIndex),n},e.worldToIndexVec3=e.worldToIndex,e.indexToWorldBounds=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Fo.transformBounds(e,t.indexToWorld,n)},e.worldToIndexBounds=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Fo.transformBounds(e,t.worldToIndex,n)},e.onModified(e.computeTransforms),e.computeTransforms(),e.getCenter=()=>Fo.getCenter(e.getBounds()),e.computeHistogram=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const r=[0,0,0,0,0,0];e.worldToIndexBounds(t,r);const o=[0,0,0],a=[0,0,0];Fo.computeCornerPoints(r,o,a),Jt(o,o),Jt(a,a);const i=e.getDimensions();Qt(o,[0,0,0],[i[0]-1,i[1]-1,i[2]-1],o),Qt(a,[0,0,0],[i[0]-1,i[1]-1,i[2]-1],a);const s=i[0],l=i[0]*i[1],c=e.getPointData().getScalars().getData();let u=-1/0,d=1/0,m=0,g=0,f=0;for(let e=o[2];e<=a[2];e++)for(let t=o[1];t<=a[1];t++){let i=o[0]+t*s+e*l;for(let s=o[0];s<=a[0];s++){if(!n||n([s,t,e],r)){const e=c[i];e>u&&(u=e),e<d&&(d=e),m+=e*e,g+=e,f+=1}++i}}const h=f>0?g/f:0,p=f?Math.abs(m/f-h*h):0;return{minimum:d,maximum:u,average:h,variance:p,sigma:Math.sqrt(p),count:f}},e.computeIncrements=function(e){const t=[];let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;for(let r=0;r<3;++r)t[r]=n,n*=e[2*r+1]-e[2*r]+1;return t},e.computeOffsetIndex=t=>{let[n,r,o]=t;const a=e.getExtent(),i=e.getPointData().getScalars().getNumberOfComponents(),s=e.computeIncrements(a,i);return Math.floor((Math.round(n)-a[0])*s[0]+(Math.round(r)-a[2])*s[1]+(Math.round(o)-a[4])*s[2])},e.getOffsetIndexFromWorld=t=>{const n=e.getExtent(),r=e.worldToIndex(t);for(let e=0;e<3;++e)if(r[e]<n[2*e]||r[e]>n[2*e+1])return Ho(`GetScalarPointer: Pixel ${r} is not in memory. Current extent = ${n}`),NaN;return e.computeOffsetIndex(r)},e.getScalarValueFromWorld=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const r=e.getPointData().getScalars().getNumberOfComponents();if(n<0||n>=r)return Ho(`GetScalarPointer: Scalar Component ${n} is not within bounds. Current Scalar numberOfComponents: ${r}`),NaN;const o=e.getOffsetIndexFromWorld(t);return Number.isNaN(o)?o:e.getPointData().getScalars().getComponent(o,n)}}(e,t)}var Xo={newInstance:wt.newInstance(Jo,"vtkImageData"),extend:Jo};function qo(e,t,n){let r=-1;if(t.forEach((t,n)=>{r>=0||t.a==e.b&&(r=n)}),r>=0){const e=t[r];return t.splice(r,1),n.push(e.b),n[0]==e.b?{remainingLines:t,contourPoints:n,type:"CLOSED_PLANAR"}:qo(e,t,n)}return{remainingLines:t,contourPoints:n,type:"OPEN_PLANAR"}}function Qo(e){if(0==e.length)return[];const t=[],n=e.shift();t.push(n.a),t.push(n.b);const r=qo(n,e,t);if(0==r.remainingLines.length)return[{type:r.type,contourPoints:r.contourPoints}];{const e=Qo(r.remainingLines);return e.push({type:r.type,contourPoints:r.contourPoints}),e}}function Zo(e,t,n){const r=n.toIJK(e),o=n.toIJK(t),a=K(),{testIJK:i}=n,s=Q(K(),r,o),l=Math.round(Math.max(...s.map(Math.abs)));if(l<2)return!0;const c=Y(K(),s,1/l);for(let e=1;e<l;e++)if(J(a,o,c,e),!i(a))return!1;return!0}function ea({dimensions:e,imageData:t,voxelManager:n,segmentIndex:r,containedSegmentIndices:o}){const a=e[0],i=a*e[1];return{testCenter:(e,s)=>{const l=H(K(),e,s).map(e=>e/2),c=t.worldToIndex(l).map(Math.round),[u,d,m]=c,g=u+d*a+m*i,f=n.getAtIndex(g);return f===r||o?.has(f)},toIJK:e=>t.worldToIndex(e),testIJK:e=>{const[t,s,l]=e,c=Math.round(t)+Math.round(s)*a+Math.round(l)*i,u=n.getAtIndex(c);return u===r||o?.has(u)}}}const ta=.01;function na(e,t,n={maxMajor:0,maxMinor:0}){const{points:r}=e.polyData,{maxMinor:o,maxMajor:a}=n;let i,s=a*a,l=o*o;for(let e=0;e<r.length;e++)for(let n=e+1;n<r.length;n++){const o=r[e],a=r[n],c=Z(o,a);c<s||c-ta<s+ta&&i||t.testCenter(o,a)&&Zo(o,a,t)&&(s=c-ta,i=[e,n],l=0)}if(!i)return;s=Math.sqrt(s+ta);const c=r[i[0]],u=r[i[1]],d=Q(K(),c,u);let m;Y(d,d,1/s);for(let e=0;e<r.length;e++)for(let n=e+1;n<r.length;n++){const o=r[e],a=r[n],i=Z(o,a);if(i<=l)continue;const s=Q(K(),o,a);Math.abs(X(s,d))/Math.sqrt(i)>ta||t.testCenter(o,a)&&Zo(o,a,t)&&(l=i,m=[e,n])}return m?(l=Math.sqrt(l),{majorAxis:[c,u],minorAxis:[r[m[0]],r[m[1]]],maxMajor:s,maxMinor:l,...e}):void 0}const{QW:ra}=r,oa={createVoxelManager:(e,t)=>ra.createScalarVolumeVoxelManager({dimensions:e,scalarData:t}),createDataStructure:e=>{const{scalarData:t,dimensions:n,spacing:r,origin:o,direction:a}=e;return{voxelManager:oa.createVoxelManager(n,t),dimensions:n,spacing:r,origin:o,direction:a,scalarData:t}},createVTKImageData:(e,t,n,r,o)=>{const a=Xo.newInstance();if(a.setDimensions(e),a.setOrigin(t),a.setDirection(n),a.setSpacing(r),!o)return a;const i=mn.newInstance({name:"Scalars",numberOfComponents:1,values:o});return a.getPointData().setScalars(i),a},processSegmentStatistics:({segVoxelManager:e,imageVoxelManager:t,indices:n,bounds:r,imageData:o})=>{e.forEach(({value:e,pointIJK:r,pointLPS:o,index:a})=>{if(-1===n.indexOf(e))return;const i=t.getAtIndex(a);Ce.statsCallback({segmentIndex:e,value:i,pointIJK:r,pointLPS:o})},{boundsIJK:r||t.getDefaultBounds(),imageData:o})},performMarchingSquares:(e,t=null,n=null)=>{const r={};null!==t&&(r.slice=t),null!==n&&(r.slicingMode=n);const o=ao.newInstance(r);return o.setInputData(e),o.setContourValues([1]),o.setMergePoints(!1),o.getOutputData()},createContoursFromPolyData:(e,t=null)=>{const n=function(e,t=!1){const n=e.getPoints(),r=e.getLines(),o=new Array(n.getNumberOfPoints()).fill(0).map((e,t)=>n.getPoint(t).slice()),a=new Array(r.getNumberOfCells()).fill(0).map((e,t)=>{const n=r.getCell(3*t).slice();return{a:n[0],b:n[1]}});if(t)return{points:o,lines:a};const i=[];for(const[e,t]of o.entries()){const n=i.findIndex(e=>e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]);if(n>=0)a.map(t=>(t.a===e&&(t.a=n),t.b===e&&(t.b=n),t));else{const n=i.length;i.push(t),a.map(t=>(t.a===e&&(t.a=n),t.b===e&&(t.b=n),t))}}return{points:i,lines:a.filter(e=>e.a!==e.b)}}(e);return n.points?.length?{contours:(r=n.lines,Qo(r)),polyData:n}:null;var r},createSegmentsFromIndices:e=>[null,...e.map(e=>({segmentIndex:e}))],getArgsFromInfo:e=>{const{segmentationInfo:t,imageInfo:n}=e;return{segmentation:t&&oa.createDataStructure(t),image:n&&oa.createDataStructure(n)}},calculateSegmentsStatisticsVolume:e=>{const{mode:t,indices:n,unit:r}=e,{segmentation:o,image:a}=oa.getArgsFromInfo(e),{voxelManager:i,spacing:s}=o,{voxelManager:l}=a,c=oa.createVTKImageData(o.dimensions,o.origin,o.direction,o.spacing);return Ce.statsInit({storePointData:!1,indices:n,mode:t}),oa.processSegmentStatistics({segVoxelManager:i,imageVoxelManager:l,indices:n,imageData:c}),Ce.getStatistics({spacing:s,mode:t,unit:r})},computeMetabolicStats({segmentationInfo:e,imageInfo:t}){const{scalarData:n,dimensions:r,spacing:o,origin:a,direction:i}=e,{spacing:s,dimensions:l,direction:c,origin:u,scalarData:d}=t,m=oa.createVoxelManager(e.dimensions,e.scalarData),g=oa.createVoxelManager(l,d);let f=0,h=0;const p=m.getScalarDataLength();for(let e=0;e<p;e++)0!==m.getAtIndex(e)&&(f+=g.getAtIndex(e),h++);return{tmtv:.001*h*o[0]*o[1]*o[2],tlg:(h>0?f/h:0)*h*s[0]*s[1]*s[2]*.001}},calculateSegmentsStatisticsStack:e=>{const{segmentationInfo:t,imageInfo:n,indices:r,mode:o}=e;Ce.statsInit({storePointData:!0,indices:r,mode:o});for(let e=0;e<t.length;e++){const o=t[e],a=n[e],i=[o.dimensions[0],o.dimensions[1],1],s=oa.createVoxelManager(i,o.scalarData),l=oa.createVoxelManager(i,a.scalarData),c=oa.createVTKImageData(i,o.origin,o.direction,o.spacing);oa.processSegmentStatistics({segVoxelManager:s,imageVoxelManager:l,indices:r,imageData:c})}const a=t[0].spacing;return Ce.getStatistics({spacing:a,mode:o})},getSegmentLargestBidirectionalInternal:e=>{const{segmentationInfo:t,imageInfo:n,indices:r,mode:o,isStack:a}=e;let i;return({segmentation:i}=a?oa.getArgsFromInfo({segmentationInfo:t[0]}):oa.getArgsFromInfo(e)),a?oa.calculateBidirectionalStack({segmentationInfo:t,indices:r,mode:o}):oa.calculateVolumetricBidirectional({segmentation:i,indices:r,mode:o})},findLargestBidirectionalFromContours:(e,t,n)=>{let r;for(const n of e){const e=na(n,t,r);e&&(r=e)}return r?{segmentIndex:n,majorAxis:r.majorAxis,minorAxis:r.minorAxis,maxMajor:r.maxMajor,maxMinor:r.maxMinor}:null},calculateBidirectionalStack:({segmentationInfo:e,indices:t,mode:n})=>{const r=oa.createSegmentsFromIndices(t);let o=[];for(let t=0;t<e.length;t++){const n=e[t],a=n.dimensions,i=n.scalarData,{spacing:s,direction:l,origin:c}=n,u=oa.createVoxelManager(a,i),d=a[0]*a[1];for(let e=1;e<r.length;e++){const t=r[e];if(!t)continue;const n=t.segmentIndex;if(oa.isSliceEmptyForSegmentVolume(0,i,d,n))continue;const m=[],g=new Uint8Array(i.length);for(let e=0;e<i.length;e++)g[e]=i[e]===n?1:0;const f=mn.newInstance({name:"Pixels",numberOfComponents:1,values:g}),h=oa.createVTKImageData(a,c,l,[s[0],s[1],1]);h.getPointData().setScalars(f);try{const e=oa.performMarchingSquares(h,null,2),t=oa.createContoursFromPolyData(e);t&&m.push(t)}catch(e){console.warn(e)}const p=ea({dimensions:a,imageData:h,voxelManager:u,segmentIndex:n}),y=oa.findLargestBidirectionalFromContours(m,p,n);y&&o.push(y)}}return o},calculateVolumetricBidirectional:({segmentation:e,indices:t,mode:n})=>{const{voxelManager:r,dimensions:o,origin:a,direction:i,spacing:s}=e,l=oa.createVTKImageData(o,a,i,s),c=oa.generateContourSetsFromLabelmapVolume({segmentation:e,indices:t,imageData:l,mode:n}),u=[];for(let e=0;e<c.length;e++){const t=c[e],{segmentIndex:n}=t.segment,a=t.sliceContours,i=ea({dimensions:o,imageData:l,voxelManager:r,segmentIndex:n}),s=oa.findLargestBidirectionalFromContours(a,i,n);s&&u.push(s)}return u},generateContourSetsFromLabelmapVolume:e=>{const{segmentation:t,indices:n}=e,{dimensions:r,scalarData:o,origin:a,direction:i,spacing:s}=t;let l=e.imageData;l||(l=oa.createVTKImageData(r,a,i,s));const c=r[2],u=r[0]*r[1],d=oa.createSegmentsFromIndices(n);for(let e=0;e<c;e++)for(let t=0;t<r[1];t++){const n=t*r[0]+e*u;o[n]=0,o[n+r[0]-1]=0}const m=[],g=d.length;for(let e=0;e<g;e++){const t=d[e];if(!t)continue;const n=t.segmentIndex,r=[],a=mn.newInstance({name:"Scalars",numberOfComponents:1,size:u*c,dataType:"Uint8Array"});for(let e=0;e<c;e++){if(oa.isSliceEmptyForSegmentVolume(e,o,u,n))continue;const t=e*u;try{for(let e=0;e<u;e++)o[e+t]===n?a.setValue(e+t,1):a.setValue(e,0);const i=Xo.newInstance();i.shallowCopy(l),i.getPointData().setScalars(a);const s=oa.performMarchingSquares(i,e),c=oa.createContoursFromPolyData(s,e);c&&r.push(c)}catch(t){console.warn(e),console.warn(t)}}const i={sliceContours:r,segment:t};m.push(i)}return m},isSliceEmptyForSegmentVolume:(e,t,n,r)=>{const o=e*n,a=o+n;for(let e=o;e<a;e++)if(t[e]===r)return!1;return!0}};g(oa)},6833:function(e,t,n){var r;!function(e,o){function a(e){var t=this;t.next=function(){var e,n,r=t.w,o=t.X,a=t.i;return t.w=r=r+1640531527|0,n=o[a+34&127],e=o[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=o[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,o,a,i,s=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),o=0,a=-32;a<l;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(n=s[127&a]^=r+i)?o+1:0);for(o>=128&&(s[127&(t&&t.length||0)]=-1),o=127,a=512;a>0;--a)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;e.w=i,e.X=s,e.i=o}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.X&&i(r,n),o.state=function(){return i(n,{})}),o}o&&o.exports?o.exports=s:n.amdD&&n.amdO?void 0===(r=function(){return s}.call(t,n,t,o))||(o.exports=r):this.xor4096=s}(0,e=n.nmd(e),n.amdD)},7180:function(e,t,n){var r;!function(e,o){function a(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new a(e),r=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&i(r,n),o.state=function(){return i(n,{})}),o}o&&o.exports?o.exports=s:n.amdD&&n.amdO?void 0===(r=function(){return s}.call(t,n,t,o))||(o.exports=r):this.alea=s}(0,e=n.nmd(e),n.amdD)},7391:(e,t,n)=>{var r=n(7180),o=n(3181),a=n(3031),i=n(9067),s=n(6833),l=n(3717),c=n(4801);c.alea=r,c.xor128=o,c.xorwow=a,c.xorshift7=i,c.xor4096=s,c.tychei=l,e.exports=c},7820:e=>{"use strict";"undefined"!=typeof self?e.exports=self:"undefined"!=typeof window?e.exports=window:e.exports=Function("return this")()},8068:e=>{"use strict";e.exports=SyntaxError},8452:(e,t,n)=>{"use strict";var r=n(1189),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),a=Object.prototype.toString,i=Array.prototype.concat,s=n(41),l=n(592)(),c=function(e,t,n,r){if(t in e)if(!0===r){if(e[t]===n)return}else if("function"!=typeof(o=r)||"[object Function]"!==a.call(o)||!r())return;var o;l?s(e,t,n,!0):s(e,t,n)},u=function(e,t){var n=arguments.length>2?arguments[2]:{},a=r(t);o&&(a=i.call(a,Object.getOwnPropertySymbols(t)));for(var s=0;s<a.length;s+=1)c(e,a[s],t[a[s]],n[a[s]])};u.supportsDescriptors=!!l,e.exports=u},8875:(e,t,n)=>{"use strict";var r;if(!Object.keys){var o=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=n(1093),s=Object.prototype.propertyIsEnumerable,l=!s.call({toString:null},"toString"),c=s.call(function(){},"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],d=function(e){var t=e.constructor;return t&&t.prototype===e},m={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},g=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!m["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{d(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===a.call(e),r=i(e),s=t&&"[object String]"===a.call(e),m=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var f=c&&n;if(s&&e.length>0&&!o.call(e,0))for(var h=0;h<e.length;++h)m.push(String(h));if(r&&e.length>0)for(var p=0;p<e.length;++p)m.push(String(p));else for(var y in e)f&&"prototype"===y||!o.call(e,y)||m.push(String(y));if(l)for(var b=function(e){if("undefined"==typeof window||!g)return d(e);try{return d(e)}catch(e){return!1}}(e),v=0;v<u.length;++v)b&&"constructor"===u[v]||!o.call(e,u[v])||m.push(u[v]);return m}}e.exports=r},9067:function(e,t,n){var r;!function(e,o){function a(e){var t=this;t.next=function(){var e,n,r=t.x,o=t.i;return e=r[o],n=(e^=e>>>7)^e<<24,n^=(e=r[o+1&7])^e>>>10,n^=(e=r[o+3&7])^e>>>3,n^=(e=r[o+4&7])^e<<7,e=r[o+7&7],n^=(e^=e<<13)^e<<9,r[o]=n,t.i=o+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.x&&i(r,n),o.state=function(){return i(n,{})}),o}o&&o.exports?o.exports=s:n.amdD&&n.amdO?void 0===(r=function(){return s}.call(t,n,t,o))||(o.exports=r):this.xorshift7=s}(0,e=n.nmd(e),n.amdD)},9675:e=>{"use strict";e.exports=TypeError}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,