# Security Audit Workflow
# Regular security auditing and monitoring

name: Security Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      audit_level:
        description: 'Audit severity level'
        required: false
        default: 'moderate'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical

permissions:
  contents: read
  issues: write
  security-events: write

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        id: npm-audit
        run: |
          echo "üîç Running npm security audit..."
          
          # Set audit level from input or default
          AUDIT_LEVEL="${{ github.event.inputs.audit_level || 'moderate' }}"
          echo "Audit level: $AUDIT_LEVEL"
          
          # Run audit and capture output
          npm audit --audit-level=$AUDIT_LEVEL --json > audit-results.json || true
          
          # Parse results
          VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities')
          TOTAL_VULNS=$(echo $VULNERABILITIES | jq 'add')
          
          echo "vulnerability_count=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "audit_results<<EOF" >> $GITHUB_OUTPUT
          cat audit-results.json | jq . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check for critical/high vulnerabilities
          CRITICAL=$(echo $VULNERABILITIES | jq '.critical // 0')
          HIGH=$(echo $VULNERABILITIES | jq '.high // 0')
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "‚ùå High/Critical vulnerabilities found!"
            echo "Critical: $CRITICAL, High: $HIGH"
            echo "has_critical_vulns=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No critical/high vulnerabilities found"
            echo "has_critical_vulns=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate security report
        if: always()
        run: |
          echo "üìä Generating security report..."
          
          cat > security-report.md << 'EOF'
          # Security Audit Report
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Audit Level**: ${{ github.event.inputs.audit_level || 'moderate' }}
          **Total Vulnerabilities**: ${{ steps.npm-audit.outputs.vulnerability_count }}
          
          ## Vulnerability Summary
          
          $(cat audit-results.json | jq -r '
            if .metadata.vulnerabilities then
              "- Critical: " + (.metadata.vulnerabilities.critical // 0 | tostring) + "\n" +
              "- High: " + (.metadata.vulnerabilities.high // 0 | tostring) + "\n" +
              "- Medium: " + (.metadata.vulnerabilities.medium // 0 | tostring) + "\n" +
              "- Low: " + (.metadata.vulnerabilities.low // 0 | tostring)
            else
              "No vulnerabilities data available"
            end
          ')
          
          ## Recommendations
          
          $(if [ "${{ steps.npm-audit.outputs.has_critical_vulns }}" = "true" ]; then
            echo "‚ö†Ô∏è **Immediate action required** - Critical or high severity vulnerabilities found"
            echo ""
            echo "1. Review vulnerable dependencies"
            echo "2. Update to secure versions"
            echo "3. Test application functionality"
            echo "4. Deploy security patches"
          else
            echo "‚úÖ No immediate action required"
            echo ""
            echo "Continue monitoring dependencies for new vulnerabilities"
          fi)
          
          ## Detailed Results
          
          \`\`\`json
          $(cat audit-results.json | jq .)
          \`\`\`
          EOF
          
          # Replace variables in the report
          sed -i "s/\$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")/$(date -u +"%Y-%m-%d %H:%M:%S UTC")/g" security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report-${{ github.run_number }}
          path: |
            security-report.md
            audit-results.json
          retention-days: 30
      
      - name: Create security issue
        if: steps.npm-audit.outputs.has_critical_vulns == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Security Alert: Critical/High Vulnerabilities Detected',
              body: `${report}
              
              ---
              
              **Automated Security Alert**
              - Workflow: ${context.workflow}
              - Run ID: ${context.runId}
              - Triggered by: ${context.eventName}
              `,
              labels: ['security', 'vulnerability', 'critical', 'automated']
            });

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security tests
        run: |
          echo "üîí Running security test suite..."
          
          # Check if security tests exist
          if npm run test:security 2>/dev/null; then
            echo "‚úÖ Security tests passed"
          else
            echo "‚ö†Ô∏è No security tests configured"
          fi
      
      - name: Check for secrets in code
        run: |
          echo "üîç Scanning for potential secrets..."
          
          # Simple secret detection patterns
          SECRET_PATTERNS=(
            "password.*[=:].*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*[=:].*['\"][^'\"]{16,}['\"]"
            "secret.*[=:].*['\"][^'\"]{16,}['\"]"
            "token.*[=:].*['\"][^'\"]{16,}['\"]"
            "-----BEGIN.*PRIVATE.*KEY-----"
          )
          
          SECRETS_FOUND=false
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null; then
              echo "‚ö†Ô∏è Potential secret found matching pattern: $pattern"
              SECRETS_FOUND=true
            fi
          done
          
          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "‚ùå Potential secrets detected in code"
            echo "Please review and remove any hardcoded secrets"
            exit 1
          else
            echo "‚úÖ No obvious secrets detected in code"
          fi
      
      - name: Security configuration check
        run: |
          echo "üîß Checking security configuration..."
          
          # Check for security-related files
          SECURITY_FILES=(
            "src/store/securityStore.ts"
            "src/utils/crypto.ts"
            "src/components/SecurityLogin.tsx"
            "src/components/SecurityDashboard.tsx"
            "SECURITY_IMPLEMENTATION.md"
          )
          
          for file in "${SECURITY_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ö†Ô∏è $file missing"
            fi
          done

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, code-security-scan]
    if: always()
    
    steps:
      - name: Security status summary
        uses: actions/github-script@v7
        with:
          script: |
            const dependencyResult = '${{ needs.dependency-audit.result }}';
            const codeResult = '${{ needs.code-security-scan.result }}';
            
            let summary = '## üîí Security Audit Summary\n\n';
            
            if (dependencyResult === 'success' && codeResult === 'success') {
              summary += '‚úÖ **All security checks passed**\n\n';
              summary += '- Dependency audit: ‚úÖ Passed\n';
              summary += '- Code security scan: ‚úÖ Passed\n';
            } else {
              summary += '‚ö†Ô∏è **Security issues detected**\n\n';
              summary += `- Dependency audit: ${dependencyResult === 'success' ? '‚úÖ' : '‚ùå'} ${dependencyResult}\n`;
              summary += `- Code security scan: ${codeResult === 'success' ? '‚úÖ' : '‚ùå'} ${codeResult}\n`;
            }
            
            summary += '\n---\n';
            summary += `**Workflow**: ${context.workflow}\n`;
            summary += `**Run**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            
            console.log(summary);
            
            // Set job summary
            await core.summary
              .addRaw(summary)
              .write();